<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClosedXML</name>
    </assembly>
    <members>
        <member name="T:ClosedXML.Excel.Caching.IXLRepository">
            <summary>
            Base interface for an abstract repository.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Caching.IXLRepository.Clear">
            <summary>
            Clear the repository;
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Caching.IXLRepository`2.Store(`0@,`1)">
            <summary>
            Put the <paramref name="value"/> into the repository under the specified <paramref name="key"/>
            if there is no such key present.
            </summary>
            <param name="key">Key to identify the value.</param>
            <param name="value">Value to put into the repository if key does not exist.</param>
            <returns>Value stored in the repository under the specified <paramref name="key"/>. If key already existed
            returned value may differ from the input one.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Caching.XLRepositoryBase`2.ContainsKey(`0@,`1@)">
            <summary>
            Check if the specified key is presented in the repository.
            </summary>
            <param name="key">Key to look for.</param>
            <param name="value">Value from the repository stored under specified key or null if key does
            not exist or the entry under this key has already bee GCed.</param>
            <returns>True if entry exists and alive, false otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Caching.XLRepositoryBase`2.Store(`0@,`1)">
            <summary>
            Put the entity into the repository under the specified key if no other entity with
            the same key is presented.
            </summary>
            <param name="key">Key to identify the entity.</param>
            <param name="value">Entity to store.</param>
            <returns>Entity that is stored in the repository under the specified key
            (it can be either the <paramref name="value"/> or another entity that has been added to
            the repository before.)</returns>
        </member>
        <member name="M:ClosedXML.Excel.Caching.XLRepositoryBase`2.GetEnumerator">
            <summary>
            Enumerate items in repository removing "dead" entries.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Caching.XLWorkbookElementRepositoryBase`2">
            <summary>
            Base repository for <see cref="T:ClosedXML.Excel.XLWorkbook"/> elements.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.AnyValue">
            <summary>
            A discriminated union representing any value that can be passed around in the formula evaluation.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.AnyValue.Blank">
            <summary>
            A value of a blank cell or missing argument. Conversion methods mostly treat blank like 0 or an empty string.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.AnyValue.IsScalarType">
            <summary>
            Is the value a scalar (blank, logical, number, text or error).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.TryPickArea(ClosedXML.Excel.XLRangeAddress@,ClosedXML.Excel.XLError@)">
            <summary>
            Try to get a reference that is a one area from the value.
            </summary>
            <param name="area">The found area.</param>
            <param name="error">Original error, if the value is error, <c>#VALUE!</c> if type is not a reference or #REF! if more than one area in the reference.</param>
            <returns>True if area could be determined, false otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.TryPickSingleOrMultiValue(ClosedXML.Excel.CalcEngine.ScalarValue@,ClosedXML.Excel.CalcEngine.Array@,ClosedXML.Excel.CalcEngine.CalcContext)">
            <summary>
            <para>
            Try to get a value more in line with an array formula semantic. The output is always
            either single value or an array.
            </para>
            <para>
            Single cell references are turned into a scalar, multi-area references are turned
            into <see cref="F:ClosedXML.Excel.XLError.IncompatibleValue"/> and single-area references are turned
            into arrays.
            </para>
            </summary>
            <remarks>
            Note the difference in nomenclature: <em>single/multi value</em> vs <em>scalar/collection type</em>.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.ImplicitIntersection(ClosedXML.Excel.CalcEngine.CalcContext)">
            <summary>
            Implicit intersection for arguments of functions that don't accept range as a parameter (Excel 2016).
            </summary>
            <returns>Unchanged value for anything other than reference. Reference is changed into a single cell/#VALUE!</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.ReferenceRange(ClosedXML.Excel.CalcEngine.AnyValue@,ClosedXML.Excel.CalcEngine.AnyValue@,ClosedXML.Excel.CalcEngine.CalcContext)">
            <summary>
            Create a new reference that has one area that contains both operands or #VALUE! if not possible.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.ReferenceUnion(ClosedXML.Excel.CalcEngine.AnyValue@,ClosedXML.Excel.CalcEngine.AnyValue@)">
            <summary>
            Create a new reference by combining areas of both arguments. Areas of the new reference can overlap = some overlapping
            cells might be counted multiple times (<c>SUM((A1;A1)) = 2</c> if <c>A1</c> is <c>1</c>).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.CompareValues(ClosedXML.Excel.CalcEngine.ScalarValue,ClosedXML.Excel.CalcEngine.ScalarValue,System.Globalization.CultureInfo)">
            <summary>
            Compare two scalar values using Excel semantic. Rules for comparison are following:
            <list type="bullet">
                <item>Logical is always greater than any text (thus transitively greater than any number)</item>
                <item>Text is always greater than any number, even if empty string</item>
                <item>Logical are compared by value</item>
                <item>Numbers are compared by value</item>
                <item>Text is compared by through case insensitive comparison for workbook culture.</item>
                <item>
                    If any argument is error, return error (general rule for all operators).
                    If all args are errors, pick leftmost error (technically it is left to
                    implementation, but excel sems to be using left one)
                </item>
            </list>
            </summary>
            <param name="left">Left hand operand of the comparison.</param>
            <param name="right">Right hand operand of the comparison.</param>
            <param name="culture">Culture to use for comparison.</param>
            <returns>
                Return -1 (negative)  if left less than right
                Return 1 (positive) if left greater than left
                Return 0 if both operands are considered equal.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.GetArraySize">
            <summary>
            Get 2d size of the value. For scalars, it's 1x1, for multi-area references,
            it's also 1x1,because it is converted to <c>#VALUE!</c> error.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.GetArray">
            <summary>
            Return the array value.
            </summary>
            <exception cref="T:System.InvalidCastException" />
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Array">
            <summary>
            A base class for an 2D array. Every array is at least 1x1.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.Array.Width">
            <summary>
            Width of the array, at least 1.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.Array.Height">
            <summary>
            Height of the array, at least 1.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.Array.Item(System.Int32,System.Int32)">
            <summary>
            Get a value at specified coordinate.
            </summary>
            <param name="y">Uses 0-based notation.</param>
            <param name="x">Uses 0-based notation.</param>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Array.GetEnumerator">
            <summary>
            An iterator over all elements of an array, from top to bottom, from left to right.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Array.Apply(System.Func{ClosedXML.Excel.CalcEngine.ScalarValue,ClosedXML.Excel.CalcEngine.ScalarValue})">
            <summary>
            Return a new array that was created by applying a function to each element of the array.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Array.Apply(ClosedXML.Excel.CalcEngine.Array,ClosedXML.Excel.CalcEngine.BinaryFunc,ClosedXML.Excel.CalcEngine.CalcContext)">
            <summary>
            Return a new array that was created by applying a function to each element of the left and right array.
            Arrays can have different size and missing values are replaced by <c>#N/A</c>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Array.Rescale(System.Int32,System.Int32)">
            <summary>
            Rescale array for calculation of array formulas.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ConstArray">
            <summary>
            An array of scalar values.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.NumberArray">
            <summary>
            A special case of an array that is actually only numbers.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ReferenceArray">
            <summary>
            An array that retrieves its value directly from the worksheet without allocating extra memory.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ResizedArray">
            <summary>
            A resize array from another array. Extra items without value have <c>#N/A</c>.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ScalarArray">
            <summary>
            An array where all elements have same value.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.AstNode">
            <summary>
            Base class for all AST nodes. All AST nodes must be immutable.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AstNode.Accept``2(``0,ClosedXML.Excel.CalcEngine.IFormulaVisitor{``0,``1})">
            <summary>
            Method to accept a visitor (=call a method of visitor with correct type of the node).
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ValueNode">
            <summary>
            A base class for all AST nodes that can be evaluated to produce a value.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ScalarNode">
            <summary>
            AST node that contains a blank, logical, number, text or an error value.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ArrayNode">
            <summary>
            AST node that contains a constant array. Array is at least 1x1.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.UnaryNode">
            <summary>
            Unary expression, e.g. +123
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.BinaryNode">
            <summary>
            Binary expression, e.g. 1+2
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FunctionNode">
            <summary>
            A function call, e.g. <c>SIN(0.5)</c>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.FunctionNode.Name">
            <summary>
            Name of the function.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.NotSupportedNode">
            <summary>
            An placeholder node for AST nodes that are not yet supported in ClosedXML.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FileNode">
            <summary>
            AST node for an reference to an external file in a formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.FileNode.Numeric">
            <summary>
            If the file is references indirectly, numeric identifier of a file.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.FileNode.Path">
            <summary>
            If a file is referenced directly, a path to the file on the disc/UNC/web link, .
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.PrefixNode">
            <summary>
            AST node for prefix of a reference in a formula. Prefix is a specification where to look for a reference.
            <list type="bullet">
            <item>Prefix specifies a <c>Sheet</c> - used for references in the local workbook.</item>
            <item>Prefix specifies a <c>FirstSheet</c> and a <c>LastSheet</c> - 3D reference, references uses all sheets between first and last.</item>
            <item>Prefix specifies a <c>File</c>, no sheet is specified - used for named ranges in external file.</item>
            <item>Prefix specifies a <c>File</c> and a <c>Sheet</c> - references looks for its address in the sheet of the file.</item>
            </list>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.PrefixNode.File">
            <summary>
            If prefix references data from another file, can be empty.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.PrefixNode.Sheet">
            <summary>
            Name of the sheet, without ! or escaped quotes. Can be empty in some cases (e.g. reference to a named range in an another file).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.PrefixNode.FirstSheet">
            <summary>
            If the prefix is for 3D reference, name of first sheet. Empty otherwise.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.PrefixNode.LastSheet">
            <summary>
            If the prefix is for 3D reference, name of the last sheet. Empty otherwise.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ReferenceNode">
            <summary>
            AST node for a reference of an area in some sheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.ReferenceNode.Prefix">
            <summary>
            An optional prefix for reference item.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.ReferenceNode.Address">
            <summary>
            An address of a reference that corresponds to <see cref="P:ClosedXML.Excel.CalcEngine.ReferenceNode.Type"/>. Always without sheet (that is in the prefix).
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.NameNode">
            <summary>
            A name node in the formula. Name can refers to a generic formula, in most cases a reference, but it can be any kind of calculation (e.g. <c>A1+7</c>).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.NameNode.Prefix">
            <summary>
            An optional prefix for reference item.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.StructuredReferenceNode.Prefix">
            <summary>
            Can be empty if no prefix available.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.CalcContext.Workbook">
            <summary>
            Worksheet of the cell the formula is calculating.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.CalcContext.Worksheet">
            <summary>
            Worksheet of the cell the formula is calculating.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.CalcContext.FormulaAddress">
            <summary>
            Address of the calculated formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.CalcContext.Culture">
            <summary>
            A culture used for comparisons and conversions (e.g. text to number).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.CalcContext.UseImplicitIntersection">
            <summary>
            Excel 2016 and earlier doesn't support dynamic array formulas (it used an array formulas instead). As a consequence,
            all arguments for scalar functions where passed through implicit intersection before calling the function.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.CalcContext.IsArrayCalculation">
            <summary>
            Should functions be calculated per item of multi-values argument in the scalar parameters.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.CalcContext.GetNonBlankCells(ClosedXML.Excel.CalcEngine.Reference)">
            <summary>
            Get cells with a value for a reference.
            </summary>
            <param name="reference">Reference for which to return cells.</param>
            <returns>A lazy (non-materialized) enumerable of cells with a value for the reference.</returns>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.CalcEngine">
            <summary>
            CalcEngine parses strings and returns Expression objects that can
            be evaluated.
            </summary>
            <remarks>
            <para>This class has three extensibility points:</para>
            <para>Use the <b>RegisterFunction</b> method to define custom functions.</para>
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.CalcEngine.Parse(System.String)">
            <summary>
            Parses a string into an <see cref="T:ClosedXML.Excel.CalcEngine.Expression"/>.
            </summary>
            <param name="expression">String to parse.</param>
            <returns>An <see cref="T:ClosedXML.Excel.CalcEngine.Expression"/> object that can be evaluated.</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.CalcEngine.EvaluateFormula(System.String,ClosedXML.Excel.XLWorkbook,ClosedXML.Excel.XLWorksheet,ClosedXML.Excel.IXLAddress)">
            <summary>
            Evaluates a normal formula.
            </summary>
            <param name="expression">Expression to evaluate.</param>
            <param name="wb">Workbook where is formula being evaluated.</param>
            <param name="ws">Worksheet where is formula being evaluated.</param>
            <param name="address">Address of formula.</param>
            <returns>The value of the expression.</returns>
            <remarks>
            If you are going to evaluate the same expression several times,
            it is more efficient to parse it only once using the <see cref="M:ClosedXML.Excel.CalcEngine.CalcEngine.Parse(System.String)"/>
            method and then using the Expression.Evaluate method to evaluate
            the parsed expression.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.CalcEngine.ToCellContentValue(ClosedXML.Excel.CalcEngine.AnyValue,ClosedXML.Excel.CalcEngine.CalcContext)">
            <summary>
            Convert any kind of formula value to value returned as a content of a cell.
            <list type="bullet">
               <item><c>bool</c> - represents a logical value.</item>
               <item><c>double</c> - represents a number and also date/time as serial date-time.</item>
               <item><c>string</c> - represents a text value.</item>
               <item><see cref="T:ClosedXML.Excel.XLError" /> - represents a formula calculation error.</item>
            </list>
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.LegacyCalcEngineFunction">
            <summary>
            Delegate that represents CalcEngine functions.
            </summary>
            <param name="parms">List of <see cref="T:ClosedXML.Excel.CalcEngine.Expression"/> objects that represent the
            parameters to be used in the function call.</param>
            <returns>The function result.</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.CalcEngineHelpers.GetTotalCellsCount(ClosedXML.Excel.CalcEngine.XObjectExpression)">
            <summary>
            Get total count of cells in the specified range without initializing them all
            (which might cause serious performance issues on column-wide calculations).
            </summary>
            <param name="rangeExpression">Expression referring to the cell range.</param>
            <returns>Total number of cells in the range.</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.CalcEngineHelpers.GetRangeDimensions(ClosedXML.Excel.CalcEngine.XObjectExpression)">
            <summary>
            Get dimensions of the specified range without initializing them all
            (which might cause serious performance issues on column-wide calculations).
            </summary>
            <param name="rangeExpression">Expression referring to the cell range.</param>
            <returns>A tuple of column and row counts.</returns>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.DefaultFormulaVisitor`1">
            <summary>
            A default visitor that copies a formula.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Exceptions.FormulaErrorException">
            <summary>
            An exception to propagate error from legacy expression function.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Exceptions.MissingContextException">
            <summary>
            Evaluation of the formula needs an information that wasn't available. That can happen if the formula
            is evaluated from methods like <see cref="M:ClosedXML.Excel.XLWorkbook.Evaluate(System.String)"/>. Causes vary, e.g. implicit intersection
            needs an address of the formula cell. Various methods in ClosedXML are missing different information, e.g.
            <see cref="M:ClosedXML.Excel.IXLWorksheet.Evaluate(System.String,System.String)"/> has worksheet, but no cell address (=ranges will work, other things won't).
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Expression">
            <summary>
            An adapter for legacy function implementations.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.XObjectExpression">
            <summary>
            Expression that represents an external object.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.EmptyValueExpression">
            <summary>
            Expression that represents an omitted parameter.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.IValueObject">
            <summary>
            Interface supported by external objects that have to return a value
            other than themselves (e.g. a cell range object should return the
            cell content instead of the range itself).
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ExpressionCache">
            <summary>
            Caches expressions based on their string representation.
            This saves parsing time.
            </summary>
            <remarks>
            Uses weak references to avoid accumulating unused expressions.
            </remarks>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ExpressionParseException">
            <summary>
            The exception that is thrown when the strings to be parsed to an expression is invalid.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.ExpressionParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ExpressionParseException class with a 
            specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Formula">
            <summary>A non-state representation of a formula that can be used by many cells.</summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.Formula.Text">
            <summary>Text of the formula.</summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FormulaFlags">
            <summary>
            Flags that contain some useful information about a formula (mostly derived from flags in functions).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FormulaFlags.None">
            <summary>
            Basic formula that takes an input and returns output that is determined solely by the input. No side effects.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FormulaFlags.Volatile">
            <summary>
            Formula contains a function whose value can be different each time the function is called, even if arguments and workbook are same.
            </summary>
            <example><c>TODAY</c>, <c>RAND</c></example>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FormulaFlags.SideEffect">
            <summary>
            Formula that has a side effects beside returning the value.
            </summary>
            <example><c>HYPERLINK</c> changes the content of a cell in a workbook.</example>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FormulaFlags.HasSubtotal">
            <summary>
            Formula contains a reference to the <c>SUBTOTAL</c> function.
            </summary>
            <remarks>Performance optimization, so a formula with SUBTOTAL doesn't have to check each dependent cell each time it is evaluated.</remarks>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FormulaParser">
            <summary>
            A parser that takes a string and parses it into concrete syntax tree through XLParser and then
            to abstract syntax tree that is used to evaluate the formula.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FormulaParser.DefaultFunctionNameSpace">
            <summary>
            A prefix is that is used for functions that are present in a version of Excel, but aren't present in older versions.
            </summary>
            <example>
            If you write <c>CONCAT(A1,B1)</c> in Excel 2021 (not present in Excel 2013), it is saved to the worksheet file as
            <c>_xlfn.CONCAT(A1,B1)</c>, but the Excel GUI will show only <c>CONCAT(A1,B1)</c>, without the <c>_xlfn</c>.
            </example>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.FormulaParser.ConvertToAst(Irony.Parsing.ParseTree)">
            <summary>
            Parse a tree into a CSt that also has AST.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.FormulaParser.CreateReferenceNodeFactory">
            <summary>
            Reference AST node is significantly different from CST node. It takes Reference, ReferenceFunctionCall and ReferenceItem terms into a reference value
            that represent an area of a workbook (ReferenceNode, StructuredReferenceNode) and operations over these areas (BinaryOperation, UnaryOperation, FunctionExpression).
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FractionParser">
            <summary>
            Parse a fraction for text-to-number type coercion.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FunctionDefinition">
            <summary>
            Function definition class (keeps function name, parameter counts, and delegate).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FunctionDefinition._function">
            <summary>
            Only the <see cref="F:ClosedXML.Excel.CalcEngine.FunctionDefinition._function"/> or <see cref="F:ClosedXML.Excel.CalcEngine.FunctionDefinition._legacyFunction"/> is set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FunctionDefinition._legacyFunction">
            <summary>
            Only the <see cref="F:ClosedXML.Excel.CalcEngine.FunctionDefinition._function"/> or <see cref="F:ClosedXML.Excel.CalcEngine.FunctionDefinition._legacyFunction"/> is set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FunctionDefinition._markedParams">
            <summary>
            Which parameters of the function are marked. The values are indexes of the function parameters, starting from 0.
            Used to determine which arguments allow ranges and which don't.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.FunctionDefinition.CallAsArray(ClosedXML.Excel.CalcEngine.CalcContext,System.Span{ClosedXML.Excel.CalcEngine.AnyValue})">
            <summary>
            Evaluate the function with array formula semantic.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FunctionFlags">
            <summary>
            Function flags that indicate what does function do. It is used by CalcEngine for calculation
            chain and formula execution.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FunctionFlags.Scalar">
            <summary>
            Function that takes an input and returns an output. It is designed for a single value arguments.
            If scalar function is used for array formula or dynamic array formula, the function is called for each element separately.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FunctionFlags.Range">
            <summary>
            Non-scalar function. At least one of arguments of the function accepts a range. It means that
            implicit intersection works differently.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FunctionFlags.SideEffect">
            <summary>
            Function has side effects, e.g. it changes something.
            </summary>
            <example>HYPERLINK</example>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FunctionFlags.ReturnsArray">
            <summary>
            Function returns array. Functions without this flag return a scalar value.
            CalcEngine treats such functions differently for array formulas.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.AllowRange">
            <summary>Which parameters of a function allow ranges. That is important for implicit intersection.</summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.AllowRange.None">
            <summary>None of parameters allow ranges.</summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.AllowRange.All">
            <summary>All parameters allow ranges.</summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.AllowRange.Except">
            <summary>All parameters except marked ones allow ranges.</summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.AllowRange.Only">
            <summary>Only marked parameters allow ranges.</summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.FunctionRegistry.RegisterFunction(System.String,System.Int32,System.Int32,ClosedXML.Excel.CalcEngine.CalcEngineFunction,ClosedXML.Excel.CalcEngine.FunctionFlags,ClosedXML.Excel.CalcEngine.AllowRange,System.Int32[])">
            <summary>
            Add a function to the registry.
            </summary>
            <param name="functionName">Name of function in formulas.</param>
            <param name="minParams">Minimum number of parameters.</param>
            <param name="maxParams">Maximum number of parameters.</param>
            <param name="fn">A delegate of a function that will be called when function is supposed to be evaluated.</param>
            <param name="flags">Flags that indicate some additional info about function.</param>
            <param name="allowRanges">Which parameters allow ranges to be argument. Useful for array formulas.</param>
            <param name="markedParams">Index of parameter that is marked, start from 0</param>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Functions.ArgumentsExtensions">
            <summary>
            An extension methods
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Functions.ArgumentsExtensions.Aggregate``1(System.Span{ClosedXML.Excel.CalcEngine.AnyValue},ClosedXML.Excel.CalcEngine.CalcContext,``0,ClosedXML.Excel.CalcEngine.OneOf{``0,ClosedXML.Excel.XLError},System.Func{``0,``0,``0},System.Func{ClosedXML.Excel.CalcEngine.ScalarValue,ClosedXML.Excel.CalcEngine.CalcContext,ClosedXML.Excel.CalcEngine.OneOf{``0,ClosedXML.Excel.XLError}},System.Func{ClosedXML.Excel.CalcEngine.ScalarValue,System.Boolean})">
            <summary>
            Aggregate all values in the arguments of a function into a single value. If any value is error, return the error.
            </summary>
            <remarks>
            A lot of functions take all argument values and aggregate the values to a different value.
            These aggregation functions apply aggregation on each argument and if the argument is
            a collection (array/reference), the aggregation function is also applied to each element of
            the array/reference (e.g. <c>SUM({1, 2}, 3)</c> applies sum on each element of an array
            <c>{1,2}</c> and thus result is <c>1+2+3</c>).
            </remarks>
            <typeparam name="TValue">Type of the value that is being aggregated.</typeparam>
            <param name="args">Arguments of a function. Method goes over all elements of the arguments.</param>
            <param name="ctx">Calculation context.</param>>
            <param name="initialValue">
            Initial value of the accumulator. It is used as an input into the first call of <paramref name="aggregate"/>.
            </param>
            <param name="noElementsResult">
            What should be the result of aggregation, if there are no elements. Common choices are
            <see cref="F:ClosedXML.Excel.XLError.IncompatibleValue"/> or the <paramref name="initialValue"/>.
            </param>
            <param name="aggregate">
            The aggregation function. First parameter is the accumulator, second parameter is the value of
            current element taken from <paramref name="convert"/>. Make sure the method is static lambda to
            avoid useless allocations.
            </param>
            <param name="convert">
            A function that converts a scalar value of an element into the <typeparamref name="TValue"/> or
            an error if it can't be converted. Make sure the method is static lambda to avoid useless allocations.
            </param>
            <param name="includeCollectionElement">
            Some functions skip elements in a array/reference that would be accepted as an argument,
            e.g. <c>SUM("1", {2,"4"})</c> is <c>3</c> - it converts string <c>"3"</c> to a number <c>3</c>
            in for root arguments, but omits element <c>"4"</c> in the array. This is a function that
            determines which elements to include and which to skip. If null, all elements of array are included and
            all values are treated same. Make sure the method is static lambda to avoid useless allocations.
            </param>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Functions.DateAndTime.BusinessDaysUntil(System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Calculates number of business days, taking into account:
             - weekends (Saturdays and Sundays)
             - bank holidays in the middle of the week
            </summary>
            <param name="firstDay">First day in the time interval</param>
            <param name="lastDay">Last day in the time interval</param>
            <param name="bankHolidays">List of bank holidays excluding weekends</param>
            <returns>Number of business days during the 'span'</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Functions.Lookup.FindMiddle(ClosedXML.Excel.CalcEngine.Array,System.Int32,System.Int32,ClosedXML.Excel.CalcEngine.ScalarValue@)">
            <summary>
            Find a row with a value of same type as <paramref name="lookupValue"/>
            between values <paramref name="low"/> and <c><paramref name="high"/> - 1</c>.
            We know that both <paramref name="low"/> and <paramref name="high"/>
            contain value of the same type, so we always get a valid row.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Functions.Lookup.FindSameTypeRow(ClosedXML.Excel.CalcEngine.Array,System.Int32,System.Int32,System.Int32,ClosedXML.Excel.CalcEngine.ScalarValue@)">
            <summary>
            Find row index of an element with same type as the lookup value. Go from
            <paramref name="startRow"/> to the <paramref name="limitRow"/> by a step
            of <paramref name="delta"/>. If there isn't any such row, return <c>-1</c>.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Functions.SignatureAdapter">
            <summary>
            A collection of adapter functions from a more a generic formula function to more specific ones.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Text.TextJoin(System.Collections.Generic.List{ClosedXML.Excel.CalcEngine.Expression})">
            <summary>
            A function to Join text https://support.office.com/en-us/article/textjoin-function-357b449a-ec91-49d0-80c3-0e8fc845691c
            </summary>
            <param name="p">Parameters</param>
            <returns> string </returns>
            <exception cref="T:System.ApplicationException">
            Delimiter in first param must be a string
            or
            Second param must be a boolean (TRUE/FALSE)
            </exception>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Reference">
            <summary>
            Reference is a collection of cells in the workbook. It's used in formula evaluation.
            Every reference has at least one cell.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Reference.#ctor(System.Collections.Generic.List{ClosedXML.Excel.XLRangeAddress})">
            <summary>
            Ctor that reuses parameter to keep allocations low - don't modify the collection after it is passed to ctor.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.Reference.Areas">
            <summary>
            List of areas of the range (at least one). All areas are valid and normalized. Some areas have worksheet and some don't.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Reference.GetCellsValues(ClosedXML.Excel.CalcEngine.CalcContext)">
            <summary>
            An iterator over all nonblank cells of the range. Some cells can be iterated
            over multiple times (e.g. a union of two ranges with overlapping cells).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Reference.ImplicitIntersection(ClosedXML.Excel.IXLAddress)">
            <summary>
            Do an implicit intersection of an address.
            </summary>
            <param name="formulaAddress"></param>
            <returns>An address of the intersection or error if intersection failed.</returns>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ScalarValue">
            <summary>
            A representation of a value as a discriminated union.
            </summary>
            <remarks>
            A bare bone copy of <c>OneOf</c> that can be more optimized:
            <list type="bullet">
              <item>readonly struct to get rid of defensive copies</item>
              <item>struct can be smaller through offsets (based on NoBox)</item>
              <item>allows to pass additional arguments to Match function to skip a need to instantiate a new lambda instance on each call and allow easier inlining.</item>
            </list>
            </remarks>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.ScalarValue.Blank">
            <summary>
            A blank value of a scalar. It can behave as a 0 or empty string, depending on context.
            </summary>
            <example><c>A1+5</c> is a number 5, blank behaves as 0, <c>A1 &amp; "text"</c> is a "text", blank behaves as empty string.</example>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.ScalarValue.ToText(System.Globalization.CultureInfo)">
            <summary>
            Convert value to text. Error is not convertible.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.ScalarValue.ToNumber(System.Globalization.CultureInfo)">
            <summary>
            Convert value to number. Error is not convertible.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.ScalarValue.HaveSameType(ClosedXML.Excel.CalcEngine.ScalarValue)">
            <summary>
            Does this value have same type as the other one?
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.ScalarValue.TryCoerceLogicalOrBlankOrNumberOrText(System.Boolean@,ClosedXML.Excel.XLError@)">
            <summary>
            Get the logical value, if it is either blank (false), logical or number (0 = false, otherwise true)a text <c>TRUE</c> or <c>FALSE</c> (case insensitive).
            </summary>
            <remarks>Used for coercion in functions.</remarks>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ScalarValueComparer">
            <summary>
            A comparer of a scalar logic. Each comparer with it's logic can be accessed through a static property.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.ScalarValueComparer.SortIgnoreCase">
            <summary>
            Compare scalar values according to logic of "Sort" data in Excel, though texts are compared case insensitive.
            </summary>
            <remarks>
            Order is
            <list type="number">
              <item>Type Number, from low to high</item>
              <item>Type Text, from low to high (non-culture specific, ordinal compare)</item>
              <item>Type Logical, <c>FALSE</c>, then <c>TRUE</c>.</item>
              <item>Type Error, all error values are treated as equal (at least they don't change order).</item>
              <item>Type Blank, all values are treated as equal.</item>
            </list>
            </remarks>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.TimeSpanParser">
            <summary>
            A parser of timespan format used by excel during coercion from text to number. <see cref="T:System.TimeSpan" /> parsing methods
            don't allow for several features required by excel (e.g. seconds/minutes over 60, hours over 24).
            Parser can parse following formats from ECMA-376, Part 1, §18.8.30. due to standard text-to-number coercion:
            <list type="bullet">
                <item>Format 20 - <c>h:mm</c>.</item>
                <item>Format 21 - <c>h:mm:ss</c>.</item>
                <item>Format 47 - <c>mm:ss.0</c> (format is incorrectly described as <c>mmss.0</c> in the standard,
                      but fixed in an implementation errata).</item>
            </list>
            Timespan is never interpreted through format 45 (<c>mm:ss</c>), instead preferring the format 20 (<c>h:mm</c>).
            Timespan is never interpreted through format 46 (<c>[h]:mm:ss</c>], such values are covered by format 21 (<c>h:mm:ss</c>).
            </summary>
            <remarks>
            Note that the decimal fraction differs format 20 and 47, thus mere addition of decimal
            place means significantly different values. Parser also copies features of Excel, like whitespaces around
            a decimal place (<c>10:20 . 5</c> is allowed).
            <example>
            <c>20:30</c> is detected as format 20 and the first number is interpreted as hours, thus the serial time is 0.854167.
            <c>20:30.0</c> is detected as format 47 and the first number is interpreted as minutes, thus the serial time is 0.014236111.
            </example>
            </remarks>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Wildcard">
            <summary>
            A wildcard is at most 255 chars long text. It can contain <c>*</c> which indicates any number characters (including zero)
            and <c>?</c> which indicates any single character. If you need to find <c>*</c> or <c>?</c> in a text, prefix them with
            an escape character <c>~</c>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Wildcard.Search(System.ReadOnlySpan{System.Char})">
            <summary>
            Search for the wildcard anywhere in the text.
            </summary>
            <param name="text">Text used to search for a pattern.</param>
            <returns>zero-based index of a first character in a text that matches to a pattern or -1, if match wasn't found.</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Wildcard.SearchSegment(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Check if a segment can be found in a text.
            </summary>
            <param name="segmentPattern">Non-empty pattern without <c>*</c> wildcard, though it can contain ? and escaped *.</param>
            <param name="text">Non-empty text.</param>
            <returns>First index of the pattern in the <paramref name="text"/> or -1 if not found.</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalcEngine.TryGetPrecedentCells(System.String,ClosedXML.Excel.XLWorksheet,System.Collections.Generic.ICollection{ClosedXML.Excel.XLCell}@)">
            <summary>
            Get cells that could be used as input of a formula, that could affect the calculated value.
            </summary>
            <remarks>Doesn't work for ranges determined by reference functions and reference operators, e.g. <c>A1:IF(SomeCondition,B1,C1)</c>.</remarks>
            <param name="expression">Formula to analyze.</param>
            <param name="worksheet">Worksheet used for ranges without sheet.</param>
            <param name="uniqueCells">All cells (including newly created blank ones) that are referenced in the formula.</param>
            <returns>True if it was possible for get precedent cells, false otherwise (e.g. reference errors).</returns>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.XLCalcEngine.PrecedentAreasContext.HasReferenceErrors">
            <summary>
            Unable to determine all references, e.g. sheet doesn't exist.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.XLCalcEngine.FormulaRangesVisitor">
            <summary>
            Get all ranges in the formula. Note that just because range
            is in the formula, it doesn't mean it is actually used during evaluation.
            Because named ranges can change, the result might change between visits.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.XLRangeAddressComparer.IgnoreFixed">
            <summary>
            Comparer of ranges that ignores whether row/column is fixes or not.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Blank">
            <summary>
            A blank value. Used as a value of blank cells or as an optional argument for function calls.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Blank.Value">
            <summary>
            Represents the sole instance of the <see cref="T:ClosedXML.Excel.Blank" /> class.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLError">
            <summary>
            A formula error.
            </summary>
            <remarks>
            Keep order of errors in same order as value returned by ERROR.TYPE,
            because it is used for comparison in some case (e.g. AutoFilter).
            Values are off by 1, so <c>default</c> produces a valid error.
            </remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLError.NullValue">
            <summary>
            <c>#NULL!</c> - Intended to indicate when two areas are required to intersect, but do not.
            </summary>
            <remarks>The space is an intersection operator.</remarks>
            <example><c>SUM(B1 C1)</c> tries to intersect <c>B1:B1</c> area and <c>C1:C1</c> area, but since there are no intersecting cells, the result is <c>#NULL</c>.</example>
        </member>
        <member name="F:ClosedXML.Excel.XLError.DivisionByZero">
            <summary>
            <c>#DIV/0!</c> - Intended to indicate when any number (including zero) or any error code is divided by zero.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLError.IncompatibleValue">
            <summary>
            <c>#VALUE!</c> - Intended to indicate when an incompatible type argument is passed to a function, or an incompatible type operand is used with an operator.
            </summary>
            <example>Passing a non-number text to a function that requires a number, trying to get an area from non-contiguous reference. Creating an area from different sheets <c>Sheet1!A1:Sheet2!A2</c></example>
        </member>
        <member name="F:ClosedXML.Excel.XLError.CellReference">
            <summary>
            <c>#REF!</c> - a formula refers to a cell that's not valid.
            </summary>
            <example>When unable to find a sheet or a cell.</example>
        </member>
        <member name="F:ClosedXML.Excel.XLError.NameNotRecognized">
            <summary>
            <c>#NAME?</c> - Intended to indicate when what looks like a name is used, but no such name has been defined.
            </summary>
            <remarks>Only for named ranges, not sheets.</remarks>
            <example><c>TestRange*10</c> when the named range doesn't exist will result in an error.</example>
        </member>
        <member name="F:ClosedXML.Excel.XLError.NumberInvalid">
            <summary>
            <c>#NUM!</c> - Intended to indicate when an argument to a function has a compatible type, but has a value that is outside the domain over which that function is defined.
            </summary>
            <remarks>This is known as a domain error.</remarks>
            <example>ASIN(10) - the ASIN accepts only argument -1..1 (an output of SIN), so the resulting value is <c>#NUM!</c>.</example>
        </member>
        <member name="F:ClosedXML.Excel.XLError.NoValueAvailable">
            <summary>
            <c>#N/A</c> - Intended to indicate when a designated value is not available.
            </summary>
            <example>The value is used for extra cells of an array formula that is applied on an array of a smaller size that the array formula.</example>
        </member>
        <member name="T:ClosedXML.Excel.ISlice">
            <summary>
            An interface for methods of <see cref="T:ClosedXML.Excel.Slice`1"/> without specified type of an element.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.ISlice.IsEmpty">
            <summary>
            Is at least one cell in the slice used?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.ISlice.MaxColumn">
            <summary>
            Get maximum used column in the slice or 0, if no column is used.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.ISlice.MaxRow">
            <summary>
            Get maximum used row in the slice or 0, if no row is used.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.ISlice.UsedColumns">
            <summary>
            A set of columns that have at least one used cell. Order of columns is non-deterministic.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.ISlice.UsedRows">
            <summary>
            A set of rows that have at least one used cell. Order of rows is non-deterministic.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.ISlice.Clear(ClosedXML.Excel.XLSheetRange)">
            <summary>
            Clear all values in the range and mark them as unused.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.ISlice.DeleteAreaAndShiftLeft(ClosedXML.Excel.XLSheetRange)">
            <summary>
            Clear all values in the <paramref name="rangeToDelete"/> and shift all values right of the deleted area to the deleted place.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.ISlice.DeleteAreaAndShiftUp(ClosedXML.Excel.XLSheetRange)">
            <summary>
            Clear all values in the <paramref name="rangeToDelete"/> and shift all values below the deleted area to the deleted place.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.ISlice.InsertAreaAndShiftDown(ClosedXML.Excel.XLSheetRange)">
            <summary>
            Shift all values at the <paramref name="range"/> and all cells below it
            down by <see cref="P:ClosedXML.Excel.XLSheetRange.Height"/> of the <paramref name="range"/>.
            The insert area is cleared.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.ISlice.InsertAreaAndShiftRight(ClosedXML.Excel.XLSheetRange)">
            <summary>
            Shift all values at the <paramref name="range"/> and all cells right of it
            to the right by <see cref="P:ClosedXML.Excel.XLSheetRange.Width"/> of the <paramref name="range"/>.
            The insert area is cleared.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLDataType">
            <summary>
            A value that is in the cell.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLDataType.Blank">
            <summary>
            The value is a blank (either blank cells or the omitted optional argument of a function, e.g. <c>IF(TRUE,,)</c>.
            </summary>
            <remarks>Keep as the first, so the default values are blank.</remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLDataType.Boolean">
            <summary>
            The value is a logical value.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLDataType.Number">
            <summary>
            The value is a double-precision floating points number, excluding <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> or <see cref="F:System.Double.NegativeInfinity"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLDataType.Text">
            <summary>
            A text or a rich text. Can't be <c>null</c> and can be at most 32767 characters long.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLDataType.Error">
            <summary>
            The value is one of <see cref="T:ClosedXML.Excel.XLError"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLDataType.DateTime">
            <summary>
            The value is a <see cref="F:ClosedXML.Excel.XLDataType.DateTime"/>, represented as a serial date time number.
            </summary>
            <remarks>
            Serial date time 60 is a 1900-02-29, nonexistent day kept for compatibility,
            but unrepresentable by <c>DateTime</c>. Don't use.
            </remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLDataType.TimeSpan">
            <summary>
            The value is a <see cref="F:ClosedXML.Excel.XLDataType.TimeSpan"/>, represented in a serial date time (24 hours is 1, 36 hours is 1.5 ect.).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.Address">
            <summary>Gets this cell's address, relative to the worksheet.</summary>
            <value>The cell's address.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.CachedValue">
            <summary>
            Get the value of a cell without evaluation of a formula. If the cell contains
            a formula, it returns the last calculated value or a blank value. If the cell
            doesn't contain a formula, it returns same value as <see cref="P:ClosedXML.Excel.IXLCell.Value"/>.
            May hold invalid value when <see cref="P:ClosedXML.Excel.IXLCell.NeedsRecalculation"/> flag is True.
            </summary>
            <remarks>Can be useful to decrease a number of formula evaluations.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.CurrentRegion">
            <summary>
            Returns the current region. The current region is a range bounded by any combination of blank rows and blank columns
            </summary>
            <value>
            The current region.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.DataType">
            <summary>
            Gets the type of this cell's data.
            </summary>
            <value>
            The type of the cell's data.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.FormulaA1">
            <summary>
            Gets or sets the cell's formula with A1 references.
            </summary>
            <value>The formula with A1 references.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.FormulaR1C1">
            <summary>
            Gets or sets the cell's formula with R1C1 references.
            </summary>
            <value>The formula with R1C1 references.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.FormulaReference">
            <summary>
            An indication that value of this cell is calculated by a array formula
            that calculates values for cells in the referenced address. Null if not part of such formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.NeedsRecalculation">
            <summary>
            Flag indicating that previously calculated cell value may be not valid anymore and has to be re-evaluated.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.ShareString">
            <summary>
            Gets or sets a value indicating whether this cell's text should be shared or not.
            </summary>
            <value>
              If false the cell's text will not be shared and stored as an inline value.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.Style">
            <summary>
            Gets or sets the cell's style.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.Value">
            <summary>
            Gets or sets the cell's value.
            <para>
            Getter will return value of a cell or value of formula. Getter will evaluate a formula, if the cell
            <see cref="P:ClosedXML.Excel.IXLCell.NeedsRecalculation"/>, before returning up-to-date value.
            </para>
            <para>
            Setter will clear a formula, if the cell contains a formula.
            If the value is a text that starts with a single quote, setter will prefix the value with a single quote through
            <see cref="P:ClosedXML.Excel.IXLStyle.IncludeQuotePrefix"/> in Excel too and the value of cell is set to to non-quoted text.
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.ShowPhonetic">
            <summary>
            Should the cell show phonetic (i.e. furigana) above the rich text of the cell?
            It shows phonetic runs in the rich text, it is not autogenerated. Default
            is <c>false</c>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.AddToNamed(System.String)">
            <summary>
            Creates a named range out of this cell.
            <para>If the named range exists, it will add this range to that named range.</para>
            <para>The default scope for the named range is Workbook.</para>
            </summary>
            <param name="rangeName">Name of the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.AddToNamed(System.String,ClosedXML.Excel.XLScope)">
            <summary>
            Creates a named range out of this cell.
            <para>If the named range exists, it will add this range to that named range.</para>
            <param name="rangeName">Name of the range.</param>
            <param name="scope">The scope for the named range.</param>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.AddToNamed(System.String,ClosedXML.Excel.XLScope,System.String)">
            <summary>
            Creates a named range out of this cell.
            <para>If the named range exists, it will add this range to that named range.</para>
            <param name="rangeName">Name of the range.</param>
            <param name="scope">The scope for the named range.</param>
            <param name="comment">The comments for the named range.</param>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.AsRange">
            <summary>
            Returns this cell as an IXLRange.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this cell.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.CopyFrom(ClosedXML.Excel.IXLRangeBase)">
            <summary>
            Copy range content to an area of same size starting at the cell.
            Original content of cells is overwritten.
            </summary>
            <param name="rangeBase">Range whose content to copy.</param>
            <returns>This cell.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.CreateComment">
            <summary>
            Creates a new comment for the cell, replacing the existing one.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.CreateDataValidation">
            <summary>
            Creates a new data validation rule for the cell, replacing the existing one.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.CreateHyperlink">
            <summary>
            Creates a new hyperlink replacing the existing one.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.CreateRichText">
            <summary>
            Replaces a value of the cell with a newly created rich text object.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.Delete(ClosedXML.Excel.XLShiftDeletedCells)">
            <summary>
            Deletes the current cell and shifts the surrounding cells according to the shiftDeleteCells parameter.
            </summary>
            <param name="shiftDeleteCells">How to shift the surrounding cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetComment">
            <summary>
            Returns the comment for the cell or create a new instance if there is no comment on the cell.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetDataValidation">
            <summary>
            Returns a data validation rule assigned to the cell, if any, or creates a new instance of data validation rule if no rule exists.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetBoolean">
            <summary>
            Gets the cell's value as a Boolean.
            </summary>
            <remarks>Shortcut for <c>Value.GetBoolean()</c></remarks>
            <exception cref="T:System.InvalidCastException">If the value of the cell is not a logical.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetDouble">
            <summary>
            Gets the cell's value as a Double.
            </summary>
            <remarks>Shortcut for <c>Value.GetNumber()</c></remarks>
            <exception cref="T:System.InvalidCastException">If the value of the cell is not a number.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetText">
            <summary>
            Gets the cell's value as a String.
            </summary>
            <remarks>Shortcut for <c>Value.GetText()</c>. Returned value is never null.</remarks>
            <exception cref="T:System.InvalidCastException">If the value of the cell is not a text.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetError">
            <summary>
            Gets the cell's value as a XLError.
            </summary>
            <remarks>Shortcut for <c>Value.GetError()</c></remarks>
            <exception cref="T:System.InvalidCastException">If the value of the cell is not an error.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetDateTime">
            <summary>
            Gets the cell's value as a DateTime.
            </summary>
            <remarks>Shortcut for <c>Value.GetDateTime()</c></remarks>
            <exception cref="T:System.InvalidCastException">If the value of the cell is not a DateTime.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetTimeSpan">
            <summary>
            Gets the cell's value as a TimeSpan.
            </summary>
            <remarks>Shortcut for <c>Value.GetTimeSpan()</c></remarks>
            <exception cref="T:System.InvalidCastException">If the value of the cell is not a TimeSpan.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.TryGetValue``1(``0@)">
            <summary>
            Try to get cell's value converted to the T type.
            <para>
            Supported <typeparamref name="T"/> types:
            <list type="bullet">
              <item>Boolean - uses a logic of <see cref="M:ClosedXML.Excel.XLCellValue.TryConvert(System.Boolean@)"/></item>
              <item>Number (<c>s/byte</c>, <c>u/short</c>, <c>u/int</c>, <c>u/long</c>, <c>float</c>, <c>double</c>, or <c>decimal</c>)
                    - uses a logic of <see cref="M:ClosedXML.Excel.XLCellValue.TryConvert(System.Double@,System.Globalization.CultureInfo)"/> and succeeds,
                    if the value fits into the target type.</item>
              <item>String - sets the result to a text representation of a cell value (using current culture).</item>
              <item>DateTime - uses a logic of <see cref="M:ClosedXML.Excel.XLCellValue.TryConvert(System.DateTime@)"/></item>
              <item>TimeSpan - uses a logic of <see cref="M:ClosedXML.Excel.XLCellValue.TryConvert(System.TimeSpan@,System.Globalization.CultureInfo)"/></item>
              <item>XLError - if the value is of type <see cref="F:ClosedXML.Excel.XLDataType.Error"/>, it will return the value.</item>
              <item>Enum - tries to parse a value to a member by comparing the text of a cell value and a member name.</item>
            </list>
            </para>
            <para>
            If the <typeparamref name="T"/> is a nullable value type and the value of cell is blank or empty string, return null value.
            </para>
            <para>
            If the cell value can't be determined because formula function is not implemented, the method always returns <c>false</c>.
            </para>
            </summary>
            <typeparam name="T">The requested type into which will the value be converted.</typeparam>
            <param name="value">Value to store the value.</param>
            <returns><c>true</c> if the value was converted and the result is in the <paramref name="value"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetValue``1">
            <summary>
            <inheritdoc cref="M:ClosedXML.Excel.IXLCell.TryGetValue``1(``0@)"/>
            </summary>
            <remarks>Conversion logic is identical with <see cref="M:ClosedXML.Excel.IXLCell.TryGetValue``1(``0@)"/>.</remarks>
            <typeparam name="T">The requested type into which will the value be converted.</typeparam>
            <exception cref="T:System.InvalidCastException">If the value can't be converted to the type of T</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetString">
            <summary>
            Return cell's value represented as a string. Doesn't use cell's formatting or style.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetFormattedString">
            <summary>
            Gets the cell's value formatted depending on the cell's data type and style.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetHyperlink">
            <summary>
            Returns a hyperlink for the cell, if any, or creates a new instance is there is no hyperlink.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetRichText">
            <summary>
            Returns the value of the cell if it formatted as a rich text.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertData(System.Collections.IEnumerable)">
            <summary>
            Inserts the IEnumerable data elements and returns the range it occupies.
            </summary>
            <param name="data">The IEnumerable data.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertData(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Inserts the IEnumerable data elements and returns the range it occupies.
            </summary>
            <param name="data">The IEnumerable data.</param>
            <param name="transpose">if set to <c>true</c> the data will be transposed before inserting.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertData(System.Data.DataTable)">
            <summary>
            Inserts the data of a data table.
            </summary>
            <param name="dataTable">The data table.</param>
            <returns>The range occupied by the inserted data</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inserts the IEnumerable data elements as a table and returns it.
            <para>The new table will receive a generic name: Table#</para>
            </summary>
            <param name="data">The table data.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Inserts the IEnumerable data elements as a table and returns it.
            <para>The new table will receive a generic name: Table#</para>
            </summary>
            <param name="data">The table data.</param>
            <param name="createTable">
            if set to <c>true</c> it will create an Excel table.
            <para>if set to <c>false</c> the table will be created in memory.</para>
            </param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Creates an Excel table from the given IEnumerable data elements.
            </summary>
            <param name="data">The table data.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
            <summary>
            Inserts the IEnumerable data elements as a table and returns it.
            </summary>
            <param name="data">The table data.</param>
            <param name="tableName">Name of the table.</param>
            <param name="createTable">
            if set to <c>true</c> it will create an Excel table.
            <para>if set to <c>false</c> the table will be created in memory.</para>
            </param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable(System.Data.DataTable)">
            <summary>
            Inserts the DataTable data elements as a table and returns it.
            <para>The new table will receive a generic name: Table#</para>
            </summary>
            <param name="data">The table data.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable(System.Data.DataTable,System.Boolean)">
            <summary>
            Inserts the DataTable data elements as a table and returns it.
            <para>The new table will receive a generic name: Table#</para>
            </summary>
            <param name="data">The table data.</param>
            <param name="createTable">
            if set to <c>true</c> it will create an Excel table.
            <para>if set to <c>false</c> the table will be created in memory.</para>
            </param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable(System.Data.DataTable,System.String)">
            <summary>
            Creates an Excel table from the given DataTable data elements.
            </summary>
            <param name="data">The table data.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Inserts the DataTable data elements as a table and returns it.
            </summary>
            <param name="data">The table data.</param>
            <param name="tableName">Name of the table.</param>
            <param name="createTable">
            if set to <c>true</c> it will create an Excel table.
            <para>if set to <c>false</c> the table will be created in memory.</para>
            </param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InvalidateFormula">
            <summary>
            Invalidate <see cref="P:ClosedXML.Excel.IXLCell.CachedValue"/> so the formula will be re-evaluated next time <see cref="P:ClosedXML.Excel.IXLCell.Value"/> is accessed.
            If cell does not contain formula nothing happens.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.SetValue(ClosedXML.Excel.XLCellValue)">
            <inheritdoc cref="P:ClosedXML.Excel.IXLCell.Value"/>
            <returns>This cell.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.ToString(System.String)">
            <summary>
            Returns a string that represents the current state of the cell according to the format.
            </summary>
            <param name="format">A: address, F: formula, NF: number format, BG: background color, FG: foreground color, V: formatted value</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLCells.Value">
            <summary>
            Sets the cells' value.
            <para>
            Setter will clear a formula, if the cell contains a formula.
            If the value is a text that starts with a single quote, setter will prefix the value with a single quote through
            <see cref="P:ClosedXML.Excel.IXLStyle.IncludeQuotePrefix"/> in Excel too and the value of cell is set to to non-quoted text.
            </para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCells.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these cells.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCells.DeleteComments">
            <summary>
            Delete the comments of these cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCells.DeleteSparklines">
            <summary>
            Delete the sparklines of these cells.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLCells.FormulaA1">
            <summary>
            Sets the cells' formula with A1 references.
            </summary>
            <value>The formula with A1 references.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLCells.FormulaR1C1">
            <summary>
            Sets the cells' formula with R1C1 references.
            </summary>
            <value>The formula with R1C1 references.</value>
        </member>
        <member name="T:ClosedXML.Excel.Slice`1">
            <summary>
            Slice is a sparse array that stores a part of cell information (e.g. only values,
            only styles ...). Slice has same size as a worksheet. If some cells are pushed out
            of the permitted range, they are gone.
            </summary>
            <remarks>
            This is a ref return, so if the underlaying value
            changes, the returned value also changes. To avoid,
            just don't use <c>ref</c> and structs will be copied.
            </remarks>
            <typeparam name="TElement">The type of data stored in the slice.</typeparam>
        </member>
        <member name="F:ClosedXML.Excel.Slice`1._data">
            <summary>
            The content of the slice. Note that LUT uses index that starts from 0,
            so rows and columns must be adjusted to retrieved the value.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Slice`1._columnUsage">
            <summary>
            Key is column number, value is number of cells in the column that are used.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.Item(ClosedXML.Excel.XLSheetPoint)">
            <summary>
            Get the slice value at the specified point of the sheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.Item(System.Int32,System.Int32)">
            <summary>
            Get the slice value at the specified point of the sheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.MaxColumn">
            <inheritdoc />
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.MaxRow">
            <inheritdoc />
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.UsedRows">
            <inheritdoc />
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.UsedColumns">
            <inheritdoc />
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.Clear(ClosedXML.Excel.XLSheetRange)">
            <inheritdoc />
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.DeleteAreaAndShiftLeft(ClosedXML.Excel.XLSheetRange)">
            <inheritdoc />
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.DeleteAreaAndShiftUp(ClosedXML.Excel.XLSheetRange)">
            <inheritdoc />
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.GetEnumerator(ClosedXML.Excel.XLSheetRange,System.Boolean)">
            <summary>
            Get enumerator over used values of the range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.InsertAreaAndShiftDown(ClosedXML.Excel.XLSheetRange)">
            <inheritdoc />
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.InsertAreaAndShiftRight(ClosedXML.Excel.XLSheetRange)">
            <inheritdoc />
        </member>
        <member name="T:ClosedXML.Excel.Slice`1.Enumerator">
            <summary>
            Enumerator that returns used values from a specified range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.Enumerator.MoveNext">
            <summary>
            The movement is columns first, then rows.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Slice`1.Lut`1">
            <summary>
            <para>
            Memory efficient look up table. The table is 2-level structure,
            where elements of the the top level are potentially nullable
            references to buckets of up-to 32 items in bottom level.
            </para>
            <para>
            Both level can increase size through doubling, through
            only the top one can be indefinite size.
            </para>
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Slice`1.Lut`1.DefaultValue">
            <summary>
            The default value lut ref returns for elements not defined in the lut.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Slice`1.Lut`1._buckets">
            <summary>
            A sparse array of values in the lut. The top level always allocated at least one element.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.Lut`1.MaxUsedIndex">
            <summary>
            Get maximal node that is used. Return -1 if LUT is unused.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.Lut`1.IsEmpty">
            <summary>
            Does LUT contains at least one used element?
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.Lut`1.Get(System.Int32)">
            <summary>
            Get a value at specified index.
            </summary>
            <param name="index">Index, starting at 0.</param>
            <returns>Reference to an element at index, if the element is used, otherwise <see cref="F:ClosedXML.Excel.Slice`1.Lut`1.DefaultValue"/>.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.Lut`1.IsUsed(System.Int32)">
            <summary>
            Does the index set a mask of used index (=was value set and not cleared)?
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.Lut`1.Set(System.Int32,`1)">
            <summary>
            Set/clar an element at index to a specified value.
            The used flag will be if the value is <c>default</c> or not.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Slice`1.Lut`1.LutBucket">
            <summary>
            A bucket of bottom layer of LUT. Each bucket has up-to 32 elements.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Slice`1.Lut`1.LutBucket.Bitmap">
            <summary>
            <para>
            A bitmap array that indicates which nodes have a set/no-default values values
            (1 = value has been set and there is an element in the <see cref="F:ClosedXML.Excel.Slice`1.Lut`1._buckets"/>,
            0 = value hasn't been set and <see cref="F:ClosedXML.Excel.Slice`1.Lut`1._buckets"/> might exist or not).
            If the element at some index is not is not set and lut is asked for a value,
            it should return <see cref="F:ClosedXML.Excel.Slice`1.Lut`1.DefaultValue"/>.
            </para>
            <para>
            The length of the bitmap array is same as the <see cref="F:ClosedXML.Excel.Slice`1.Lut`1._buckets"/>, for each
            bottom level bucket, the element of index 0 in the bucket is represented by
            lowest bit, element 31 is represented by highest bit.
            </para>
            <para>
            This is useful to make a distinction between a node that is empty
            and a node that had it's value se to <see cref="F:ClosedXML.Excel.Slice`1.Lut`1.DefaultValue"/>.
            </para>
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Slice`1.Lut`1.LutEnumerator">
            <summary>
            Enumerator of LUT used values from low index to high.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.Lut`1.LutEnumerator.#ctor(ClosedXML.Excel.Slice{`0}.Lut{`1},System.Int32,System.Int32)">
            <summary>
            Create a new enumerator from subset of elements.
            </summary>
            <param name="lut">Lookup table to traverse.</param>
            <param name="startIdx">First desired index, included.</param>
            <param name="endIdx">Last desired index, included.</param>
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.Lut`1.LutEnumerator.Index">
            <summary>
            Index of current element in the LUT. Only valid, if enumerator is valid.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Slice`1.Lut`1.ReverseLutEnumerator">
            <summary>
            Enumerator of LUT used values from high index to low index.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCell.ShareString">
            <summary>
            A flag indicating if a string should be stored in the shared table or inline.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCell.StyleValue">
            <summary>
            Overriden <see cref="P:ClosedXML.Excel.XLStylizedBase.StyleValue"/>, because we can't store the value
            in the cell.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCell.Formula">
            <summary>
            A formula in the cell. Null, if cell doesn't contain formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCell.ModifiedAtVersion">
            <summary>
            The value of <see cref="P:ClosedXML.Excel.XLWorkbook.RecalculationCounter"/> that
            workbook had at the moment of last value or formula change.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCell.IsEvaluating">
            <summary>
            Flag showing that the cell is in formula evaluation state.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCell.Evaluate(System.Boolean)">
            <summary>
            Perform an evaluation of cell formula. If cell does not contain formula nothing happens, if cell does not need
            recalculation (<see cref="P:ClosedXML.Excel.XLCell.NeedsRecalculation"/> is False) nothing happens either, unless <paramref name="force"/> flag is specified.
            Otherwise recalculation is performed, result value is preserved in <see cref="P:ClosedXML.Excel.XLCell.CachedValue"/> and returned.
            </summary>
            <param name="force">Flag indicating whether a recalculation must be performed even is cell does not need it.</param>
            <returns>Null if cell does not contain a formula. Calculated value otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLCell.SetOnlyValue(ClosedXML.Excel.XLCellValue)">
            <summary>
            Set only value, don't clear formula, don't set format.
            Sets the value even for merged cells.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCell.NeedsRecalculation">
            <summary>
            Flag indicating that previously calculated cell value may be not valid anymore and has to be re-evaluated.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCell.Sparkline">
            <summary> The sparkline assigned to the cell </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCell.FindDataValidation">
            <summary>
            Get the data validation rule containing current cell.
            </summary>
            <returns>The data validation rule applying to the current cell or null if there is no such rule.</returns>
        </member>
        <member name="P:ClosedXML.Excel.XLCell.ShowPhonetic">
            <inheritdoc />
        </member>
        <member name="M:ClosedXML.Excel.XLCell.PingStyle">
            <summary>
            Ensure the cell has style set directly on the cell, not inherited from column/row/worksheet styles.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCell.GetGlyphBoxes(ClosedXML.Graphics.IXLGraphicEngine,ClosedXML.Graphics.Dpi,System.Collections.Generic.List{ClosedXML.Graphics.GlyphBox})">
            <summary>
            Get glyph bounding boxes for each grapheme in the text. Box size is determined according to
            the font of a grapheme. New lines are represented as default (all dimensions zero) box.
            A line without any text (i.e. contains only new line) should be represented by a box
            with zero advance width, but with a line height of corresponding font.
            </summary>
            <param name="engine">Engine used to determine box size.</param>
            <param name="dpi">DPI used to determine size of glyphs.</param>
            <param name="output">List where items are added.</param>
        </member>
        <member name="T:ClosedXML.Excel.XLCellFormula">
            <summary>
            A representation of a cell formula, not the formula itself (i.e. the tree).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellFormula.DataTableFormulaFormat">
            <summary>
            This is only a placeholder, so the data table formula looks like array formula for saving code.
            First argument is replaced by value from current row, second is replaced by value from current column.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellFormula._lastStatus">
            <summary>
            The recalculation status of the last time formula was checked whether it needs to be recalculated.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellFormula._evaluatedAtVersion">
            <summary>
            The value of <see cref="P:ClosedXML.Excel.XLWorkbook.RecalculationCounter"/> that workbook had at the moment of cell formula evaluation.
            If this value equals to <see cref="P:ClosedXML.Excel.XLWorkbook.RecalculationCounter"/> it indicates that <see cref="P:ClosedXML.Excel.XLCell.CachedValue"/> stores
            correct value and no re-evaluation has to be performed.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.A1">
            <summary>
            Formula in A1 notation. Either this or <see cref="P:ClosedXML.Excel.XLCellFormula.R1C1"/> must be set (potentially
            both, due to conversion from one notation to another).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.R1C1">
            <summary>
            Formula in R1C1 notation. Either this or <see cref="P:ClosedXML.Excel.XLCellFormula.A1"/> must be set (potentially
            both, due to conversion from one notation to another).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.Range">
            <summary>
            Range for array and data table formulas, otherwise default value.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.IsRowDataTable">
            <summary>
            True, if 1D data table formula is the row (the displayed formula in Excel is missing the second argument <c>{=TABLE(A1;)}</c>).
            False the 1D data table is a column. (the displayed formula in Excel is missing the first argument <c>{=TABLE(;A1)}</c>)
            This property is meaningless, if called for non-data-table formula.
            </summary>
            <remarks>
            <para>
            If data table is in row (i.e. the value returns <c>true</c>) that means it calculates values in a row,
            it takes formula from a cell from a column one less than its range and replaces the input cell with value
            at the intersection of current cell column and the top row of the range. When data table is a column, it works
            pretty much same, except axis are reversed.
            </para>
            <para>
            Just because data table is 1D doesn't mean its range has to be. It can be rectangular even for 1D
            data table. It just means that data table is applied separately to each row/column (depending on whether
            the data table is row or column).
            </para>
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.Is2DDataTable">
            <summary>
            True, if data table is 2D and uses both inputs. Input1 is replaced by
            value from current row, input2 is replaced by a value from current column.
            This property is meaningless, if called for non-data-table formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.Input1">
            <summary>
            Returns a cell that data table formula uses as a variable to replace with values
            for the actual table. Used for 1D data table formula as a single input (row or column)
            and as row for 2D data table. Must be present, even if input marked as deleted.
            This property is meaningless, if called for non-data-table formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.Input2">
            <summary>
            Returns a cell that 2D data table formula uses as a variable to replace with values
            for the actual table. The value is taken from the top of range of the current column.
            Must be present for 2D, even if input marked as deleted.
            This property is meaningless, if called for non-data-table formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.Input1Deleted">
            <summary>
            Returns true, if data table formula has its input1 deleted.
            This property is meaningless, if called for non-data-table formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.Input2Deleted">
            <summary>
            Returns true, if data table formula has its input1 deleted.
            This property is meaningless, if called for non-data-table formula.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.NeedsRecalculation(ClosedXML.Excel.XLCell)">
            <summary>
            Flag indicating that previously calculated cell value may be not valid anymore and has to be re-evaluated.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.GetFormulaA1(ClosedXML.Excel.XLSheetPoint)">
            <summary>
            Get stored formula in A1 notation. Returned formula doesn't contain equal sign.
            </summary>
            <param name="cellAddress">Address of the formula cell. Used to convert relative R1C1 to A1, if conversion is necessary.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.GetFormulaR1C1(ClosedXML.Excel.XLSheetPoint)">
            <summary>
            Get stored formula in R1C1 notation. Returned formula doesn't contain equal sign.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.CalculateNormalFormula(System.String,ClosedXML.Excel.XLCell)">
            <summary>
            Calculate a value of the specified formula.
            </summary>
            <param name="fA1">Cell formula to evaluate in A1 format.</param>
            <param name="cell">Cell whose formula is being evaluated.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.CalculateArrayFormula(ClosedXML.Excel.XLCell)">
            <summary>
            Calculate array formula and return an array of the array formula range size.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.NormalA1(System.String)">
            <summary>
            A factory method to create a normal A1 formula. Doesn't affect recalculation version.
            </summary>
            <param name="formulaA1">Doesn't start with <c>=</c>.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.NormalR1C1(System.String)">
            <summary>
            A factory method to create a normal R1C1 formula. Doesn't affect recalculation version.
            </summary>
            <param name="formulaR1C1">Doesn't start with <c>=</c>.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.Array(System.String,ClosedXML.Excel.XLSheetRange,System.Boolean)">
            <summary>
            A factory method to create an array formula. Doesn't affect recalculation version.
            </summary>
            <param name="arrayFormulaA1">Isn't wrapped in <c>{}</c> and doesn't start with <c>=</c>.</param>
            <param name="range">A range of cells that are calculated through the array formula.</param>
            <param name="aca">A flag for always calculate array.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.DataTable1D(ClosedXML.Excel.XLSheetRange,ClosedXML.Excel.XLSheetPoint,System.Boolean,System.Boolean)">
            <summary>
            A factory method to create a cell formula for 1D data table formula. Doesn't affect recalculation version.
            </summary>
            <param name="range">Range of the data table formula. Even 1D table can have rectangular range.</param>
            <param name="input1Address">Address of the input cell that will be replaced in the data table. If input deleted, ignored and value can be anything.</param>
            <param name="input1Deleted">Was the original address deleted?</param>
            <param name="isRowDataTable">Is data table in row (<c>true</c>) or columns (<c>false</c>)?</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.DataTable2D(ClosedXML.Excel.XLSheetRange,ClosedXML.Excel.XLSheetPoint,System.Boolean,ClosedXML.Excel.XLSheetPoint,System.Boolean)">
            <summary>
            A factory method to create a 2D data table formula. Doesn't affect recalculation version.
            </summary>
            <param name="range">Range of the formula.</param>
            <param name="input1Address">Address of the input cell that will be replaced in the data table. If input deleted, ignored and value can be anything.</param>
            <param name="input1Deleted">Was the original address deleted?</param>
            <param name="input2Address">Address of the input cell that will be replaced in the data table. If input deleted, ignored and value can be anything.</param>
            <param name="input2Deleted">Was the original address deleted?</param>
        </member>
        <member name="T:ClosedXML.Excel.XLCellFormula.FormulaFlags">
            <summary>
            An enum to efficiently store various flags for formulas (bool takes up 1-4 bytes due to alignment).
            Note that each type of formula uses different flags.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellFormula.FormulaFlags.AlwaysCalculateArray">
            <summary>
            For Array formula. Not fully clear from documentation, but seems to be some kind of dirty flag.
            Current excel just writes <c>ca="1"</c> to each cell of array formula for cases described in the DOC.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellFormula.FormulaFlags.Is2D">
            <summary>
            For data table formula. Flag whether the data table is 2D and has two inputs.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellFormula.FormulaFlags.Is1DRow">
            <summary>
            For data table formula. If the set, the data table is in row, not column. It uses input1 in both case, but the position
            is interpreted differently.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellFormula.FormulaFlags.Input1Deleted">
            <summary>
            For data table formula. When the input 1 cell has been deleted (not content, but the row or a column where cell was),
            this flag is set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellFormula.FormulaFlags.Input2Deleted">
            <summary>
            For data table formula. When the input 2 cell has been deleted (not content, but the row or a column where cell was),
            this flag is set.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.RecalculationStatus.Version">
            <summary>
            The value of <see cref="P:ClosedXML.Excel.XLWorkbook.RecalculationCounter"/> that workbook had at the moment of determining whether the cell
            needs re-evaluation (due to it has been edited or some of the affecting cells has). If this value equals to <see cref="P:ClosedXML.Excel.XLWorkbook.RecalculationCounter"/>
            it indicates that <see cref="P:ClosedXML.Excel.XLCellFormula.RecalculationStatus.NeededRecalculation"/> stores correct value and no check has to be performed.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellsCollection.GetCells">
            <summary>
            Get all used cells in the worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellsCollection.GetCells(System.Func{ClosedXML.Excel.XLCell,System.Boolean})">
            <summary>
            Get all used cells in the worksheet that satisfy the predicate.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellsCollection.GetCells(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{ClosedXML.Excel.XLCell,System.Boolean})">
            <summary>
            Get all used cells in the range that satisfy the predicate.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellsCollection.GetCells(ClosedXML.Excel.XLSheetRange,System.Func{ClosedXML.Excel.XLCell,System.Boolean})">
            <summary>
            Get all used cells in the range that satisfy the predicate.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellsCollection.GetUsedCell(ClosedXML.Excel.XLSheetPoint)">
            <summary>
            Get cell or null, if cell is not used.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLColumn.Width">
            <summary>
            Gets or sets the width of this column in number of characters (NoC).
            </summary>
            <remarks>
            NoC are a non-linear units displayed as a column width in Excel, next to pixels. NoC combined with default font
            of the workbook can express width of the column in pixels and other units.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Delete">
            <summary>
            Deletes this column and shifts the columns at the right of this one accordingly.
            </summary>
            <remarks>Don't use in a loop due to poor performance. Use <see cref="M:ClosedXML.Excel.IXLRange.Delete(ClosedXML.Excel.XLShiftDeletedCells)"/> instead.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.ColumnNumber">
            <summary>
            Gets this column's number
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.ColumnLetter">
            <summary>
            Gets this column's letter
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.InsertColumnsAfter(System.Int32)">
            <summary>
            Inserts X number of columns at the right of this one.
            <para>All columns at the right will be shifted accordingly.</para>
            </summary>
            <param name="numberOfColumns">The number of columns to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.InsertColumnsBefore(System.Int32)">
            <summary>
            Inserts X number of columns at the left of this one.
            <para>This column and all at the right will be shifted accordingly.</para>
            </summary>
            <param name="numberOfColumns">The number of columns to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Cell(System.Int32)">
            <summary>
            Gets the cell in the specified row.
            </summary>
            <param name="rowNumber">The cell's row.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Cells(System.String)">
            <summary>
            Returns the specified group of cells, separated by commas.
            <para>e.g. Cells("1"), Cells("1:5"), Cells("1,3:5")</para>
            </summary>
            <param name="cellsInColumn">The column cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Cells(System.Int32,System.Int32)">
            <summary>
            Returns the specified group of cells.
            </summary>
            <param name="firstRow">The first row in the group of cells to return.</param>
            <param name="lastRow">The last row in the group of cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.AdjustToContents">
            <summary>
            Adjusts the width of the column based on its contents.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.AdjustToContents(System.Int32)">
            <summary>
            Adjusts the width of the column based on its contents, starting from the startRow.
            </summary>
            <param name="startRow">The row to start calculating the column width.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.AdjustToContents(System.Int32,System.Int32)">
            <summary>
            Adjusts the width of the column based on its contents, starting from the startRow and ending at endRow.
            </summary>
            <param name="startRow">The row to start calculating the column width.</param>
            <param name="endRow">The row to end calculating the column width.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.AdjustToContents(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Adjust width of the column according to the content of the cells.
            </summary>
            <param name="startRow">Number of a first row whose content is considered.</param>
            <param name="endRow">Number of a last row whose content is considered.</param>
            <param name="minWidth">Minimum width of adjusted column, in NoC.</param>
            <param name="maxWidth">Maximum width of adjusted column, in NoC.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Hide">
            <summary>
            Hides this column.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Unhide">
            <summary>Unhides this column.</summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLColumn.IsHidden">
            <summary>
            Gets a value indicating whether this column is hidden or not.
            </summary>
            <value>
              <c>true</c> if this column is hidden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLColumn.OutlineLevel">
            <summary>
            Gets or sets the outline level of this column.
            </summary>
            <value>
            The outline level of this column.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Group">
            <summary>
            Adds this column to the next outline level (Increments the outline level for this column by 1).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Group(System.Boolean)">
            <summary>
            Adds this column to the next outline level (Increments the outline level for this column by 1).
            </summary>
            <param name="collapse">If set to <c>true</c> the column will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Group(System.Int32)">
            <summary>
            Sets outline level for this column.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Group(System.Int32,System.Boolean)">
            <summary>
            Sets outline level for this column.
            </summary>
            <param name="outlineLevel">The outline level.</param>
            <param name="collapse">If set to <c>true</c> the column will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Ungroup">
            <summary>
            Adds this column to the previous outline level (decrements the outline level for this column by 1).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Ungroup(System.Boolean)">
            <summary>
            Adds this column to the previous outline level (decrements the outline level for this column by 1).
            </summary>
            <param name="fromAll">If set to <c>true</c> it will remove this column from all outline levels.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Collapse">
            <summary>
            Show this column as collapsed.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Expand">
            <summary>Expands this column (if it's collapsed).</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.AddVerticalPageBreak">
            <summary>
            Adds a vertical page break after this column.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this column.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLColumns.Width">
            <summary>
            Sets the width of all columns.
            </summary>
            <value>
            The width of all columns.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Delete">
            <summary>
            Deletes all columns and shifts the columns at the right of them accordingly.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.AdjustToContents">
            <summary>
            Adjusts the width of all columns based on its contents.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.AdjustToContents(System.Int32)">
            <summary>
            Adjusts the width of all columns based on its contents, starting from the startRow.
            </summary>
            <param name="startRow">The row to start calculating the column width.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.AdjustToContents(System.Int32,System.Int32)">
            <summary>
            Adjusts the width of all columns based on its contents, starting from the startRow and ending at endRow.
            </summary>
            <param name="startRow">The row to start calculating the column width.</param>
            <param name="endRow">The row to end calculating the column width.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Hide">
            <summary>
            Hides all columns.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Unhide">
            <summary>Unhides all columns.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Group">
            <summary>
            Increments the outline level of all columns by 1.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Group(System.Boolean)">
            <summary>
            Increments the outline level of all columns by 1.
            </summary>
            <param name="collapse">If set to <c>true</c> the columns will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Group(System.Int32)">
            <summary>
            Sets outline level for all columns.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Group(System.Int32,System.Boolean)">
            <summary>
            Sets outline level for all columns.
            </summary>
            <param name="outlineLevel">The outline level.</param>
            <param name="collapse">If set to <c>true</c> the columns will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Ungroup">
            <summary>
            Decrements the outline level of all columns by 1.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Ungroup(System.Boolean)">
            <summary>
            Decrements the outline level of all columns by 1.
            </summary>
            <param name="fromAll">If set to <c>true</c> it will remove the columns from all outline levels.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Collapse">
            <summary>
            Show all columns as collapsed.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Expand">
            <summary>Expands all columns (if they're collapsed).</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Cells">
            <summary>
            Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.CellsUsed">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.CellsUsed(System.Boolean)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="includeFormats">if set to <c>true</c> will return all cells with a value or a style different than the default.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.AddVerticalPageBreaks">
            <summary>
            Adds a vertical page break after these columns.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these columns.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLColumn.#ctor(ClosedXML.Excel.XLWorksheet,System.Int32)">
            <summary>
            The direct constructor should only be used in <see cref="P:ClosedXML.Excel.XLWorksheet.RangeFactory"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLColumn.CalculateMinColumnWidth(System.Int32,System.Int32,ClosedXML.Graphics.IXLGraphicEngine,ClosedXML.Graphics.Dpi)">
            <summary>
            Calculate column width in pixels according to the content of cells.
            </summary>
            <param name="startRow">First row number whose content is used for determination.</param>
            <param name="endRow">Last row number whose content is used for determination.</param>
            <param name="engine">Engine to determine size of glyphs.</param>
            <param name="dpi">DPI of the worksheet.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLColumn.AddVerticalPageBreak">
            <summary>
              Adds a vertical page break after this column.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLColumns.#ctor(ClosedXML.Excel.XLWorksheet,ClosedXML.Excel.XLStyleValue,System.Collections.Generic.IEnumerable{ClosedXML.Excel.XLColumn})">
            <summary>
            Create a new instance of <see cref="T:ClosedXML.Excel.XLColumns"/>.
            </summary>
            <param name="worksheet">If worksheet is specified it means that the created instance represents
            all columns on a worksheet so changing its width will affect all columns.</param>
            <param name="defaultStyle">Default style to use when initializing child entries.</param>
            <param name="lazyEnumerable">A predefined enumerator of <see cref="T:ClosedXML.Excel.XLColumn"/> to support lazy initialization.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLColumns.AddVerticalPageBreaks">
            <summary>
              Adds a vertical page break after this column.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLComment.Author">
            <summary>
            Gets or sets this comment's author's name
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLComment.SetAuthor(System.String)">
            <summary>
            Sets the name of the comment's author
            </summary>
            <param name="value">Author's name</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLComment.AddSignature">
            <summary>
            Adds a bolded line with the author's name
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLConditionalFormat.Range">
            <summary>
            The first of the <see cref="P:ClosedXML.Excel.IXLConditionalFormat.Ranges"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLConditionalFormats.Consolidate">
            <summary>
            The method consolidate the same conditional formats, which are located in adjacent ranges.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLConditionalFormats.ReorderAccordingToOriginalPriority">
            <summary>
            Reorders the according to original priority. Done during load process
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLAddress">
            <summary>
            Reference to a single cell in a workbook. Reference can be absolute, relative or mixed.
            Reference can be with or without a worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAddress.Worksheet">
            <summary>
            Worksheet of the reference. Value is null for address without a worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLAddress.Create(System.String)">
            <summary>
            Create address without worksheet. For calculation only!
            </summary>
            <param name="cellAddressString"></param>
        </member>
        <member name="M:ClosedXML.Excel.XLAddress.#ctor(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref = "T:ClosedXML.Excel.XLAddress" /> struct using a mixed notation.  Attention: without worksheet for calculation only!
            </summary>
            <param name = "rowNumber">The row number of the cell address.</param>
            <param name = "columnLetter">The column letter of the cell address.</param>
            <param name = "fixedRow"></param>
            <param name = "fixedColumn"></param>
        </member>
        <member name="M:ClosedXML.Excel.XLAddress.#ctor(ClosedXML.Excel.XLWorksheet,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref = "T:ClosedXML.Excel.XLAddress" /> struct using a mixed notation.
            </summary>
            <param name = "worksheet"></param>
            <param name = "rowNumber">The row number of the cell address.</param>
            <param name = "columnLetter">The column letter of the cell address.</param>
            <param name = "fixedRow"></param>
            <param name = "fixedColumn"></param>
        </member>
        <member name="M:ClosedXML.Excel.XLAddress.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref = "T:ClosedXML.Excel.XLAddress" /> struct using R1C1 notation. Attention: without worksheet for calculation only!
            </summary>
            <param name = "rowNumber">The row number of the cell address.</param>
            <param name = "columnNumber">The column number of the cell address.</param>
            <param name = "fixedRow"></param>
            <param name = "fixedColumn"></param>
        </member>
        <member name="M:ClosedXML.Excel.XLAddress.#ctor(ClosedXML.Excel.XLWorksheet,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref = "T:ClosedXML.Excel.XLAddress" /> struct using R1C1 notation.
            </summary>
            <param name = "worksheet"></param>
            <param name = "rowNumber">The row number of the cell address.</param>
            <param name = "columnNumber">The column number of the cell address.</param>
            <param name = "fixedRow"></param>
            <param name = "fixedColumn"></param>
        </member>
        <member name="P:ClosedXML.Excel.XLAddress.RowNumber">
            <summary>
            Gets the row number of this address.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLAddress.ColumnNumber">
            <summary>
            Gets the column number of this address.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLAddress.ColumnLetter">
            <summary>
            Gets the column letter(s) of this address.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLSheetPoint">
            <summary>
            An point (address) in a worksheet, an equivalent of <c>ST_CellRef</c>.
            </summary>
            <remarks>Unlike the XLAddress, sheet can never be invalid.</remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLSheetPoint.Row">
            <summary>
            1-based row number in a sheet.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLSheetPoint.Column">
            <summary>
            1-based column number in a sheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetPoint.Parse(System.String)">
            <inheritdoc cref="M:ClosedXML.Excel.XLSheetPoint.Parse(System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetPoint.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parse point per type <c>ST_CellRef</c> from
            <a href="https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/db11a912-b1cb-4dff-b46d-9bedfd10cef0">2.1.1108 Part 4 Section 3.18.8, ST_CellRef (Cell Reference)</a>
            </summary>
            <param name="input">Input text</param>
            <exception cref="T:System.FormatException">If the input doesn't match expected grammar.</exception>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetPoint.Format(System.Span{System.Char})">
            <summary>
            Write the sheet point as a reference to the span (e.g. <c>A1</c>).
            </summary>
            <param name="output">Must be at least 10 chars long</param>
            <returns>Number of chars </returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetPoint.FromAddress(ClosedXML.Excel.IXLAddress)">
            <summary>
            Create a sheet point from the address. Workbook is ignored.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetPoint.InRangeOrBelow(ClosedXML.Excel.XLSheetRange@)">
            <summary>
            Is the point within the range or below the range?
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetPoint.InRangeOrToLeft(ClosedXML.Excel.XLSheetRange@)">
            <summary>
            Is the point within the range or to the left of the range?
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLSheetRange">
            <summary>
            A representation of a <c>ST_Ref</c>, i.e. an area in a sheet (no reference to the sheet).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLSheetRange.Full">
            <summary>
            A range that covers whole worksheet.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLSheetRange.FirstPoint">
            <summary>
            Top-left point of the sheet range.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLSheetRange.LastPoint">
            <summary>
            Bottom-right point of the sheet range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.Parse(System.String)">
            <inheritdoc cref="M:ClosedXML.Excel.XLSheetRange.Parse(System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parse point per type <c>ST_Ref</c> from
            <a href="https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/e7f22870-88a1-4c06-8e5f-d035b1179c50">2.1.1119 Part 4 Section 3.18.64, ST_Ref (Cell Range Reference)</a>
            </summary>
            <remarks>Can be one cell reference (A1) or two separated by a colon (A1:B2). First reference is always in top left corner</remarks>
            <param name="input">Input text</param>
            <exception cref="T:System.FormatException">If the input doesn't match expected grammar.</exception>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.Format(System.Span{System.Char})">
            <summary>
            Write the sheet range to the span. If range has only one cell, write only the cell.
            </summary>
            <param name="output">Must be at least 21 chars long.</param>
            <returns>Number of written characters.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.BelowRange">
            <summary>
            Return a range that contains all cells below the current range.
            </summary>
            <exception cref="T:System.InvalidOperationException">The range touches the bottom border of the sheet.</exception>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.BelowRange(System.Int32)">
            <summary>
            Get a range below the current one <paramref name="rows"/> rows.
            If there isn't enough rows, use as many as possible.
            </summary>
            <exception cref="T:System.InvalidOperationException">The range touches the bottom border of the sheet.</exception>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.RightRange">
            <summary>
            Return a range that contains all cells to the right of the range.
            </summary>
            <exception cref="T:System.InvalidOperationException">The range touches the right border of the sheet.</exception>
        </member>
        <member name="P:ClosedXML.Excel.IXLDataValidation.Ranges">
            <summary>
            A collection of ranges the data validation rule applies too.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLDataValidation.AddRange(ClosedXML.Excel.IXLRange)">
            <summary>
            Add a range to the collection of ranges this rule applies to.
            If the specified range does not belong to the worksheet of the data validation
            rule it is transferred to the target worksheet.
            </summary>
            <param name="range">A range to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLDataValidation.AddRanges(System.Collections.Generic.IEnumerable{ClosedXML.Excel.IXLRange})">
            <summary>
            Add a collection of ranges to the collection of ranges this rule applies to.
            Ranges that do not belong to the worksheet of the data validation
            rule are transferred to the target worksheet.
            </summary>
            <param name="ranges">Ranges to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLDataValidation.ClearRanges">
            <summary>
            Detach data validation rule of all ranges it applies to.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLDataValidation.RemoveRange(ClosedXML.Excel.IXLRange)">
            <summary>
            Remove the specified range from the collection of range this rule applies to.
            </summary>
            <param name="range">A range to remove.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLDataValidations.Add(ClosedXML.Excel.IXLDataValidation)">
            <summary>
            Add data validation rule to the collection. If the specified rule refers to another
            worksheet than the collection, the copy will be created and its ranges will refer
            to the worksheet of the collection. Otherwise the original instance will be placed
            in the collection.
            </summary>
            <param name="dataValidation">A data validation rule to add.</param>
            <returns>The instance that has actually been added in the collection
            (may be a copy of the specified one).</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLDataValidations.GetAllInRange(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Get all data validation rules applied to ranges that intersect the specified range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLDataValidations.TryGet(ClosedXML.Excel.IXLRangeAddress,ClosedXML.Excel.IXLDataValidation@)">
            <summary>
            Get the data validation rule for the range with the specified address if it exists.
            </summary>
            <param name="rangeAddress">A range address.</param>
            <param name="dataValidation">Data validation rule which ranges collection includes the specified
            address. The specified range should be fully covered with the data validation rule.
            For example, if the rule is applied to ranges A1:A3,C1:C3 then this method will
            return True for ranges A1:A3, C1:C2, A2:A3, and False for ranges A1:C3, A1:C1, etc.</param>
            <returns>True is the data validation rule was found, false otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLDataValidation.AddRange(ClosedXML.Excel.IXLRange)">
            <summary>
            Add a range to the collection of ranges this rule applies to.
            If the specified range does not belong to the worksheet of the data validation
            rule it is transferred to the target worksheet.
            </summary>
            <param name="range">A range to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLDataValidation.AddRanges(System.Collections.Generic.IEnumerable{ClosedXML.Excel.IXLRange})">
            <summary>
            Add a collection of ranges to the collection of ranges this rule applies to.
            Ranges that do not belong to the worksheet of the data validation
            rule are transferred to the target worksheet.
            </summary>
            <param name="ranges">Ranges to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLDataValidation.ClearRanges">
            <summary>
            Detach data validation rule of all ranges it applies to.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLDataValidation.RemoveRange(ClosedXML.Excel.IXLRange)">
            <summary>
            Remove the specified range from the collection of range this rule applies to.
            </summary>
            <param name="range">A range to remove.</param>
        </member>
        <member name="F:ClosedXML.Excel.XLDataValidations._skipSplittingExistingRanges">
            <summary>
            The flag used to avoid unnecessary check for splitting intersected ranges when we already
            are performing the splitting.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLDataValidations.GetAllInRange(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Get all data validation rules applied to ranges that intersect the specified range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLDataValidations.TryGet(ClosedXML.Excel.IXLRangeAddress,ClosedXML.Excel.IXLDataValidation@)">
            <summary>
            Get the data validation rule for the range with the specified address if it exists.
            </summary>
            <param name="rangeAddress">A range address.</param>
            <param name="dataValidation">Data validation rule which ranges collection includes the specified
            address. The specified range should be fully covered with the data validation rule.
            For example, if the rule is applied to ranges A1:A3,C1:C3 then this method will
            return True for ranges A1:A3, C1:C2, A2:A3, and False for ranges A1:C3, A1:C1, etc.</param>
            <returns>True is the data validation rule was found, false otherwise.</returns>
        </member>
        <member name="T:ClosedXML.Excel.XLDataValidations.XLDataValidationIndexEntry">
            <summary>
            Class used for indexing data validation rules.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLDataValidations.XLDataValidationIndexEntry.RangeAddress">
            <summary>
              Gets an object with the boundaries of this range.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Drawings.IXLPicture.Format">
            <summary>
            Type of image. The supported formats are defined by OpenXML's ImagePartType.
            Default value is "jpeg"
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Drawings.IXLPicture.Width">
            <summary>
            Current width of the picture in pixels.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Drawings.IXLPicture.Height">
            <summary>
            Current height of the picture in pixels.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Drawings.IXLPicture.OriginalHeight">
            <summary>
            Original height of the picture in pixels.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Drawings.IXLPicture.OriginalWidth">
            <summary>
            Original width of the picture in pixels.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Drawings.IXLPicture.CopyTo(ClosedXML.Excel.IXLWorksheet)">
            <summary>
            Create a copy of the picture on a different worksheet.
            </summary>
            <param name="targetSheet">The worksheet to which the picture will be copied.</param>
            <returns>A created copy of the picture.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Drawings.IXLPicture.Delete">
            <summary>
            Deletes this picture.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Drawings.IXLPicture.Duplicate">
            <summary>
            Create a copy of the picture on the same worksheet.
            </summary>
            <returns>A created copy of the picture.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Drawings.XLPicture.CopyTo(ClosedXML.Excel.IXLWorksheet)">
            <summary>
            Create a copy of the picture on a different worksheet.
            </summary>
            <param name="targetSheet">The worksheet to which the picture will be copied.</param>
            <returns>A created copy of the picture.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Drawings.XLPicture.Duplicate">
            <summary>
            Create a copy of the picture on the same worksheet.
            </summary>
            <returns>A created copy of the picture.</returns>
        </member>
        <member name="T:ClosedXML.Excel.InsertData.IInsertDataReader">
            <summary>
            A universal interface for different data readers used in InsertData logic.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.InsertData.IInsertDataReader.GetData">
            <summary>
            Get a collection of records, each as a collection of values, extracted from a source.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.InsertData.IInsertDataReader.GetPropertiesCount">
            <summary>
            Get the number of properties to use as a table with.
            Actual number of may vary in different records.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.InsertData.IInsertDataReader.GetPropertyName(System.Int32)">
            <summary>
            Get the title of the property with the specified index.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.InsertData.IInsertDataReader.GetRecordsCount">
            <summary>
            Get the total number of records.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IO.OpenXmlConst">
            <summary>
            Constants used across writers.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.IO.OpenXmlConst.TrueValue">
            <summary>
            Valid and shorter than normal true.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.IO.OpenXmlConst.FalseValue">
            <summary>
            Valid and shorter than normal false.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IO.WorksheetPartWriter.StreamToPart(DocumentFormat.OpenXml.Spreadsheet.Worksheet,DocumentFormat.OpenXml.Packaging.WorksheetPart,ClosedXML.Excel.XLWorksheet,ClosedXML.Excel.XLWorkbook.SaveContext,ClosedXML.Excel.SaveOptions)">
            <summary>
            Stream detached worksheet DOM to the worksheet part stream.
            Replaces the content of the part.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.IO.WorksheetPartWriter.FormulaDataType">
            <summary>
            An array to convert data type for a formula cell. Key is <see cref="T:ClosedXML.Excel.XLDataType"/>.
            It saves some performance through direct indexation instead of switch.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.IO.WorksheetPartWriter.ValueDataType">
            <summary>
            An array to convert data type for a cell that only contains a value. Key is <see cref="T:ClosedXML.Excel.XLDataType"/>.
            It saves some performance through direct indexation instead of switch.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLSheetView.SplitColumn">
            <summary>
            Gets or sets the column after which the horizontal split should take place.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLSheetView.SplitRow">
            <summary>
            Gets or sets the row after which the vertical split should take place.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLSheetView.TopLeftCellAddress">
            <summary>
            Gets or sets the location of the top left visible cell
            </summary>
            <value>
            The scroll position's top left cell.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLSheetView.ZoomScale">
            <summary>
            Window zoom magnification for current view representing percent values. Horizontal and vertical scale together.
            </summary>
            <remarks>Representing percent values ranging from 10 to 400.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLSheetView.ZoomScaleNormal">
            <summary>
            Zoom magnification to use when in normal view. Horizontal and vertical scale together
            </summary>
            <remarks>Representing percent values ranging from 10 to 400.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLSheetView.ZoomScalePageLayoutView">
            <summary>
            Zoom magnification to use when in page layout view. Horizontal and vertical scale together.
            </summary>
            <remarks>Representing percent values ranging from 10 to 400.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLSheetView.ZoomScaleSheetLayoutView">
            <summary>
            Zoom magnification to use when in page break preview. Horizontal and vertical scale together.
            </summary>
            <remarks>Representing percent values ranging from 10 to 400.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLSheetView.Freeze(System.Int32,System.Int32)">
            <summary>
            Freezes the specified rows and columns.
            </summary>
            <param name="rows">The rows to freeze.</param>
            <param name="columns">The columns to freeze.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLSheetView.FreezeColumns(System.Int32)">
            <summary>
            Freezes the left X columns.
            </summary>
            <param name="columns">The columns to freeze.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLSheetView.FreezeRows(System.Int32)">
            <summary>
            Freezes the top X rows.
            </summary>
            <param name="rows">The rows to freeze.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.CalculateMode">
            <summary>
              Gets or sets the workbook's calculation mode.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.ColumnWidth">
            <summary>
              Gets or sets the default column width for the workbook.
              <para>All new worksheets will use this column width.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.NamedRanges">
            <summary>
              Gets an object to manipulate this workbook's named ranges.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.Outline">
            <summary>
              Gets or sets the default outline options for the workbook.
              <para>All new worksheets will use these outline options.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.PageOptions">
            <summary>
              Gets or sets the default page options for the workbook.
              <para>All new worksheets will use these page options.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.PivotCaches">
            <summary>
              Gets all pivot caches in a workbook. A one cache can be
              used by multiple tables. Unused caches are not saved.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.Properties">
            <summary>
              Gets or sets the workbook's properties.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.ReferenceStyle">
            <summary>
              Gets or sets the workbook's reference style.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.RowHeight">
            <summary>
              Gets or sets the default row height for the workbook.
              <para>All new worksheets will use this row height.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.Style">
            <summary>
              Gets or sets the default style for the workbook.
              <para>All new worksheets will use this style.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.Theme">
            <summary>
              Gets an object to manipulate this workbook's theme.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.Worksheets">
            <summary>
              Gets an object to manipulate the worksheets.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.AddWorksheet(System.Data.DataTable)">
            <summary>
            Add a worksheet with a table at Cell(row:1, column:1). The dataTable's name is used for the
            worksheet name. The name of a table will be generated as <em>Table{number suffix}</em>.
            </summary>
            <param name="dataTable">Datatable to insert</param>
            <returns>Inserted Worksheet</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.AddWorksheet(System.Data.DataTable,System.String)">
            <summary>
            Add a worksheet with a table at Cell(row:1, column:1). The sheetName provided is used for the
            worksheet name. The name of a table will be generated as <em>Table{number suffix}</em>.
            </summary>
            <param name="dataTable">dataTable to insert as Excel Table</param>
            <param name="sheetName">Worksheet and Excel Table name</param>
            <returns>Inserted Worksheet</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.AddWorksheet(System.Data.DataTable,System.String,System.String)">
            <summary>
            Add a worksheet with a table at Cell(row:1, column:1).
            </summary>
            <param name="dataTable">dataTable to insert as Excel Table</param>
            <param name="sheetName">Worksheet name</param>
            <param name="tableName">Excel Table name</param>
            <returns>Inserted Worksheet</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.Evaluate(System.String)">
            <summary>
            Evaluate a formula expression.
            </summary>
            <param name="expression">Formula expression to evaluate.</param>
            <exception cref="T:ClosedXML.Excel.CalcEngine.Exceptions.MissingContextException">
            If the expression contains a function that requires a context (e.g. current cell or worksheet).
            </exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.RecalculateAllFormulas">
            <summary>
            Force recalculation of all cell formulas.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.Save">
            <summary>
              Saves the current workbook.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.Save(System.Boolean,System.Boolean)">
            <summary>
              Saves the current workbook and optionally performs validation
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.SaveAs(System.String)">
            <summary>
              Saves the current workbook to a file.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.SaveAs(System.String,System.Boolean,System.Boolean)">
            <summary>
              Saves the current workbook to a file and optionally validates it.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.SaveAs(System.IO.Stream)">
            <summary>
              Saves the current workbook to a stream.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.SaveAs(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
              Saves the current workbook to a stream and optionally validates it.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.Search(System.String,System.Globalization.CompareOptions,System.Boolean)">
            <summary>
            Searches the cells' contents for a given piece of text
            </summary>
            <param name="searchText">The search text.</param>
            <param name="compareOptions">The compare options.</param>
            <param name="searchFormulae">if set to <c>true</c> search formulae instead of cell values.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.Table(System.String,System.StringComparison)">
            <summary>
            Gets the Excel table of the given name
            </summary>
            <param name="tableName">Name of the table to return.</param>
            <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The table with given name</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If no tables with this name could be found in the workbook.</exception>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.Workbook">
            <summary>
            Gets the workbook that contains this worksheet
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.ColumnWidth">
            <summary>
            Gets or sets the default column width for this worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.RowHeight">
            <summary>
            Gets or sets the default row height for this worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.Name">
            <summary>
            Gets or sets the name (caption) of this worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.Position">
            <summary>
            Gets or sets the position of the sheet.
            <para>When setting the Position all other sheets' positions are shifted accordingly.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.PageSetup">
            <summary>
            Gets an object to manipulate the sheet's print options.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.Outline">
            <summary>
            Gets an object to manipulate the Outline levels.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.FirstRow">
            <summary>
            Gets the first row of the worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.FirstRowUsed">
            <summary>
            Gets the first non-empty row of the worksheet that contains a cell with a value.
            <para>Formatted empty cells do not count.</para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.FirstRowUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Gets the first non-empty row of the worksheet that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.LastRow">
            <summary>
            Gets the last row of the worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.LastRowUsed">
            <summary>
            Gets the last non-empty row of the worksheet that contains a cell with a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.LastRowUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Gets the last non-empty row of the worksheet that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.FirstColumn">
            <summary>
            Gets the first column of the worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.FirstColumnUsed">
            <summary>
            Gets the first non-empty column of the worksheet that contains a cell with a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.FirstColumnUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Gets the first non-empty column of the worksheet that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.LastColumn">
            <summary>
            Gets the last column of the worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.LastColumnUsed">
            <summary>
            Gets the last non-empty column of the worksheet that contains a cell with a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.LastColumnUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Gets the last non-empty column of the worksheet that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Columns">
            <summary>
            Gets a collection of all columns in this worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Columns(System.String)">
            <summary>
            Gets a collection of the specified columns in this worksheet, separated by commas.
            <para>e.g. Columns("G:H"), Columns("10:11,13:14"), Columns("P:Q,S:T"), Columns("V")</para>
            </summary>
            <param name="columns">The columns to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Columns(System.String,System.String)">
            <summary>
            Gets a collection of the specified columns in this worksheet.
            </summary>
            <param name="firstColumn">The first column to return.</param>
            <param name="lastColumn">The last column to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Columns(System.Int32,System.Int32)">
            <summary>
            Gets a collection of the specified columns in this worksheet.
            </summary>
            <param name="firstColumn">The first column to return.</param>
            <param name="lastColumn">The last column to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Rows">
            <summary>
            Gets a collection of all rows in this worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Rows(System.String)">
            <summary>
            Gets a collection of the specified rows in this worksheet, separated by commas.
            <para>e.g. Rows("4:5"), Rows("7:8,10:11"), Rows("13")</para>
            </summary>
            <param name="rows">The rows to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Rows(System.Int32,System.Int32)">
            <summary>
            Gets a collection of the specified rows in this worksheet.
            </summary>
            <param name="firstRow">The first row to return.</param>
            <param name="lastRow">The last row to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Row(System.Int32)">
            <summary>
            Gets the specified row of the worksheet.
            </summary>
            <param name="row">The worksheet's row.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Column(System.Int32)">
            <summary>
            Gets the specified column of the worksheet.
            </summary>
            <param name="column">The worksheet's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Column(System.String)">
            <summary>
            Gets the specified column of the worksheet.
            </summary>
            <param name="column">The worksheet's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Cell(System.Int32,System.Int32)">
            <summary>
            Gets the cell at the specified row and column.
            </summary>
            <param name="row">The cell's row.</param>
            <param name="column">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Cell(System.String)">
            <summary>Gets the cell at the specified address.</summary>
            <param name="cellAddressInRange">The cell address in the worksheet.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Cell(System.Int32,System.String)">
            <summary>
            Gets the cell at the specified row and column.
            </summary>
            <param name="row">The cell's row.</param>
            <param name="column">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Cell(ClosedXML.Excel.IXLAddress)">
            <summary>Gets the cell at the specified address.</summary>
            <param name="cellAddressInRange">The cell address in the worksheet.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Range(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Returns the specified range.
            </summary>
            <param name="rangeAddress">The range boundaries.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Range(System.String)">
            <summary>Returns the specified range.</summary>
            <para>e.g. Range("A1"), Range("A1:C2")</para>
            <param name="rangeAddress">The range boundaries.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Range(ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLCell)">
            <summary>Returns the specified range.</summary>
            <param name="firstCell">The first cell in the range.</param>
            <param name="lastCell"> The last cell in the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Range(System.String,System.String)">
            <summary>Returns the specified range.</summary>
            <param name="firstCellAddress">The first cell address in the worksheet.</param>
            <param name="lastCellAddress"> The last cell address in the worksheet.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Range(ClosedXML.Excel.IXLAddress,ClosedXML.Excel.IXLAddress)">
            <summary>Returns the specified range.</summary>
            <param name="firstCellAddress">The first cell address in the worksheet.</param>
            <param name="lastCellAddress"> The last cell address in the worksheet.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Ranges(System.String)">
            <summary>Returns a collection of ranges, separated by commas.</summary>
            <para>e.g. Ranges("A1"), Ranges("A1:C2"), Ranges("A1:B2,D1:D4")</para>
            <param name="ranges">The ranges to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Range(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Returns the specified range.</summary>
            <param name="firstCellRow">   The first cell's row of the range to return.</param>
            <param name="firstCellColumn">The first cell's column of the range to return.</param>
            <param name="lastCellRow">    The last cell's row of the range to return.</param>
            <param name="lastCellColumn"> The last cell's column of the range to return.</param>
            <returns>.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.RowCount">
            <summary>Gets the number of rows in this worksheet.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.ColumnCount">
            <summary>Gets the number of columns in this worksheet.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.CollapseRows">
            <summary>
            Collapses all outlined rows.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.CollapseColumns">
            <summary>
            Collapses all outlined columns.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.ExpandRows">
            <summary>
            Expands all outlined rows.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.ExpandColumns">
            <summary>
            Expands all outlined columns.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.CollapseRows(System.Int32)">
            <summary>
            Collapses the outlined rows of the specified level.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.CollapseColumns(System.Int32)">
            <summary>
            Collapses the outlined columns of the specified level.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.ExpandRows(System.Int32)">
            <summary>
            Expands the outlined rows of the specified level.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.ExpandColumns(System.Int32)">
            <summary>
            Expands the outlined columns of the specified level.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Delete">
            <summary>
            Deletes this worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.NamedRanges">
            <summary>
            Gets an object to manage this worksheet's named ranges.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.NamedRange(System.String)">
            <summary>
            Gets the specified named range.
            </summary>
            <param name="rangeName">Name of the range.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.SheetView">
            <summary>
            Gets an object to manage how the worksheet is going to displayed by Excel.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Table(System.Int32)">
            <summary>
            Gets the Excel table of the given index
            </summary>
            <param name="index">Index of the table to return</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Table(System.String)">
            <summary>
            Gets the Excel table of the given name
            </summary>
            <param name="name">Name of the table to return</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.Tables">
            <summary>
            Gets an object to manage this worksheet's Excel tables
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.CopyTo(System.String)">
            <summary>
            Copies the
            </summary>
            <param name="newSheetName"></param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.CopyTo(ClosedXML.Excel.XLWorkbook,System.String)">
            <summary>
            Copy a worksheet from this workbook to a different workbook as a new sheet.
            </summary>
            <param name="workbook">Workbook into which copy this sheet.</param>
            <param name="newSheetName">Name of new sheet in the <paramref name="workbook"/> where will the data be copied. Sheet will be in the last position.</param>
            <returns>Newly created sheet in the <paramref name="workbook"/>.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Evaluate(System.String,System.String)">
            <summary>
            Evaluate an formula and return a result.
            </summary>
            <param name="expression">Formula to evaluate.</param>
            <param name="formulaAddress">A cell address that is used to provide context for formula calculation (mostly implicit intersection).</param>
            <exception cref="T:ClosedXML.Excel.CalcEngine.Exceptions.MissingContextException">If <paramref name="formulaAddress"/> was needed for some part of calculation.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.RecalculateAllFormulas">
            <summary>
            Force recalculation of all cell formulas.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.LoadOptions">
            <summary>
            A class that defines various aspects of a newly created workbook.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.LoadOptions.DefaultGraphicEngine">
            <summary>
            A graphics engine that will be used for workbooks without explicitly set engine.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.LoadOptions.RecalculateAllFormulas">
            <summary>
            Should all formulas in a workbook be recalculated during load? Default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.LoadOptions.GraphicEngine">
            <summary>
            Graphic engine used by the workbook.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.LoadOptions.Dpi">
            <summary>
            DPI for the workbook. Default is 96.
            </summary>
            <remarks>Used in various places, e.g. determining a physical size of an image without a DPI or to determine a size of a text in a cell.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLNamedRange.Comment">
            <summary>
            Gets or sets the comment for this named range.
            </summary>
            <value>
            The comment for this named range.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLNamedRange.IsValid">
            <summary>
            Checks if the named range contains invalid references (#REF!).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLNamedRange.Name">
            <summary>
            Gets or sets the name of the range.
            </summary>
            <value>
            The name of the range.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLNamedRange.Ranges">
            <summary>
            Gets the ranges associated with this named range.
            <para>Note: A named range can point to multiple ranges.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLNamedRange.Scope">
            <summary>
            Gets the scope of this named range.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLNamedRange.Visible">
            <summary>
            Gets or sets the visibility of this named range.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRange.Add(ClosedXML.Excel.XLWorkbook,System.String)">
            <summary>
            Adds the specified range to this named range.
            <para>Note: A named range can point to multiple ranges.</para>
            </summary>
            <param name="workbook">Workbook containing the range</param>
            <param name="rangeAddress">The range address to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRange.Add(ClosedXML.Excel.IXLRange)">
            <summary>
            Adds the specified range to this named range.
            <para>Note: A named range can point to multiple ranges.</para>
            </summary>
            <param name="range">The range to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRange.Add(ClosedXML.Excel.IXLRanges)">
            <summary>
            Adds the specified ranges to this named range.
            <para>Note: A named range can point to multiple ranges.</para>
            </summary>
            <param name="ranges">The ranges to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRange.Clear">
            <summary>
            Clears the list of ranges associated with this named range.
            <para>(it does not clear the cells)</para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRange.Delete">
            <summary>
            Deletes this named range (not the cells).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRange.Remove(System.String)">
            <summary>
            Removes the specified range from this named range.
            <para>Note: A named range can point to multiple ranges.</para>
            </summary>
            <param name="rangeAddress">The range address to remove.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRange.Remove(ClosedXML.Excel.IXLRange)">
            <summary>
            Removes the specified range from this named range.
            <para>Note: A named range can point to multiple ranges.</para>
            </summary>
            <param name="range">The range to remove.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRange.Remove(ClosedXML.Excel.IXLRanges)">
            <summary>
            Removes the specified ranges from this named range.
            <para>Note: A named range can point to multiple ranges.</para>
            </summary>
            <param name="ranges">The ranges to remove.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRanges.NamedRange(System.String)">
            <summary>
            Gets the specified named range.
            </summary>
            <param name="rangeName">Name of the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRanges.Add(System.String,System.String)">
            <summary>
            Adds a new named range.
            </summary>
            <param name="rangeName">Name of the range to add.</param>
            <param name="rangeAddress">The range address to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRanges.Add(System.String,ClosedXML.Excel.IXLRange)">
            <summary>
            Adds a new named range.
            </summary>
            <param name="rangeName">Name of the range to add.</param>
            <param name="range">The range to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRanges.Add(System.String,ClosedXML.Excel.IXLRanges)">
            <summary>
            Adds a new named range.
            </summary>
            <param name="rangeName">Name of the range to add.</param>
            <param name="ranges">The ranges to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRanges.Add(System.String,System.String,System.String)">
            <summary>
            Adds a new named range.
            </summary>
            <param name="rangeName">Name of the ranges to add.</param>
            <param name="rangeAddress">The range address to add.</param>
            <param name="comment">The comment for the new named range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRanges.Add(System.String,ClosedXML.Excel.IXLRange,System.String)">
            <summary>
            Adds a new named range.
            </summary>
            <param name="rangeName">Name of the ranges to add.</param>
            <param name="range">The range to add.</param>
            <param name="comment">The comment for the new named range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRanges.Add(System.String,ClosedXML.Excel.IXLRanges,System.String)">
            <summary>
            Adds a new named range.
            </summary>
            <param name="rangeName">Name of the ranges to add.</param>
            <param name="ranges">The ranges to add.</param>
            <param name="comment">The comment for the new named range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRanges.Delete(System.String)">
            <summary>
            Deletes the specified named range (not the cells).
            </summary>
            <param name="rangeName">Name of the range to delete.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRanges.Delete(System.Int32)">
            <summary>
            Deletes the specified named range's index (not the cells).
            </summary>
            <param name="rangeIndex">Index of the named range to delete.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRanges.DeleteAll">
            <summary>
            Deletes all named ranges (not the cells).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRanges.ValidNamedRanges">
            <summary>
            Returns a subset of named ranges that do not have invalid references.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLNamedRanges.InvalidNamedRanges">
            <summary>
            Returns a subset of named ranges that do have invalid references.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLNamedRange.IsValid">
            <summary>
            Checks if the named range contains invalid references (#REF!).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLNamedRanges.Add(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds the specified range name.
            </summary>
            <param name="rangeName">Name of the range.</param>
            <param name="rangeAddress">The range address.</param>
            <param name="comment">The comment.</param>
            <param name="validateName">if set to <c>true</c> validates the name.</param>
            <param name="validateRangeAddress">if set to <c>true</c> range address will be checked for validity.</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentException">
            For named ranges in the workbook scope, specify the sheet name in the reference.
            </exception>
        </member>
        <member name="M:ClosedXML.Excel.XLNamedRanges.ValidNamedRanges">
            <summary>
            Returns a subset of named ranges that do not have invalid references.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLNamedRanges.InvalidNamedRanges">
            <summary>
            Returns a subset of named ranges that do have invalid references.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLHeaderFooter.Left">
            <summary>
            Gets the left header/footer item.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLHeaderFooter.Center">
            <summary>
            Gets the middle header/footer item.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLHeaderFooter.Right">
            <summary>
            Gets the right header/footer item.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLHeaderFooter.GetText(ClosedXML.Excel.XLHFOccurrence)">
            <summary>
            Gets the text of the specified header/footer occurrence.
            </summary>
            <param name="occurrence">The occurrence.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLHFItem.GetText(ClosedXML.Excel.XLHFOccurrence)">
            <summary>
            Gets the text of the specified header/footer occurrence.
            </summary>
            <param name="occurrence">The occurrence.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLHFItem.AddText(ClosedXML.Excel.XLHFPredefinedText)">
            <summary>
            Adds the given predefined text to this header/footer item.
            </summary>
            <param name="predefinedText">The predefined text to add to this header/footer item.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLHFItem.AddText(System.String,ClosedXML.Excel.XLHFOccurrence)">
            <summary>
            Adds the given text to this header/footer item.
            </summary>
            <param name="text">The text to add to this header/footer item.</param>
            <param name="occurrence">The occurrence for the text.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLHFItem.AddText(ClosedXML.Excel.XLHFPredefinedText,ClosedXML.Excel.XLHFOccurrence)">
            <summary>
            Adds the given predefined text to this header/footer item.
            </summary>
            <param name="predefinedText">The predefined text to add to this header/footer item.</param>
            <param name="occurrence">The occurrence for the predefined text.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLHFItem.Clear(ClosedXML.Excel.XLHFOccurrence)">
            <summary>Clears the text/formats of this header/footer item.</summary>
            <param name="occurrence">The occurrence to clear.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLMargins.Left">
            <summary>Gets or sets the Left margin.</summary>
            <value>The Left margin.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLMargins.Right">
            <summary>Gets or sets the Right margin.</summary>
            <value>The Right margin.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLMargins.Top">
            <summary>Gets or sets the Top margin.</summary>
            <value>The Top margin.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLMargins.Bottom">
            <summary>Gets or sets the Bottom margin.</summary>
            <value>The Bottom margin.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLMargins.Header">
            <summary>Gets or sets the Header margin.</summary>
            <value>The Header margin.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLMargins.Footer">
            <summary>Gets or sets the Footer margin.</summary>
            <value>The Footer margin.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.PrintAreas">
            <summary>
            Gets an object to manage the print areas of the worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.FirstRowToRepeatAtTop">
            <summary>
            Gets the first row that will repeat on the top of the printed pages.
            <para>Use SetRowsToRepeatAtTop() to set the rows that will be repeated on the top of the printed pages.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.LastRowToRepeatAtTop">
            <summary>
            Gets the last row that will repeat on the top of the printed pages.
            <para>Use SetRowsToRepeatAtTop() to set the rows that will be repeated on the top of the printed pages.</para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.SetRowsToRepeatAtTop(System.String)">
            <summary>
            Sets the rows to repeat on the top of the printed pages.
            </summary>
            <param name="range">The range of rows to repeat on the top of the printed pages.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.SetRowsToRepeatAtTop(System.Int32,System.Int32)">
            <summary>
            Sets the rows to repeat on the top of the printed pages.
            </summary>
            <param name="firstRowToRepeatAtTop">The first row to repeat at top.</param>
            <param name="lastRowToRepeatAtTop">The last row to repeat at top.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.FirstColumnToRepeatAtLeft">
            <summary>Gets the first column to repeat on the left of the printed pages.</summary>
            <value>The first column to repeat on the left of the printed pages.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.LastColumnToRepeatAtLeft">
            <summary>Gets the last column to repeat on the left of the printed pages.</summary>
            <value>The last column to repeat on the left of the printed pages.</value>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.SetColumnsToRepeatAtLeft(System.Int32,System.Int32)">
            <summary>
            Sets the rows to repeat on the left of the printed pages.
            </summary>
            <param name="firstColumnToRepeatAtLeft">The first column to repeat at left.</param>
            <param name="lastColumnToRepeatAtLeft">The last column to repeat at left.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.SetColumnsToRepeatAtLeft(System.String)">
            <summary>
            Sets the rows to repeat on the left of the printed pages.
            </summary>
            <param name="range">The range of rows to repeat on the left of the printed pages.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.PageOrientation">
            <summary>Gets or sets the page orientation for printing.</summary>
            <value>The page orientation.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.PagesWide">
            <summary>
            Gets or sets the number of pages wide (horizontal) the worksheet will be printed on.
            <para>If you don't specify the PagesTall, Excel will adjust that value</para>
            <para>based on the contents of the worksheet and the PagesWide number.</para>
            <para>Setting this value will override the Scale value.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.PagesTall">
            <summary>
            Gets or sets the number of pages tall (vertical) the worksheet will be printed on.
            <para>If you don't specify the PagesWide, Excel will adjust that value</para>
            <para>based on the contents of the worksheet and the PagesTall number.</para>
            <para>Setting this value will override the Scale value.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.Scale">
            <summary>
            Gets or sets the scale at which the worksheet will be printed.
            <para>The worksheet will be printed on as many pages as necessary to print at the given scale.</para>
            <para>Setting this value will override the PagesWide and PagesTall values.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.HorizontalDpi">
            <summary>
            Gets or sets the horizontal dpi for printing the worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.VerticalDpi">
            <summary>
            Gets or sets the vertical dpi for printing the worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.FirstPageNumber">
            <summary>
            Gets or sets the page number that will begin the printout.
            <para>For example, the first page of your printout could be numbered page 5.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.CenterHorizontally">
            <summary>
            Gets or sets a value indicating whether the worksheet will be centered on the page horizontally.
            </summary>
            <value>
              <c>true</c> if the worksheet will be centered on the page horizontally; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.CenterVertically">
            <summary>
            Gets or sets a value indicating whether the worksheet will be centered on the page vertically.
            </summary>
            <value>
              <c>true</c> if the worksheet will be centered on the page vertically; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.AdjustTo(System.Int32)">
            <summary>
            Sets the scale at which the worksheet will be printed. This is equivalent to setting the Scale property.
            <para>The worksheet will be printed on as many pages as necessary to print at the given scale.</para>
            <para>Setting this value will override the PagesWide and PagesTall values.</para>
            </summary>
            <param name="percentageOfNormalSize">The scale at which the worksheet will be printed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.FitToPages(System.Int32,System.Int32)">
            <summary>
            Gets or sets the number of pages the worksheet will be printed on.
            <para>This is equivalent to setting both PagesWide and PagesTall properties.</para>
            <para>Setting this value will override the Scale value.</para>
            </summary>
            <param name="pagesWide">The pages wide.</param>
            <param name="pagesTall">The pages tall.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.PaperSize">
            <summary>
            Gets or sets the size of the paper to print the worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.Margins">
            <summary>
            Gets an object to work with the page margins.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.Header">
            <summary>
            Gets an object to work with the page headers.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.Footer">
            <summary>
            Gets an object to work with the page footers.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.ScaleHFWithDocument">
            <summary>
            Gets or sets a value indicating whether Excel will automatically adjust the font size to the scale of the worksheet.
            </summary>
            <value>
            	<c>true</c> if Excel will automatically adjust the font size to the scale of the worksheet; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.AlignHFWithMargins">
            <summary>
            Gets or sets a value indicating whether the header and footer margins are aligned with the left and right margins of the worksheet.
            </summary>
            <value>
              <c>true</c> if the header and footer margins are aligned with the left and right margins of the worksheet; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.ShowGridlines">
            <summary>
            Gets or sets a value indicating whether the gridlines will be printed.
            </summary>
            <value>
              <c>true</c> if the gridlines will be printed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.ShowRowAndColumnHeadings">
            <summary>
            Gets or sets a value indicating whether to show row numbers and column letters/numbers.
            </summary>
            <value>
            	<c>true</c> to show row numbers and column letters/numbers; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.BlackAndWhite">
            <summary>
            Gets or sets a value indicating whether the worksheet will be printed in black and white.
            </summary>
            <value>
              <c>true</c> if the worksheet will be printed in black and white; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.DraftQuality">
            <summary>
            Gets or sets a value indicating whether the worksheet will be printed in draft quality.
            </summary>
            <value>
              <c>true</c> if the worksheet will be printed in draft quality; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.PageOrder">
            <summary>
            Gets or sets the page order for printing.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.ShowComments">
            <summary>
            Gets or sets how the comments will be printed.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.RowBreaks">
            <summary>
            Gets a list with the row breaks (for printing).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.ColumnBreaks">
            <summary>
            Gets a list with the column breaks (for printing).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.AddHorizontalPageBreak(System.Int32)">
            <summary>
            Adds a horizontal page break after the given row.
            </summary>
            <param name="row">The row to insert the break.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.AddVerticalPageBreak(System.Int32)">
            <summary>
            Adds a vertical page break after the given column.
            </summary>
            <param name="column">The column to insert the break.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.PrintErrorValue">
            <summary>
            Gets or sets how error values will be printed.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPrintAreas.Clear">
            <summary>Removes the print areas from the worksheet.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPrintAreas.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Adds a range to the print areas.</summary>
            <param name="firstCellRow">   The first cell row.</param>
            <param name="firstCellColumn">The first cell column.</param>
            <param name="lastCellRow">    The last cell row.</param>
            <param name="lastCellColumn"> The last cell column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPrintAreas.Add(System.String)">
            <summary>Adds a range to the print areas.</summary>
            <param name="rangeAddress">The range address to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPrintAreas.Add(System.String,System.String)">
            <summary>Adds a range to the print areas.</summary>
            <param name="firstCellAddress">The first cell address.</param>
            <param name="lastCellAddress"> The last cell address.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPrintAreas.Add(ClosedXML.Excel.IXLAddress,ClosedXML.Excel.IXLAddress)">
            <summary>Adds a range to the print areas.</summary>
            <param name="firstCellAddress">The first cell address.</param>
            <param name="lastCellAddress"> The last cell address.</param>
        </member>
        <member name="T:ClosedXML.Excel.Patterns.Quadrant">
            <summary>
            Implementation of QuadTree adapted to Excel worksheet specifics. Differences with the classic implementation
            are that the topmost level is split to 128 square parts (2 columns of 64 blocks, each 8192*8192 cells) and that splitting
            the quadrant onto 4 smaller quadrants does not depend on the number of items in this quadrant. When the range is added to the
            QuadTree it is placed on the bottommost level where it fits to a single quadrant. That means, row-wide and column-wide ranges
            are always placed at the level 0, and the smaller the range is the deeper it goes down the tree. This approach eliminates
            the need of transferring ranges between levels.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.Children">
            <summary>
            Smaller quadrants which the current one is split to. Is NULL until ranges are added to child quadrants.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.Level">
            <summary>
            The level of current quadrant. Top most has level 0, child quadrants has levels (Level + 1).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.MinimumColumn">
            <summary>
            Minimum column included in this quadrant.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.MinimumRow">
            <summary>
            Minimum row included in this quadrant.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.MaximumColumn">
            <summary>
            Maximum column included in this quadrant.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.MaximumRow">
            <summary>
            Maximum row included in this quadrant.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.Ranges">
            <summary>
            Collection of ranges belonging to this quadrant (does not include ranges from child quadrants).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.X">
            <summary>
            The number of current quadrant by horizontal axis.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.Y">
            <summary>
            The number of current quadrant by vertical axis.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.Add(ClosedXML.Excel.IXLAddressable)">
            <summary>
            Add a range to the quadrant or to one of the child quadrants (recursively).
            </summary>
            <returns>True, if range was successfully added, false if it has been added before.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.GetAll">
            <summary>
            Get all ranges from the quadrant and all child quadrants (recursively).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.GetIntersectedRanges(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Get all ranges from the quadrant and all child quadrants (recursively) that intersect the specified address.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.GetIntersectedRanges(ClosedXML.Excel.IXLAddress)">
            <summary>
            Get all ranges from the quadrant and all child quadrants (recursively) that cover the specified address.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.Remove(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Remove the range from the quadrant or from child quadrants (recursively).
            </summary>
            <returns>True if the range was removed, false if it does not exist in the QuadTree.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.RemoveAll(System.Predicate{ClosedXML.Excel.IXLAddressable})">
            <summary>
            Remove all the ranges matching specified criteria from the quadrant and its child quadrants (recursively).
            Don't use it for searching intersections as it would be much less efficient than <see cref="M:ClosedXML.Excel.Patterns.Quadrant.GetIntersectedRanges(ClosedXML.Excel.IXLRangeAddress)"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Patterns.Quadrant.MAX_LEVEL">
            <summary>
            Maximum depth of the QuadTree. Value 10 corresponds to the smallest quadrants having size 16*16 cells.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Patterns.Quadrant._ranges">
            <summary>
            Collection of ranges belonging to the current quadrant (that cannot fit into child quadrants).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.AddInternal(ClosedXML.Excel.IXLAddressable)">
            <summary>
            Add a range to the collection of quadrant's own ranges.
            </summary>
            <returns>True if the range was successfully added, false if it had been added before.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.Covers(ClosedXML.Excel.IXLRangeAddress@)">
            <summary>
            Check if the current quadrant fully covers the specified address.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.Covers(ClosedXML.Excel.IXLAddress@)">
            <summary>
            Check if the current quadrant covers the specified address.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.Intersects(ClosedXML.Excel.IXLRangeAddress@)">
            <summary>
            Check if the current quadrant intersects the specified address.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.CreateChildren">
            <summary>
            Create a collection of child quadrants dividing the current one.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Patterns.Quadrant`1">
            <summary>
            A generic version of <see cref="T:ClosedXML.Excel.Patterns.Quadrant"/>
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotCache">
            <summary>
            A cache of pivot data - essentially a collection of fields and their values that can be
            displayed by a <see cref="T:ClosedXML.Excel.IXLPivotTable"/>. Data for the cache are retrieved from
            an area (a table or a range). The pivot cache data are <strong>cached</strong>, i.e.
            the data in the source are not immediately updated once the data in a worksheet change.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotCache.FieldNames">
            <summary>
            Get names of all fields in the source, in left to right order. Every field name is unique.
            </summary>
            <remarks>
            The field names are case insensitive. The field names of the cached
            source might differ from actual names of the columns
            in the data cells.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotCache.ItemsToRetainPerField">
            <summary>
            Gets the number of unused items in shared items to allow before discarding unused items.
            </summary>
            <remarks>
            Shared items are distinct values of a source field values. Updating them can be expensive
            and this controls, when should the cache be updated. Application-dependent attribute.
            </remarks>
            <value>Default value is <see cref="F:ClosedXML.Excel.XLItemsToRetain.Automatic"/>.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotCache.RefreshDataOnOpen">
            <summary>
            Will Excel refresh the cache when it opens the workbook.
            </summary>
            <value>Default value is <c>false</c>.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotCache.SaveSourceData">
            <summary>
            Should the cached values of the pivot source be saved into the workbook file?
            If source data are not saved, they will have to be refreshed from the source
            reference which might cause a change in the table values.
            </summary>
            <value>Default value is <c>true</c>.</value>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotCache.Refresh">
            <summary>
            Refresh data in the pivot source from the source reference data.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotCache.SetItemsToRetainPerField(ClosedXML.Excel.XLItemsToRetain)">
            <inheritdoc cref="P:ClosedXML.Excel.IXLPivotCache.ItemsToRetainPerField"/>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotCache.SetRefreshDataOnOpen">
            <inheritdoc cref="P:ClosedXML.Excel.IXLPivotCache.RefreshDataOnOpen"/>
            <remarks>Sets the value to <c>true</c>.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotCache.SetRefreshDataOnOpen(System.Boolean)">
            <inheritdoc cref="P:ClosedXML.Excel.IXLPivotCache.RefreshDataOnOpen"/>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotCache.SetSaveSourceData">
            <inheritdoc cref="P:ClosedXML.Excel.IXLPivotCache.SaveSourceData"/>
            <remarks>Sets the value to <c>true</c>.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotCache.SetSaveSourceData(System.Boolean)">
            <inheritdoc cref="P:ClosedXML.Excel.IXLPivotCache.SaveSourceData"/>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotCaches">
            <summary>
            A collection of <see cref="T:ClosedXML.Excel.IXLPivotCache">pivot caches</see>. Pivot cache
            can be added from a <see cref="T:ClosedXML.Excel.IXLRange"/> or a <see cref="T:ClosedXML.Excel.IXLTable"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotCaches.Add(ClosedXML.Excel.IXLRange)">
            <summary>
            Add a new pivot cache.
            </summary>
            <param name="range">Range for which to create the pivot cache.</param>
            <returns>The pivot cache for the range.</returns>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotTable.PivotCache">
            <summary>
            The cache of data for the pivot table. The pivot table is created
            from cached data, not up-to-date data in a worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotTables.Add(System.String,ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLPivotCache)">
            <summary>
            Add a pivot table that will use the pivot cache.
            </summary>
            <param name="name">Name of new pivot table.</param>
            <param name="targetCell">A cell where will the pivot table be have it's left top corner.</param>
            <param name="pivotCache">Pivot cache to use for the pivot table.</param>
            <returns>Added pivot table.</returns>
            <exception cref="T:System.ArgumentException">There already is a pivot table with the same name.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotTables.PivotTable(System.String)">
            <summary>
            Get pivot table with the specified name (case insensitive).
            </summary>
            <param name="name">Name of a pivot table to return.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No such pivot table found.</exception>
        </member>
        <member name="M:ClosedXML.Excel.AbstractPivotFieldReference.Match(ClosedXML.Excel.XLWorkbook.PivotSourceInfo,ClosedXML.Excel.IXLPivotTable)">
            <summary>
              <P>Helper function used during saving to calculate the indices of the filtered values</P>
            </summary>
            <returns>Indices of the filtered values</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotValueStyleFormat.AndWith(ClosedXML.Excel.IXLPivotField,System.Predicate{ClosedXML.Excel.XLCellValue})">
            <summary>
            Adds a further limitation so the <see cref="P:ClosedXML.Excel.IXLPivotStyleFormat.Style"/> is only applied to cells in a pivot table
            that are are within the field that has some values.
            </summary>
            <remarks>
            The pivot style is bound by the field index in a pivot table, not field value. E.g. if field values
            are Jan, Feb and the predicate marks Feb (offset 1) = second field (Feb) will be highlighted.
            If user later reverses order in Excel to Feb, Jan, the style would still apply to the second value - Jan.
            </remarks>
            <param name="field">Only cells in a pivot table under this field will be styled.</param>
            <param name="predicate">A predicate to determine which index of the field should be styled.</param>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotValue">
            <summary>
            A pivot value field, it is basically a specification of how to determine and
            format values from source to display in the pivot table.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotValue.BaseFieldName">
            <summary>
            Specifies the index to the base field when the ShowDataAs calculation is in use.
            Instead of base item, previous or next value can be used through <see cref="P:ClosedXML.Excel.IXLPivotValue.CalculationItem" />
            </summary>
            <remarks>Used only if the value should be showed <b>Show Values As</b> in the value field settings.</remarks>
            <value>
            The name of the column of the relevant base field.
            </value>
            <example>
            Show values as a percent of a specific value of a different field, e.g. as a % of units sold from Q1 (quarts is a base field and Q1 is a base item).
            </example>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotValue.BaseItemValue">
            <summary>
            The value of a base item to calculate a value to show in the pivot table. The base item is selected from values of a base field.
            </summary>
            <remarks>Used only if the value should be showed <b>Show Values As</b> in the value field settings.</remarks>
            <value>
            The value of the referenced base field item.
            </value>
            <example>
            Show values as a percent of a specific value of a different field, e.g. as a % of units sold from Q1 (quarts is a base field and Q1 is a base item).
            </example>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotValueCombination">
            <summary>
            An interface for fluent configuration of how to show <see cref="T:ClosedXML.Excel.IXLPivotValue"/>,
            when the value should be displayed not as a value itself, but in relation to another
            value (e.g. percentage difference in relation to different value).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotValueCombination.AndPrevious">
            <summary>
            The base item value for calculation will be the value of the previous row of base
            field, depending on the order of base field values in a row/column. If there isn't
            a previous value, the same value will be used.
            <para>
            This only affects display how are values displayed, not the values themselves.
            </para>
            <para>
            Example:
            We have a table of sales and a pivot table, where sales are summed per month.
            The months are sorted from Jan to Dec. To display a percentage increase of
            sales per month (the base value is previous month):
            <c>
            IXLPivotValue sales;
            sales.SetSummaryFormula(XLPivotSummary.Sum).ShowAsPercentageDifferenceFrom("Month").AndPrevious();
            </c>
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotCache.CacheId">
            <summary>
            Pivot cache definition id from the file.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotCache.TryGetFieldIndex(System.String,System.Int32@)">
            <summary>
            Try to get a field index for a field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="index">The found index, start at 0.</param>
            <returns>True if source contains the field.</returns>
        </member>
        <member name="T:ClosedXML.Excel.XLItemsToRetain">
            <summary>
            Specifies the number of unused items to allow in a <see cref="T:ClosedXML.Excel.IXLPivotCache"/>
            before discarding unused items.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLItemsToRetain.Automatic">
            <summary>
            The threshold is set automatically based on the number of items.
            </summary>
            <remarks>Default behavior.</remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLItemsToRetain.None">
            <summary>
            When even one item is unused.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLItemsToRetain.Max">
            <summary>
            When all shared items of a filed are unused.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotTables.PivotTable(System.String)">
            <inheritdoc cref="M:ClosedXML.Excel.IXLPivotTables.PivotTable(System.String)"/>
        </member>
        <member name="P:ClosedXML.Excel.IXLElementProtection`1.AllowedElements">
            <summary>Gets or sets the elements that are allowed to be edited by the user, i.e. those that are not protected.</summary>
            <value>The allowed elements.</value>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.AllowElement(`0,System.Boolean)">
            <summary>
            Adds the specified element to the list of allowed elements.
            Beware that if you pass through "None", this will have no effect.
            </summary>
            <param name="element">The element to add</param>
            <param name="allowed">Set to <c>true</c> to allow the element or <c>false</c> to disallow the element</param>
            <returns>The current protection instance</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.AllowEverything">
            <summary>Allows all elements to be edited.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.AllowNone">
            <summary>Allows no elements to be edited. Protects all elements.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.CopyFrom(ClosedXML.Excel.IXLElementProtection{`0})">
            <summary>Copies all the protection settings from a different instance.</summary>
            <param name="protectable">The protectable.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.DisallowElement(`0)">
            <summary>
            Removes the element to the list of allowed elements.
            Beware that if you pass through "None", this will have no effect.
            </summary>
            <param name="element">The element to remove</param>
            <returns>The current protection instance</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.Protect(ClosedXML.Excel.XLProtectionAlgorithm.Algorithm)">
            <summary>Protects this instance without a password.</summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.Protect(System.String,ClosedXML.Excel.XLProtectionAlgorithm.Algorithm)">
            <summary>Protects this instance using the specified password and password hash algorithm.</summary>
            <param name="password">The password.</param>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.Unprotect">
            <summary>Unprotects this instance without a password.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.Unprotect(System.String)">
            <summary>Unprotects this instance using the specified password.</summary>
            <param name="password">The password.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLElementProtection.Algorithm">
            <summary>Gets the algorithm used to hash the password.</summary>
            <value>The algorithm.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLElementProtection.IsPasswordProtected">
            <summary>Gets a value indicating whether this instance is protected with a password.</summary>
            <value>
              <c>true</c> if this instance is password protected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLElementProtection.IsProtected">
            <summary>Gets a value indicating whether this instance is protected, either with or without a password.</summary>
            <value>
              <c>true</c> if this instance is protected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable`2.Protect(`1)">
            <summary>Protects this instance without a password.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable`2.Protect(ClosedXML.Excel.XLProtectionAlgorithm.Algorithm)">
            <summary>Protects this instance without a password.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable`2.Protect(ClosedXML.Excel.XLProtectionAlgorithm.Algorithm,`1)">
            <summary>Protects this instance with the specified password, password hash algorithm and set elements that the user is allowed to change.</summary>
            <param name="algorithm">The algorithm.</param>
            <param name="allowedElements">The allowed elements.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable`2.Protect(System.String,ClosedXML.Excel.XLProtectionAlgorithm.Algorithm)">
            <summary>Protects this instance using the specified password and password hash algorithm.</summary>
            <param name="password">The password.</param>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable`2.Protect(System.String,ClosedXML.Excel.XLProtectionAlgorithm.Algorithm,`1)">
            <summary>Protects this instance with the specified password, password hash algorithm and set elements that the user is allowed to change.</summary>
            <param name="password">The password.</param>
            <param name="algorithm">The algorithm.</param>
            <param name="allowedElements">The allowed elements.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable`2.Unprotect">
            <summary>Unprotects this instance without a password.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable`2.Unprotect(System.String)">
            <summary>Unprotects this instance using the specified password.</summary>
            <param name="password">The password.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLProtectable.IsPasswordProtected">
            <summary>Gets a value indicating whether this instance is protected with a password.</summary>
            <value>
              <c>true</c> if this instance is password protected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLProtectable.IsProtected">
            <summary>Gets a value indicating whether this instance is protected, either with or without a password.</summary>
            <value>
              <c>true</c> if this instance is protected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable.Protect(ClosedXML.Excel.XLProtectionAlgorithm.Algorithm)">
            <summary>Protects this instance without a password.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable.Protect(System.String,ClosedXML.Excel.XLProtectionAlgorithm.Algorithm)">
            <summary>Protects this instance using the specified password and password hash algorithm.</summary>
            <param name="password">The password.</param>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable.Unprotect">
            <summary>Unprotects this instance without a password.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable.Unprotect(System.String)">
            <summary>Unprotects this instance using the specified password.</summary>
            <param name="password">The password.</param>
        </member>
        <member name="F:ClosedXML.Excel.XLWorkbookProtectionElements.Windows">
            <summary>
            The Windows option is available only in Excel 2007, Excel 2010, Excel for Mac 2011, and Excel 2016 for Mac. Select the Windows option if you want to prevent users from moving, resizing, or closing the workbook window, or hide/unhide windows.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Ranges.Index.IXLRangeIndex">
            <summary>
            Interface for the engine aimed to speed-up the search for the range intersections.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Ranges.Index.XLRangeIndex">
            <summary>
            Implementation of <see cref="T:ClosedXML.Excel.Ranges.Index.IXLRangeIndex"/> internally using QuadTree.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Ranges.Index.XLRangeIndex.MinimumCountForIndexing">
            <summary>
            The minimum number of ranges to be included into a QuadTree. Until it is reached the ranges
            are added into a simple list to minimize the overhead of searching intersections on small collections.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Ranges.Index.XLRangeIndex._rangeList">
            <summary>
            A collection of ranges used before the QuadTree is initialized (until <see cref="F:ClosedXML.Excel.Ranges.Index.XLRangeIndex.MinimumCountForIndexing"/>
            is reached.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Ranges.Index.XLRangeIndex`1">
            <summary>
            Generic version of <see cref="T:ClosedXML.Excel.Ranges.Index.XLRangeIndex"/>.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLAddressable">
            <summary>
            A very lightweight interface for entities that have an address as
            a rectangular range.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAddressable.RangeAddress">
            <summary>
              Gets an object with the boundaries of this range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLBaseCollection`2.AddToNamed(System.String)">
            <summary>
            Creates a named range out of these ranges.
            <para>If the named range exists, it will add these ranges to that named range.</para>
            <para>The default scope for the named range is Workbook.</para>
            </summary>
            <param name="rangeName">Name of the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLBaseCollection`2.AddToNamed(System.String,ClosedXML.Excel.XLScope)">
            <summary>
            Creates a named range out of these ranges.
            <para>If the named range exists, it will add these ranges to that named range.</para>
            <param name="rangeName">Name of the range.</param>
            <param name="scope">The scope for the named range.</param>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLBaseCollection`2.AddToNamed(System.String,ClosedXML.Excel.XLScope,System.String)">
            <summary>
            Creates a named range out of these ranges.
            <para>If the named range exists, it will add these ranges to that named range.</para>
            <param name="rangeName">Name of the range.</param>
            <param name="scope">The scope for the named range.</param>
            <param name="comment">The comments for the named range.</param>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLBaseCollection`2.Value">
            <summary>
            Sets the cells' value.
            <para>If the object is an IEnumerable ClosedXML will copy the collection's data into a table starting from each cell.</para>
            <para>If the object is a range ClosedXML will copy the range starting from each cell.</para>
            <para>Setting the value to an object (not IEnumerable/range) will call the object's ToString() method.</para>
            <para>ClosedXML will try to translate it to the corresponding type, if it can't then the value will be left as a string.</para>
            </summary>
            <value>
            The object containing the value(s) to set.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLBaseCollection`2.Cells">
            <summary>
            Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLBaseCollection`2.CellsUsed">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLBaseCollection`2.CellsUsed(System.Boolean)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="includeFormats">if set to <c>true</c> will return all cells with a value or a style different than the default.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLBaseCollection`2.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these ranges.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="T:ClosedXML.Excel.XLTransposeOptions">
            <summary>
            A behavior of extra outside cells for transpose operation. The option
            is meaningful only for transposition of non-squared ranges, because
            squared ranges can always be transposed without effecting outside cells. 
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLTransposeOptions.MoveCells">
            <summary>
            Shift cells of the smaller side to its direction so
            there is a space to transpose other side (e.g. if A1:C5
            range is transposed, move D1:XFD5 are moved 2 columns
            to the right).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLTransposeOptions.ReplaceCells">
            <summary>
            Data of the cells are replaced by the transposed cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Cell(System.Int32,System.Int32)">
            <summary>
            Gets the cell at the specified row and column.
            <para>The cell address is relative to the parent range.</para>
            </summary>
            <param name="row">The cell's row.</param>
            <param name="column">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Cell(System.String)">
            <summary>Gets the cell at the specified address.</summary>
            <para>The cell address is relative to the parent range.</para>
            <param name="cellAddressInRange">The cell address in the parent range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Cell(System.Int32,System.String)">
            <summary>
            Gets the cell at the specified row and column.
            <para>The cell address is relative to the parent range.</para>
            </summary>
            <param name="row">The cell's row.</param>
            <param name="column">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Cell(ClosedXML.Excel.IXLAddress)">
            <summary>Gets the cell at the specified address.</summary>
            <para>The cell address is relative to the parent range.</para>
            <param name="cellAddressInRange">The cell address in the parent range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Column(System.Int32)">
            <summary>
            Gets the specified column of the range.
            </summary>
            <param name="columnNumber">1-based column number relative to the first column of this range.</param>
            <returns>The relevant column</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Column(System.String)">
            <summary>
            Gets the specified column of the range.
            </summary>
            <param name="columnLetter">Column letter.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.FirstColumn(System.Func{ClosedXML.Excel.IXLRangeColumn,System.Boolean})">
            <summary>
            Gets the first column of the range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.FirstColumnUsed(ClosedXML.Excel.XLCellsUsedOptions,System.Func{ClosedXML.Excel.IXLRangeColumn,System.Boolean})">
            <summary>
            Gets the first non-empty column of the range that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
            <param name="predicate">The predicate to choose cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.LastColumn(System.Func{ClosedXML.Excel.IXLRangeColumn,System.Boolean})">
            <summary>
            Gets the last column of the range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.LastColumnUsed(ClosedXML.Excel.XLCellsUsedOptions,System.Func{ClosedXML.Excel.IXLRangeColumn,System.Boolean})">
            <summary>
            Gets the last non-empty column of the range that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
            <param name="predicate">The predicate to choose cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Columns(System.Func{ClosedXML.Excel.IXLRangeColumn,System.Boolean})">
            <summary>
            Gets a collection of all columns in this range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Columns(System.Int32,System.Int32)">
            <summary>
            Gets a collection of the specified columns in this range.
            </summary>
            <param name="firstColumn">The first column to return. 1-based column number relative to the first column of this range.</param>
            <param name="lastColumn">The last column to return. 1-based column number relative to the first column of this range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Columns(System.String,System.String)">
            <summary>
            Gets a collection of the specified columns in this range.
            </summary>
            <param name="firstColumn">The first column to return.</param>
            <param name="lastColumn">The last column to return.</param>
            <returns>The relevant columns</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Columns(System.String)">
            <summary>
            Gets a collection of the specified columns in this range, separated by commas.
            <para>e.g. Columns("G:H"), Columns("10:11,13:14"), Columns("P:Q,S:T"), Columns("V")</para>
            </summary>
            <param name="columns">The columns to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.FindColumn(System.Func{ClosedXML.Excel.IXLRangeColumn,System.Boolean})">
            <summary>
            Returns the first row that matches the given predicate
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.FindRow(System.Func{ClosedXML.Excel.IXLRangeRow,System.Boolean})">
            <summary>
            Returns the first row that matches the given predicate
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.FirstRow(System.Func{ClosedXML.Excel.IXLRangeRow,System.Boolean})">
            <summary>
            Gets the first row of the range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.FirstRowUsed(ClosedXML.Excel.XLCellsUsedOptions,System.Func{ClosedXML.Excel.IXLRangeRow,System.Boolean})">
            <summary>
            Gets the first non-empty row of the range that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
            <param name="predicate">The predicate to choose cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.LastRow(System.Func{ClosedXML.Excel.IXLRangeRow,System.Boolean})">
            <summary>
            Gets the last row of the range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.LastRowUsed(ClosedXML.Excel.XLCellsUsedOptions,System.Func{ClosedXML.Excel.IXLRangeRow,System.Boolean})">
            <summary>
            Gets the last non-empty row of the range that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
            <param name="predicate">The predicate to choose cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Row(System.Int32)">
            <summary>
            Gets the specified row of the range.
            </summary>
            <param name="row">1-based row number relative to the first row of this range.</param>
            <returns>The relevant row</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Rows(System.Int32,System.Int32)">
            <summary>
            Gets a collection of the specified rows in this range.
            </summary>
            <param name="firstRow">The first row to return. 1-based row number relative to the first row of this range.</param>
            <param name="lastRow">The last row to return. 1-based row number relative to the first row of this range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Rows(System.String)">
            <summary>
            Gets a collection of the specified rows in this range, separated by commas.
            <para>e.g. Rows("4:5"), Rows("7:8,10:11"), Rows("13")</para>
            </summary>
            <param name="rows">The rows to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Range(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Returns the specified range.
            </summary>
            <param name="rangeAddress">The range boundaries.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Range(System.String)">
            <summary>Returns the specified range.</summary>
            <para>e.g. Range("A1"), Range("A1:C2")</para>
            <param name="rangeAddress">The range boundaries.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Range(ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLCell)">
            <summary>Returns the specified range.</summary>
            <param name="firstCell">The first cell in the range.</param>
            <param name="lastCell"> The last cell in the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Range(System.String,System.String)">
            <summary>Returns the specified range.</summary>
            <param name="firstCellAddress">The first cell address in the range.</param>
            <param name="lastCellAddress"> The last cell address in the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Range(ClosedXML.Excel.IXLAddress,ClosedXML.Excel.IXLAddress)">
            <summary>Returns the specified range.</summary>
            <param name="firstCellAddress">The first cell address in the range.</param>
            <param name="lastCellAddress"> The last cell address in the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Ranges(System.String)">
            <summary>Returns a collection of ranges, separated by commas.</summary>
            <para>e.g. Ranges("A1"), Ranges("A1:C2"), Ranges("A1:B2,D1:D4")</para>
            <param name="ranges">The ranges to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Range(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Returns the specified range.</summary>
            <param name="firstCellRow">   The first cell's row of the range to return.</param>
            <param name="firstCellColumn">The first cell's column of the range to return.</param>
            <param name="lastCellRow">    The last cell's row of the range to return.</param>
            <param name="lastCellColumn"> The last cell's column of the range to return.</param>
            <returns>.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.RowCount">
            <summary>Gets the number of rows in this range.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.ColumnCount">
            <summary>Gets the number of columns in this range.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.InsertColumnsAfter(System.Int32)">
            <summary>
            Inserts X number of columns to the right of this range.
            <para>All cells to the right of this range will be shifted X number of columns.</para>
            </summary>
            <param name="numberOfColumns">Number of columns to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.InsertColumnsBefore(System.Int32)">
            <summary>
            Inserts X number of columns to the left of this range.
            <para>This range and all cells to the right of this range will be shifted X number of columns.</para>
            </summary>
            <param name="numberOfColumns">Number of columns to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.InsertRowsAbove(System.Int32)">
            <summary>
            Inserts X number of rows on top of this range.
            <para>This range and all cells below this range will be shifted X number of rows.</para>
            </summary>
            <param name="numberOfRows">Number of rows to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.InsertRowsBelow(System.Int32)">
            <summary>
            Inserts X number of rows below this range.
            <para>All cells below this range will be shifted X number of rows.</para>
            </summary>
            <param name="numberOfRows">Number of rows to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Delete(ClosedXML.Excel.XLShiftDeletedCells)">
            <summary>
            Deletes this range and shifts the surrounding cells accordingly.
            </summary>
            <param name="shiftDeleteCells">How to shift the surrounding cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Transpose(ClosedXML.Excel.XLTransposeOptions)">
            <summary>
            Transposes the contents and styles of all cells in this range.
            </summary>
            <param name="transposeOption">How to handle the surrounding cells when transposing the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.AsTable">
            <summary>
            Use this range as a table, but do not add it to the Tables list
            </summary>
            <remarks>
            NOTES:<br/>
                The AsTable method will use the first row of the range as a header row.<br/>
                If this range contains only one row, then an empty data row will be inserted into the returned table.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.AsTable(System.String)">
            <summary>
            Use this range as a table with the passed name, but do not add it to the Tables list
            </summary>
            <param name="name">Table name to be used.</param>
            <remarks>
            NOTES:<br/>
                The AsTable method will use the first row of the range as a header row.<br/>
                If this range contains only one row, then an empty data row will be inserted into the returned table.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this range.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeAddress.ColumnSpan">
            <summary>
            Gets the number of columns in the area covered by the range address.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeAddress.FirstAddress">
            <summary>
            Gets or sets the first address in the range.
            </summary>
            <value>
            The first address.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeAddress.IsValid">
            <summary>
            Gets or sets a value indicating whether this range is valid.
            </summary>
            <value>
            	<c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeAddress.LastAddress">
            <summary>
            Gets or sets the last address in the range.
            </summary>
            <value>
            The last address.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeAddress.NumberOfCells">
            <summary>
            Gets the number of cells in the area covered by the range address.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeAddress.RowSpan">
            <summary>
            Gets the number of rows in the area covered by the range address.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeAddress.AsRange">
            <summary>Allocates the current range address in the internal range repository and returns it</summary>
            <returns>Range of the address or null, if the range is not a valid address.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeAddress.Intersection(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Returns the intersection of this range address with another range address on the same worksheet.
            </summary>
            <param name="otherRangeAddress">The other range address.</param>
            <returns>The intersection's range address</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeAddress.IsEntireColumn">
            <summary>
            Determines whether range address spans the entire column.
            </summary>
            <returns>
              <c>true</c> if is entire column; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeAddress.IsEntireRow">
            <summary>
            Determines whether range address spans the entire row.
            </summary>
            <returns>
              <c>true</c> if is entire row; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeAddress.IsEntireSheet">
            <summary>
            Determines whether the range address spans the entire worksheet.
            </summary>
            <returns>
              <c>true</c> if is entire sheet; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeAddress.Relative(ClosedXML.Excel.IXLRangeAddress,ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Returns a range address so that its offset from the target base address is equal to the offset of the current range address to the source base address.
            For example, if the current range address is D4:E4, the source base address is A1:C3, then the relative address to the target base address B10:D13 is E14:F14
            </summary>
            <param name="sourceRangeAddress">The source base range address.</param>
            <param name="targetRangeAddress">The target base range address.</param>
            <returns>The relative range</returns>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeBase.Value">
            <summary>
            Sets a value to every cell in this range.
            <para>
            Setter will clear a formula, if the cell contains a formula.
            If the value is a text that starts with a single quote, setter will prefix the value with a single quote through
            <see cref="P:ClosedXML.Excel.IXLStyle.IncludeQuotePrefix"/> in Excel too and the value of cell is set to to non-quoted text.
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeBase.FormulaA1">
            <summary>
              Sets the cells' formula with A1 references.
            </summary>
            <value>The formula with A1 references.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeBase.FormulaArrayA1">
            <summary>
            Create an array formula for all cells in the range.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the range overlaps with a table, pivot table, merged cells or partially overlaps another array formula.</exception>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeBase.FormulaR1C1">
            <summary>
              Sets the cells' formula with R1C1 references.
            </summary>
            <value>The formula with R1C1 references.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeBase.ShareString">
            <summary>
              Gets or sets a value indicating whether this cell's text should be shared or not.
            </summary>
            <value>
              If false the cell's text will not be shared and stored as an inline value.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Cells">
            <summary>
              Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.CellsUsed">
            <summary>
              Returns the collection of cells that have a value. Formats are ignored.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.CellsUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Search(System.String,System.Globalization.CompareOptions,System.Boolean)">
            <summary>
            Searches the cells' contents for a given piece of text
            </summary>
            <param name="searchText">The search text.</param>
            <param name="compareOptions">The compare options.</param>
            <param name="searchFormulae">if set to <c>true</c> search formulae instead of cell values.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.FirstCell">
            <summary>
              Returns the first cell of this range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.FirstCellUsed">
            <summary>
              Returns the first non-empty cell with a value of this range. Formats are ignored.
              <para>The cell's address is going to be ([First Row with a value], [First Column with a value])</para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.FirstCellUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the first non-empty cell with a value of this range.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.FirstCellUsed(ClosedXML.Excel.XLCellsUsedOptions,System.Func{ClosedXML.Excel.IXLCell,System.Boolean})">
            <summary>
            Returns the first non-empty cell with a value of this range.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
            <param name="predicate">The predicate used to choose cells</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.LastCell">
            <summary>
              Returns the last cell of this range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.LastCellUsed">
            <summary>
              Returns the last non-empty cell with a value of this range. Formats are ignored.
              <para>The cell's address is going to be ([Last Row with a value], [Last Column with a value])</para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.LastCellUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the last non-empty cell with a value of this range.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Contains(System.String)">
            <summary>
              Determines whether this range contains the specified range (completely).
              <para>For partial matches use the range.Intersects method.</para>
            </summary>
            <param name = "rangeAddress">The range address.</param>
            <returns>
              <c>true</c> if this range contains the specified range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Contains(ClosedXML.Excel.IXLRangeBase)">
            <summary>
              Determines whether this range contains the specified range (completely).
              <para>For partial matches use the range.Intersects method.</para>
            </summary>
            <param name = "range">The range to match.</param>
            <returns>
              <c>true</c> if this range contains the specified range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Intersects(System.String)">
            <summary>
              Determines whether this range intersects the specified range.
              <para>For whole matches use the range.Contains method.</para>
            </summary>
            <param name = "rangeAddress">The range address.</param>
            <returns>
              <c>true</c> if this range intersects the specified range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Intersects(ClosedXML.Excel.IXLRangeBase)">
            <summary>
              Determines whether this range contains the specified range.
              <para>For whole matches use the range.Contains method.</para>
            </summary>
            <param name = "range">The range to match.</param>
            <returns>
              <c>true</c> if this range intersects the specified range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Unmerge">
            <summary>
              Unmerges this range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Merge">
            <summary>
            Merges this range. Only the top-left cell will have a value, other values will be blank.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.AddToNamed(System.String)">
            <summary>
              Creates a named range out of this range.
              <para>If the named range exists, it will add this range to that named range.</para>
              <para>The default scope for the named range is Workbook.</para>
            </summary>
            <param name = "rangeName">Name of the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.AddToNamed(System.String,ClosedXML.Excel.XLScope)">
            <summary>
              Creates a named range out of this range.
              <para>If the named range exists, it will add this range to that named range.</para>
              <param name = "rangeName">Name of the range.</param>
              <param name = "scope">The scope for the named range.</param>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.AddToNamed(System.String,ClosedXML.Excel.XLScope,System.String)">
            <summary>
              Creates a named range out of this range.
              <para>If the named range exists, it will add this range to that named range.</para>
              <param name = "rangeName">Name of the range.</param>
              <param name = "scope">The scope for the named range.</param>
              <param name = "comment">The comments for the named range.</param>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this range.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.DeleteComments">
            <summary>
              Deletes the cell comments from this range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.SetValue(ClosedXML.Excel.XLCellValue)">
            <summary>
            Set value to all cells in the range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.AsRange">
            <summary>
              Converts this object to a range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.IsEntireColumn">
            <summary>
            Determines whether range address spans the entire column.
            </summary>
            <returns>
              <c>true</c> if is entire column; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.IsEntireRow">
            <summary>
            Determines whether range address spans the entire row.
            </summary>
            <returns>
              <c>true</c> if is entire row; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.IsEntireSheet">
            <summary>
            Determines whether the range address spans the entire worksheet.
            </summary>
            <returns>
              <c>true</c> if is entire sheet; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.GetDataValidation">
            <summary>
            Returns a data validation rule assigned to the range, if any, or creates a new instance of data validation rule if no rule exists.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.CreateDataValidation">
            <summary>
            Creates a new data validation rule for the range, replacing the existing one.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Grow">
            <summary>
            Grows this the current range by one cell to each side
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Grow(System.Int32)">
            <summary>
            Grows this the current range by the specified number of cells to each side.
            </summary>
            <param name="growCount">The grow count.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Shrink">
            <summary>
            Shrinks this current range by one cell.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Shrink(System.Int32)">
            <summary>
            Shrinks the current range by the specified number of cells from each side.
            </summary>
            <param name="shrinkCount">The shrink count.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Intersection(ClosedXML.Excel.IXLRangeBase,System.Func{ClosedXML.Excel.IXLCell,System.Boolean},System.Func{ClosedXML.Excel.IXLCell,System.Boolean})">
            <summary>
            Returns the intersection of this range with another range on the same worksheet.
            </summary>
            <param name="otherRange">The other range.</param>
            <param name="thisRangePredicate">Predicate applied to this range's cells.</param>
            <param name="otherRangePredicate">Predicate applied to the other range's cells.</param>
            <returns>The range address of the intersection</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.SurroundingCells(System.Func{ClosedXML.Excel.IXLCell,System.Boolean})">
            <summary>
            Returns the set of cells surrounding the current range.
            </summary>
            <param name="predicate">The predicate to apply on the resulting set of cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Union(ClosedXML.Excel.IXLRangeBase,System.Func{ClosedXML.Excel.IXLCell,System.Boolean},System.Func{ClosedXML.Excel.IXLCell,System.Boolean})">
            <summary>
            Calculates the union of two ranges on the same worksheet.
            </summary>
            <param name="otherRange">The other range.</param>
            <param name="thisRangePredicate">Predicate applied to this range's cells.</param>
            <param name="otherRangePredicate">Predicate applied to the other range's cells.</param>
            <returns>
            The union
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Difference(ClosedXML.Excel.IXLRangeBase,System.Func{ClosedXML.Excel.IXLCell,System.Boolean},System.Func{ClosedXML.Excel.IXLCell,System.Boolean})">
            <summary>
            Returns all cells in the current range that are not in the other range.
            </summary>
            <param name="otherRange">The other range.</param>
            <param name="thisRangePredicate">Predicate applied to this range's cells.</param>
            <param name="otherRangePredicate">Predicate applied to the other range's cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Relative(ClosedXML.Excel.IXLRangeBase,ClosedXML.Excel.IXLRangeBase)">
            <summary>
            Returns a range so that its offset from the target base range is equal to the offset of the current range to the source base range.
            For example, if the current range is D4:E4, the source base range is A1:C3, then the relative range to the target base range B10:D13 is E14:F14
            </summary>
            <param name="sourceBaseRange">The source base range.</param>
            <param name="targetBaseRange">The target base range.</param>
            <returns>The relative range</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.Cell(System.Int32)">
            <summary>
            Gets the cell in the specified row.
            </summary>
            <param name="rowNumber">The cell's row.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.Cells(System.String)">
            <summary>
            Returns the specified group of cells, separated by commas.
            <para>e.g. Cells("1"), Cells("1:5"), Cells("1:2,4:5")</para>
            </summary>
            <param name="cellsInColumn">The column cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.Cells(System.Int32,System.Int32)">
            <summary>
            Returns the specified group of cells.
            </summary>
            <param name="firstRow">The first row in the group of cells to return.</param>
            <param name="lastRow">The last row in the group of cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.InsertColumnsAfter(System.Int32)">
            <summary>
            Inserts X number of columns to the right of this range.
            <para>All cells to the right of this range will be shifted X number of columns.</para>
            </summary>
            <param name="numberOfColumns">Number of columns to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.InsertColumnsBefore(System.Int32)">
            <summary>
            Inserts X number of columns to the left of this range.
            <para>This range and all cells to the right of this range will be shifted X number of columns.</para>
            </summary>
            <param name="numberOfColumns">Number of columns to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.InsertCellsAbove(System.Int32)">
            <summary>
            Inserts X number of cells on top of this column.
            <para>This column and all cells below it will be shifted X number of rows.</para>
            </summary>
            <param name="numberOfRows">Number of cells to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.InsertCellsBelow(System.Int32)">
            <summary>
            Inserts X number of cells below this range.
            <para>All cells below this column will be shifted X number of rows.</para>
            </summary>
            <param name="numberOfRows">Number of cells to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.Delete">
            <summary>
            Deletes this range and shifts the cells at the right.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.Delete(ClosedXML.Excel.XLShiftDeletedCells)">
            <summary>
            Deletes this range and shifts the surrounding cells accordingly.
            </summary>
            <param name="shiftDeleteCells">How to shift the surrounding cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.ColumnNumber">
            <summary>
            Gets this column's number in the range
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.ColumnLetter">
            <summary>
            Gets this column's letter in the range
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this column.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumns.Add(ClosedXML.Excel.IXLRangeColumn)">
            <summary>
            Adds a column range to this group.
            </summary>
            <param name="columRange">The column range to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumns.Cells">
            <summary>
            Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumns.CellsUsed">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumns.CellsUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumns.Delete">
            <summary>
            Deletes all columns and shifts the columns at the right of them accordingly.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumns.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these columns.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Cell(System.Int32)">
            <summary>
            Gets the cell in the specified column.
            </summary>
            <param name="columnNumber">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Cell(System.String)">
            <summary>
            Gets the cell in the specified column.
            </summary>
            <param name="columnLetter">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Cells(System.String)">
            <summary>
            Returns the specified group of cells, separated by commas.
            <para>e.g. Cells("1"), Cells("1:5"), Cells("1:2,4:5")</para>
            </summary>
            <param name="cellsInRow">The row's cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Cells(System.Int32,System.Int32)">
            <summary>
            Returns the specified group of cells.
            </summary>
            <param name="firstColumn">The first column in the group of cells to return.</param>
            <param name="lastColumn">The last column in the group of cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Cells(System.String,System.String)">
            <summary>
            Returns the specified group of cells.
            </summary>
            <param name="firstColumn">The first column in the group of cells to return.</param>
            <param name="lastColumn">The last column in the group of cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.InsertCellsAfter(System.Int32)">
            <summary>
            Inserts X number of cells to the right of this row.
            <para>All cells to the right of this row will be shifted X number of columns.</para>
            </summary>
            <param name="numberOfColumns">Number of cells to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.InsertCellsBefore(System.Int32)">
            <summary>
            Inserts X number of cells to the left of this row.
            <para>This row and all cells to the right of it will be shifted X number of columns.</para>
            </summary>
            <param name="numberOfColumns">Number of cells to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.InsertRowsAbove(System.Int32)">
            <summary>
            Inserts X number of rows on top of this row.
            <para>This row and all cells below it will be shifted X number of rows.</para>
            </summary>
            <param name="numberOfRows">Number of rows to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.InsertRowsBelow(System.Int32)">
            <summary>
            Inserts X number of rows below this row.
            <para>All cells below this row will be shifted X number of rows.</para>
            </summary>
            <param name="numberOfRows">Number of rows to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Delete">
            <summary>
            Deletes this range and shifts the cells below.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Delete(ClosedXML.Excel.XLShiftDeletedCells)">
            <summary>
            Deletes this range and shifts the surrounding cells accordingly.
            </summary>
            <param name="shiftDeleteCells">How to shift the surrounding cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.RowNumber">
            <summary>
            Gets this row's number in the range
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this row.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRows.Add(ClosedXML.Excel.IXLRangeRow)">
            <summary>
            Adds a row range to this group.
            </summary>
            <param name="rowRange">The row range to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRows.Cells">
            <summary>
            Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRows.CellsUsed">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRows.CellsUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRows.Delete">
            <summary>
            Deletes all rows and shifts the rows below them accordingly.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRows.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these rows.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.Add(ClosedXML.Excel.IXLRangeBase)">
            <summary>
            Adds the specified range to this group.
            </summary>
            <param name="range">The range to add to this group.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.Remove(ClosedXML.Excel.IXLRange)">
            <summary>
            Removes the specified range from this group.
            </summary>
            <param name="range">The range to remove from this group.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.RemoveAll(System.Predicate{ClosedXML.Excel.IXLRange},System.Boolean)">
            <summary>
            Removes ranges matching the criteria from the collection, optionally releasing their event handlers.
            </summary>
            <param name="match">Criteria to filter ranges. Only those ranges that satisfy the criteria will be removed.
            Null means the entire collection should be cleared.</param>
            <param name="releaseEventHandlers">Specify whether or not should removed ranges be unsubscribed from
            row/column shifting events. Until ranges are unsubscribed they cannot be collected by GC.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.GetIntersectedRanges(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Filter ranges from a collection that intersect the specified address. Is much more efficient
            that using Linq expression .Where().
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.GetIntersectedRanges(ClosedXML.Excel.IXLAddress)">
            <summary>
            Filter ranges from a collection that intersect the specified address. Is much more efficient
            that using Linq expression .Where().
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.GetIntersectedRanges(ClosedXML.Excel.IXLCell)">
            <summary>
            Filter ranges from a collection that intersect the specified cell. Is much more efficient
            that using Linq expression .Where().
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.CreateDataValidation">
            <summary>
            Creates a new data validation rule for the ranges collection, replacing the existing ones.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.AddToNamed(System.String)">
            <summary>
            Creates a named range out of these ranges.
            <para>If the named range exists, it will add these ranges to that named range.</para>
            <para>The default scope for the named range is Workbook.</para>
            </summary>
            <param name="rangeName">Name of the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.AddToNamed(System.String,ClosedXML.Excel.XLScope)">
            <summary>
            Creates a named range out of these ranges.
            <para>If the named range exists, it will add these ranges to that named range.</para>
            <param name="rangeName">Name of the range.</param>
            <param name="scope">The scope for the named range.</param>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.AddToNamed(System.String,ClosedXML.Excel.XLScope,System.String)">
            <summary>
            Creates a named range out of these ranges.
            <para>If the named range exists, it will add these ranges to that named range.</para>
            <param name="rangeName">Name of the range.</param>
            <param name="scope">The scope for the named range.</param>
            <param name="comment">The comments for the named range.</param>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLRanges.Value">
            <summary>
            Sets the cells' value.
            <para>
            Setter will clear a formula, if the cell contains a formula.
            If the value is a text that starts with a single quote, setter will prefix the value with a single quote through
            <see cref="P:ClosedXML.Excel.IXLStyle.IncludeQuotePrefix"/> in Excel too and the value of cell is set to to non-quoted text.
            </para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.Cells">
            <summary>
            Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.CellsUsed">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.CellsUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these ranges.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.Consolidate">
            <summary>
            Create a new collection of ranges which are consolidated version of source ranges.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeAddress.Normalize">
            <summary>
            Lead a range address to a normal form - when <see cref="P:ClosedXML.Excel.XLRangeAddress.FirstAddress"/> points to the top-left address and
            <see cref="P:ClosedXML.Excel.XLRangeAddress.LastAddress"/> points to the bottom-right address.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeAddress.ContainsWhole(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Does this range contains whole another range?
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeBase.CellValues">
            <summary>
            Return the collection of cell values not initializing empty cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeColumn.#ctor(ClosedXML.Excel.XLRangeParameters)">
            <summary>
            The direct constructor should only be used in <see cref="P:ClosedXML.Excel.XLWorksheet.RangeFactory"/>.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLRangeConsolidationEngine">
            <summary>
            Engine for ranges consolidation. Supports IXLRanges including ranges from either one or multiple worksheets.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLRangeConsolidationEngine.XLRangeConsolidationMatrix">
            <summary>
            Class representing the area covering ranges to be consolidated as a set of bit matrices. Does all the dirty job
            of ranges consolidation.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeConsolidationEngine.XLRangeConsolidationMatrix.#ctor(ClosedXML.Excel.IXLWorksheet,System.Collections.Generic.IEnumerable{ClosedXML.Excel.IXLRange})">
            <summary>
            Constructor.
            </summary>
            <param name="worksheet">Current worksheet.</param>
            <param name="ranges">Ranges to be consolidated. They are expected to belong to the current worksheet, no check is performed.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeConsolidationEngine.XLRangeConsolidationMatrix.GetConsolidatedRanges">
            <summary>
            Get consolidated ranges equivalent to the input ones.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeKey.Equals(ClosedXML.Excel.XLRangeKey)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeKey.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeKey.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeRow.#ctor(ClosedXML.Excel.XLRangeParameters)">
            <summary>
            The direct constructor should only be used in <see cref="P:ClosedXML.Excel.XLWorksheet.RangeFactory"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLRanges._indexes">
            <summary>
            Normally, XLRanges collection includes ranges from a single worksheet, but not necessarily.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRanges.RemoveAll(System.Predicate{ClosedXML.Excel.IXLRange},System.Boolean)">
            <summary>
            Removes ranges matching the criteria from the collection, optionally releasing their event handlers.
            </summary>
            <param name="match">Criteria to filter ranges. Only those ranges that satisfy the criteria will be removed.
            Null means the entire collection should be cleared.</param>
            <param name="releaseEventHandlers">Specify whether or not should removed ranges be unsubscribed from
            row/column shifting events. Until ranges are unsubscribed they cannot be collected by GC.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLRanges.GetIntersectedRanges(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Filter ranges from a collection that intersect the specified address. Is much more efficient
            that using Linq expression .Where().
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRanges.GetIntersectedRanges(ClosedXML.Excel.IXLAddress)">
            <summary>
            Filter ranges from a collection that intersect the specified address. Is much more efficient
            that using Linq expression .Where().
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLFormattedText`1.CopyFrom(ClosedXML.Excel.IXLFormattedText{`0})">
            <summary>
            Copy the text and formatting from the original text.
            </summary>
            <param name="original">Original to copy from.</param>
            <returns>This text.</returns>
        </member>
        <member name="P:ClosedXML.Excel.IXLRichString.FontScheme">
            <summary>
            Determines a theme font scheme the rich string belongs to. If the string belongs
            to a scheme and user changes theme in Excel, the font of the string will switch
            to the new theme font.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRichString.SetFontScheme(ClosedXML.Excel.XLFontScheme)">
            <inheritdoc cref="P:ClosedXML.Excel.IXLRichString.FontScheme"/>
        </member>
        <member name="P:ClosedXML.Excel.IXLRow.Height">
            <summary>
            Gets or sets the height of this row.
            </summary>
            <value>
            The width of this row in points.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.ClearHeight">
            <summary>
            Clears the height for the row and defaults it to the spreadsheet row height.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Delete">
            <summary>
            Deletes this row and shifts the rows below this one accordingly.
            </summary>
            <remarks>Don't use in a loop due to poor performance. Use <see cref="M:ClosedXML.Excel.IXLRange.Delete(ClosedXML.Excel.XLShiftDeletedCells)"/> instead.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.RowNumber">
            <summary>
            Gets this row's number
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.InsertRowsBelow(System.Int32)">
            <summary>
            Inserts X number of rows below this one.
            <para>All rows below will be shifted accordingly.</para>
            </summary>
            <param name="numberOfRows">The number of rows to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.InsertRowsAbove(System.Int32)">
            <summary>
            Inserts X number of rows above this one.
            <para>This row and all below will be shifted accordingly.</para>
            </summary>
            <param name="numberOfRows">The number of rows to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.AdjustToContents(System.Int32)">
            <summary>
            Adjusts the height of the row based on its contents, starting from the startColumn.
            </summary>
            <param name="startColumn">The column to start calculating the row height.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.AdjustToContents(System.Int32,System.Int32)">
            <summary>
            Adjusts the height of the row based on its contents, starting from the startColumn and ending at endColumn.
            </summary>
            <param name="startColumn">The column to start calculating the row height.</param>
            <param name="endColumn">The column to end calculating the row height.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.AdjustToContents(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Adjust height of the column according to the content of the cells.
            </summary>
            <param name="startColumn">Number of a first column whose content is considered.</param>
            <param name="endColumn">Number of a last column whose content is considered.</param>
            <param name="minHeightPt">Minimum height of adjusted column, in points.</param>
            <param name="maxHeightPt">Maximum height of adjusted column, in points.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Hide">
            <summary>Hides this row.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Unhide">
            <summary>Unhides this row.</summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLRow.IsHidden">
            <summary>
            Gets a value indicating whether this row is hidden or not.
            </summary>
            <value>
              <c>true</c> if this row is hidden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLRow.OutlineLevel">
            <summary>
            Gets or sets the outline level of this row.
            </summary>
            <value>
            The outline level of this row.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Group">
            <summary>
            Adds this row to the next outline level (Increments the outline level for this row by 1).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Group(System.Boolean)">
            <summary>
            Adds this row to the next outline level (Increments the outline level for this row by 1).
            </summary>
            <param name="collapse">If set to <c>true</c> the row will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Group(System.Int32)">
            <summary>
            Sets outline level for this row.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Group(System.Int32,System.Boolean)">
            <summary>
            Sets outline level for this row.
            </summary>
            <param name="outlineLevel">The outline level.</param>
            <param name="collapse">If set to <c>true</c> the row will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Ungroup">
            <summary>
            Adds this row to the previous outline level (decrements the outline level for this row by 1).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Ungroup(System.Boolean)">
            <summary>
            Adds this row to the previous outline level (decrements the outline level for this row by 1).
            </summary>
            <param name="fromAll">If set to <c>true</c> it will remove this row from all outline levels.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Collapse">
            <summary>
            Show this row as collapsed.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Cell(System.Int32)">
            <summary>
            Gets the cell in the specified column.
            </summary>
            <param name="columnNumber">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Cell(System.String)">
            <summary>
            Gets the cell in the specified column.
            </summary>
            <param name="columnLetter">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Cells(System.String)">
            <summary>
            Returns the specified group of cells, separated by commas.
            <para>e.g. Cells("1"), Cells("1:5"), Cells("1,3:5")</para>
            </summary>
            <param name="cellsInRow">The row's cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Cells(System.Int32,System.Int32)">
            <summary>
            Returns the specified group of cells.
            </summary>
            <param name="firstColumn">The first column in the group of cells to return.</param>
            <param name="lastColumn">The last column in the group of cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Cells(System.String,System.String)">
            <summary>
            Returns the specified group of cells.
            </summary>
            <param name="firstColumn">The first column in the group of cells to return.</param>
            <param name="lastColumn">The last column in the group of cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Expand">
            <summary>Expands this row (if it's collapsed).</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.AddHorizontalPageBreak">
            <summary>
            Adds a horizontal page break after this row.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this row.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLRows.Height">
            <summary>
            Sets the height of all rows.
            </summary>
            <value>
            The height of all rows.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Delete">
            <summary>
            Deletes all rows and shifts the rows below them accordingly.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.AdjustToContents">
            <summary>
            Adjusts the height of all rows based on its contents.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.AdjustToContents(System.Int32)">
            <summary>
            Adjusts the height of all rows based on its contents, starting from the startColumn.
            </summary>
            <param name="startColumn">The column to start calculating the row height.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.AdjustToContents(System.Int32,System.Int32)">
            <summary>
            Adjusts the height of all rows based on its contents, starting from the startColumn and ending at endColumn.
            </summary>
            <param name="startColumn">The column to start calculating the row height.</param>
            <param name="endColumn">The column to end calculating the row height.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Hide">
            <summary>
            Hides all rows.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Unhide">
            <summary>Unhides all rows.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Group">
            <summary>
            Increments the outline level of all rows by 1.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Group(System.Boolean)">
            <summary>
            Increments the outline level of all rows by 1.
            </summary>
            <param name="collapse">If set to <c>true</c> the rows will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Group(System.Int32)">
            <summary>
            Sets outline level for all rows.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Group(System.Int32,System.Boolean)">
            <summary>
            Sets outline level for all rows.
            </summary>
            <param name="outlineLevel">The outline level.</param>
            <param name="collapse">If set to <c>true</c> the rows will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Ungroup">
            <summary>
            Decrements the outline level of all rows by 1.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Ungroup(System.Boolean)">
            <summary>
            Decrements the outline level of all rows by 1.
            </summary>
            <param name="fromAll">If set to <c>true</c> it will remove the rows from all outline levels.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Collapse">
            <summary>
            Show all rows as collapsed.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Expand">
            <summary>Expands all rows (if they're collapsed).</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Cells">
            <summary>
            Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.CellsUsed">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.CellsUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.AddHorizontalPageBreaks">
            <summary>
            Adds a horizontal page break after these rows.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these rows.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="F:ClosedXML.Excel.XLRow._flags">
            <summary>
            Don't use directly, use properties.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRow.#ctor(ClosedXML.Excel.XLWorksheet,System.Int32)">
            <summary>
            The direct constructor should only be used in <see cref="P:ClosedXML.Excel.XLWorksheet.RangeFactory"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLRow.DyDescent">
            <summary>
            Distance in pixels from the bottom of the cells in the current row to the typographical
            baseline of the cell content if, hypothetically, the zoom level for the sheet containing
            this row is 100 percent and the cell has bottom-alignment formatting.
            </summary>
            <remarks>
            If the attribute is set, it sets customHeight to true even if the customHeight is explicitly
            set to false. Custom height means no auto-sizing by Excel on load, so if row has this
            attribute, it stops Excel from auto-sizing the height of a row to fit the content on load.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLRow.ShowPhonetic">
            <summary>
            Should cells in the row display phonetic? This doesn't actually affect whether the phonetic are
            shown in the row, that depends entirely on the <see cref="P:ClosedXML.Excel.IXLCell.ShowPhonetic"/> property
            of a cell. This property determines whether a new cell in the row will have it's phonetic turned on
            (and also the state of the "Show or hide phonetic" in Excel when whole row is selected).
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLRow.HeightChanged">
            <summary>
            Does row have an individual height or is it derived from the worksheet <see cref="P:ClosedXML.Excel.XLWorksheet.RowHeight"/>?
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLRow.XlRowFlags">
            <summary>
            Flag enum to save space, instead of wasting byte for each flag.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRows.#ctor(ClosedXML.Excel.XLWorksheet,ClosedXML.Excel.XLStyleValue,System.Collections.Generic.IEnumerable{ClosedXML.Excel.XLRow})">
            <summary>
            Create a new instance of <see cref="T:ClosedXML.Excel.XLRows"/>.
            </summary>
            <param name="worksheet">If worksheet is specified it means that the created instance represents
            all rows on a worksheet so changing its height will affect all rows.</param>
            <param name="defaultStyle">Default style to use when initializing child entries.</param>
            <param name="lazyEnumerable">A predefined enumerator of <see cref="T:ClosedXML.Excel.XLRow"/> to support lazy initialization.</param>
        </member>
        <member name="P:ClosedXML.Excel.SaveOptions.EvaluateFormulasBeforeSaving">
            <summary>
            Evaluate a cells with a formula and save the calculated value along with the formula.
            <list type="bullet">
            <item>
              True - formulas are evaluated and the calculated values are saved to the file.
              If evaluation of a formula throws an exception, value is not saved but file is still saved.
            </item>
            <item>
              False (default) - formulas are not evaluated and the formula cells don't have their values saved to the file.
            </item>
            </list>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.SaveOptions.FilterPrivacy">
            <summary>
            Gets or sets the filter privacy flag. Set to null to leave the current property in saved workbook unchanged
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSparkline.#ctor(ClosedXML.Excel.IXLSparklineGroup,ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLRange)">
            <summary>
            Create a new sparkline
            </summary>
            <param name="sparklineGroup">The sparkline group to add the sparkline to</param>
            <param name="cell">The cell to place the sparkline in</param>
            <param name="sourceData">The range the sparkline gets data from</param>
        </member>
        <member name="P:ClosedXML.Excel.XLSparklineGroup.Worksheet">
            <summary>
            The worksheet this sparkline group is associated with
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.#ctor(ClosedXML.Excel.IXLWorksheet,ClosedXML.Excel.IXLSparklineGroup)">
            <summary>
            Add a new sparkline group copied from an existing sparkline group to the specified worksheet
            </summary>
            <param name="targetWorksheet">The worksheet the sparkline group is being added to</param>
            <param name="copyFrom">The sparkline group to copy from</param>
            <returns>The new sparkline group added</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.#ctor(ClosedXML.Excel.IXLWorksheet,System.String,System.String)">
            <summary>
            Add a new sparkline group copied from an existing sparkline group to the specified worksheet
            </summary>
            <returns>The new sparkline group added</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.#ctor(ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLRange)">
            <summary>
            Add a new sparkline group copied from an existing sparkline group to the specified worksheet
            </summary>
            <returns>The new sparkline group added</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.#ctor(ClosedXML.Excel.IXLRange,ClosedXML.Excel.IXLRange)">
            <summary>
            Add a new sparkline group copied from an existing sparkline group to the specified worksheet
            </summary>
            <returns>The new sparkline group added</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.Add(ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLRange)">
            <summary>
            Add a sparkline to the group.
            </summary>
            <param name="location">The cell to add sparklines to. If it already contains a sparkline
            it will be replaced.</param>
            <param name="sourceData">The range the sparkline gets data from</param>
            <returns>A newly created sparkline.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.CopyFrom(ClosedXML.Excel.IXLSparklineGroup)">
            <summary>
            Copy the details from a specified sparkline group
            </summary>
            <param name="sparklineGroup">The sparkline group to copy from</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.CopyTo(ClosedXML.Excel.IXLWorksheet)">
            <summary>
            Copy this sparkline group to the specified worksheet
            </summary>
            <param name="targetSheet">The worksheet to copy this sparkline group to</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.Remove(ClosedXML.Excel.IXLCell)">
            <summary>
            Remove all sparklines in the specified cell from this group
            </summary>
            <param name="cell">The cell to remove sparklines from</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.Remove(ClosedXML.Excel.IXLSparkline)">
            <summary>
            Remove the sparkline from this group
            </summary>
            <param name="sparkline"></param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.RemoveAll">
            <summary>
            Remove all sparklines from this group
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.#ctor(ClosedXML.Excel.IXLWorksheet)">
            <summary>
            Add a new sparkline group to the specified worksheet
            </summary>
            <param name="targetWorksheet">The worksheet the sparkline group is being added to</param>
            <returns>The new sparkline group added</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.Add">
            <summary>
            Add empty sparkline group.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.Add(ClosedXML.Excel.IXLSparklineGroup)">
            <summary>
            Add the sparkline group to the collection.
            </summary>
            <param name="sparklineGroup">The sparkline group to add to the collection</param>
            <returns>The same sparkline group</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.AddCopy(ClosedXML.Excel.IXLSparklineGroup,ClosedXML.Excel.IXLWorksheet)">
            <summary>
            Add a copy of an existing sparkline group to the specified worksheet
            </summary>
            <param name="sparklineGroupToCopy">The sparkline group to copy</param>
            <param name="targetWorksheet">The worksheet the sparkline group is being added to</param>
            <returns>The new sparkline group added</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.CopyTo(ClosedXML.Excel.IXLWorksheet)">
            <summary>
            Copy this sparkline group to a different worksheet
            </summary>
            <param name="targetSheet">The worksheet to copy the sparkline group to</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.GetSparkline(ClosedXML.Excel.IXLCell)">
            <summary>
            Search for the first sparkline that is in the specified cell
            </summary>
            <param name="cell">The cell to find the sparkline for</param>
            <returns>The sparkline in the cell or null if no sparklines are found</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.GetSparklines(ClosedXML.Excel.IXLRangeBase)">
            <summary>
            Find all sparklines located in a given range
            </summary>
            <param name="searchRange">The range to search</param>
            <returns>The sparkline in the cell or null if no sparklines are found</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.Remove(ClosedXML.Excel.IXLCell)">
            <summary>
            Remove all sparklines in the specified cell
            </summary>
            <param name="cell">The cell to remove sparklines from</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.Remove(ClosedXML.Excel.IXLSparklineGroup)">
            <summary>
            Remove the sparkline group from the worksheet
            </summary>
            <param name="sparklineGroup">The sparkline group to remove</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.Remove(ClosedXML.Excel.IXLSparkline)">
            <summary>
            Remove the sparkline from the worksheet
            </summary>
            <param name="sparkline">The sparkline to remove</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.RemoveAll">
            <summary>
            Remove all sparkline groups and their contents from the worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.ShiftColumns(ClosedXML.Excel.XLSheetRange,System.Int32)">
            <summary>
            Shift address of all sparklines to reflect inserted columns before a range.
            </summary>
            <param name="shiftedRange">Range before which will the columns be inserted. Has same worksheet.</param>
            <param name="numberOfColumns">How many columns, can be positive or negative number.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.ShiftRows(ClosedXML.Excel.XLSheetRange,System.Int32)">
            <summary>
            Shift address of all sparklines to reflect inserted rows before a range.
            </summary>
            <param name="shiftedRange">Range before which will the rows be inserted. Has same worksheet.</param>
            <param name="numberOfRows">How many rows, can be positive or negative number.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineStyle.op_Inequality(ClosedXML.Excel.XLSparklineStyle,ClosedXML.Excel.XLSparklineStyle)">
            <summary>Returns a value that indicates whether two <see cref="T:ClosedXML.Excel.XLSparklineStyle" /> objects have different values.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineStyle.op_Equality(ClosedXML.Excel.XLSparklineStyle,ClosedXML.Excel.XLSparklineStyle)">
            <summary>Returns a value that indicates whether the values of two <see cref="T:ClosedXML.Excel.XLSparklineStyle" /> objects are equal.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineStyle.Equals(ClosedXML.Excel.XLSparklineStyle)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineStyle.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineStyle.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="F:ClosedXML.Excel.XLColor._paletteEntries">
            <summary>
            VML palette entries from MS-OI29500. Excel uses Windows system color scheme to determine the actual colors of a palette
            entry, but we have no way to get them. Win10 doesn't even have a tool, use Classic Color Panel. We will use the default
            values that are default on Windows.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLColor.FromRgb(System.Int32)">
            <summary>
            Create a color from RBG hexa number. Alpha will be always set to full opacity.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLColor.FromVmlColor(System.String)">
            <summary>
            Parse VML ST_ColorType type from ECMA-376, Part 4 §20.1.2.3.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.Horizontal">
            <summary>
            Gets or sets the cell's horizontal alignment.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.Vertical">
            <summary>
            Gets or sets the cell's vertical alignment.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.Indent">
            <summary>
            Gets or sets the cell's text indentation.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.JustifyLastLine">
            <summary>
            Gets or sets whether the cell's last line is justified or not.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.ReadingOrder">
            <summary>
            Gets or sets the cell's reading order.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.RelativeIndent">
            <summary>
            Gets or sets the cell's relative indent.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.ShrinkToFit">
            <summary>
            Gets or sets whether the cell's font size should decrease to fit the contents.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.TextRotation">
            <summary>
            Gets or sets the cell's text rotation in degrees. Allowed values are -90
            (text is rotated clockwise) to 90 (text is rotated counterclockwise) and
            255 for vertical layout of a text.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.WrapText">
            <summary>
            Gets or sets whether the cell's text should wrap if it doesn't fit.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.TopToBottom">
            <summary>
            Gets or sets whether the cell's text should be displayed from to to bottom
            <para>(as opposed to the normal left to right).</para>
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Ansi">
            <summary>
            ASCII character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Default">
            <summary>
            System default character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Symbol">
            <summary>
            Symbol character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Mac">
            <summary>
            Characters used by Macintosh.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.ShiftJIS">
            <summary>
            Japanese character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Hangul">
            <summary>
            Korean character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Hangeul">
            <summary>
            Another common spelling of the Korean character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Johab">
            <summary>
            Korean character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.GB2312">
            <summary>
            Chinese character set used in mainland China.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.ChineseBig5">
            <summary>
            Chinese character set used mostly in Hong Kong SAR and Taiwan.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Greek">
            <summary>
            Greek character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Turkish">
            <summary>
            Turkish character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Vietnamese">
            <summary>
            Vietnamese character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Hebrew">
            <summary>
            Hebrew character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Arabic">
            <summary>
            Arabic character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Baltic">
            <summary>
            Baltic character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Russian">
            <summary>
            Russian character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Thai">
            <summary>
            Thai character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.EastEurope">
            <summary>
            Eastern European character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Oem">
            <summary>
            Extended ASCII character set used with disk operating system (DOS) and some Microsoft Windows fonts.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLFontScheme">
            <summary>
            A font theme scheme. Theme has categories of fonts and when the theme changes, texts that are associated with
            the particular theme scheme are switched to a font of a new theme.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontScheme.None">
            <summary>
            Not a part of theme scheme.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontScheme.Major">
            <summary>
            A major font of a theme, generally used for headings.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontScheme.Minor">
            <summary>
            A minor font of a theme, generally used to body and paragraphs.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLStyle.IncludeQuotePrefix">
            <summary>
            Should the text values of a cell saved to the file be prefixed by a quote (<c>'</c>) character?
            Has no effect if cell values is not a <see cref="F:ClosedXML.Excel.XLDataType.Text"/>. Doesn't affect values during runtime,
            text values are returned without quote.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLStylized.StyleValue">
            <summary>
            Immutable style
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLAlignment.#ctor(ClosedXML.Excel.XLStyle,ClosedXML.Excel.XLAlignmentValue)">
            <summary>
            Create an instance of XLAlignment initializing it with the specified value.
            </summary>
            <param name="style">Style to attach the new instance to.</param>
            <param name="value">Style value to use.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLBorder.#ctor(ClosedXML.Excel.IXLStylized,ClosedXML.Excel.XLStyle,ClosedXML.Excel.XLBorderValue)">
            <summary>
            Create an instance of XLBorder initializing it with the specified value.
            </summary>
            <param name="container">Container the border is applied to.</param>
            <param name="style">Style to attach the new instance to.</param>
            <param name="value">Style value to use.</param>
        </member>
        <member name="T:ClosedXML.Excel.XLBorder.RestoreOutsideBorder">
            <summary>
            Helper class that remembers outside border state before editing (in constructor) and restore afterwards (on disposing).
            It presumes that size of the range does not change during the editing, else it will fail.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLFill.#ctor(ClosedXML.Excel.XLStyle,ClosedXML.Excel.XLFillValue)">
            <summary>
            Create an instance of XLFill initializing it with the specified value.
            </summary>
            <param name="style">Style to attach the new instance to.</param>
            <param name="value">Style value to use.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLFont.#ctor(ClosedXML.Excel.XLStyle,ClosedXML.Excel.XLFontValue)">
            <summary>
            Create an instance of XLFont initializing it with the specified value.
            </summary>
            <param name="style">Style to attach the new instance to.</param>
            <param name="value">Style value to use.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLNumberFormat.#ctor(ClosedXML.Excel.XLStyle,ClosedXML.Excel.XLNumberFormatValue)">
            <summary>
            Create an instance of XLNumberFormat initializing it with the specified value.
            </summary>
            <param name="style">Style to attach the new instance to.</param>
            <param name="value">Style value to use.</param>
        </member>
        <member name="F:ClosedXML.Excel.XLNumberFormatValue.DefaultKey">
            <summary>
            <em>General</em> number format.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLNumberFormatValue.NumberFormatId">
            <summary>
            Id of the number format. Every workbook has <see cref="F:ClosedXML.Excel.XLConstants.NumberOfBuiltInStyles"/>
            built-int formats that start at 0 (<em>General</em> format). The built-int formats are
            not explicitly written and might differ depending on culture. Custom number formats
            have a valid <see cref="P:ClosedXML.Excel.XLNumberFormatValue.Format"/> and the id is <c>-1</c>.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPredefinedFormat">
            <summary>
            Reference point of date/number formats available.
            See more at: https://msdn.microsoft.com/en-us/library/documentformat.openxml.spreadsheet.numberingformat.aspx
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPredefinedFormat.General">
            <summary>
            General
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.General">
            <summary>
            General
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.Integer">
            <summary>
            0
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.Precision2">
            <summary>
            0.00
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.IntegerWithSeparator">
            <summary>
            #,##0
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.Precision2WithSeparator">
            <summary>
            #,##0.00
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.PercentInteger">
            <summary>
            0%
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.PercentPrecision2">
            <summary>
            0.00%
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.ScientificPrecision2">
            <summary>
            0.00E+00
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.FractionPrecision1">
            <summary>
            # ?/?
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.FractionPrecision2">
            <summary>
            # ??/??
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.IntegerWithSeparatorAndParens">
            <summary>
            #,##0 ,(#,##0)
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.IntegerWithSeparatorAndParensRed">
            <summary>
            #,##0 ,[Red](#,##0)
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.Precision2WithSeparatorAndParens">
            <summary>
            #,##0.00,(#,##0.00)
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.Precision2WithSeparatorAndParensRed">
            <summary>
            #,##0.00,[Red](#,##0.00)
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.ScientificUpToHundredsAndPrecision1">
            <summary>
            ##0.0E+0
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.Text">
            <summary>
            @
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.General">
            <summary>
            General
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.DayMonthYear4WithSlashes">
            <summary>
            d/m/yyyy
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.DayMonthAbbrYear2WithDashes">
            <summary>
            d-mmm-yy
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.DayMonthAbbrWithDash">
            <summary>
            d-mmm
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.MonthAbbrYear2WithDash">
            <summary>
            mmm-yy
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.Hour12MinutesAmPm">
            <summary>
            h:mm tt
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.Hour12MinutesSecondsAmPm">
            <summary>
            h:mm:ss tt
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.Hour24Minutes">
            <summary>
            H:mm
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.Hour24MinutesSeconds">
            <summary>
            H:mm:ss
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.MonthDayYear4WithDashesHour24Minutes">
            <summary>
            m/d/yyyy H:mm
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.MinutesSeconds">
            <summary>
            mm:ss
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.Hour12MinutesSeconds">
            <summary>
            [h]:mm:ss
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.MinutesSecondsMillis1">
            <summary>
            mmss.0
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.Text">
            <summary>
            @
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLProtection.#ctor(ClosedXML.Excel.XLStyle,ClosedXML.Excel.XLProtectionValue)">
            <summary>
            Create an instance of XLProtection initializing it with the specified value.
            </summary>
            <param name="style">Style to attach the new instance to.</param>
            <param name="value">Style value to use.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLStyle.#ctor(ClosedXML.Excel.XLStyleValue)">
            <summary>
            To initialize XLStyle.Default only
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLStylizedBase">
            <summary>
            Base class for any workbook element that has or may have a style.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLStylizedBase.StyleValue">
            <summary>
            Read-only style property.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLStylizedBase.Style">
            <summary>
            Editable style of the workbook element. Modification of this property DOES affect styles of child objects as well - they will
            be changed accordingly. Accessing this property causes a new <see cref="T:ClosedXML.Excel.XLStyle"/> instance generated so use this property
            with caution. If you need only _read_ the style consider using <see cref="P:ClosedXML.Excel.XLStylizedBase.StyleValue"/> property instead.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLStylizedBase.InnerStyle">
            <summary>
            Editable style of the workbook element. Modification of this property DOES NOT affect styles of child objects.
            Accessing this property causes a new <see cref="T:ClosedXML.Excel.XLStyle"/> instance generated so use this property with caution. If you need
            only _read_ the style consider using <see cref="P:ClosedXML.Excel.XLStylizedBase.StyleValue"/> property instead.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLStylizedBase.Children">
            <summary>
            Get a collection of stylized entities which current entity's style changes should be propagated to.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLStylizedBase.SetStyle(ClosedXML.Excel.XLStyleValue,System.Boolean)">
            <summary>
            Apply specified style to the container.
            </summary>
            <param name="value">Style to apply.</param>
            <param name="propagate">Whether or not propagate the style to inner ranges.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLTable.Name">
            <summary>
            Change the name of a table. Structural references to the table are not updated.
            </summary>
            <exception cref="T:System.ArgumentException">If the new table name is already used by other table in the sheet.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this table.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.AppendData(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Appends the IEnumerable data elements and returns the range of the new rows.
            </summary>
            <param name="data">The IEnumerable data.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The range of the new rows.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.AppendData(System.Collections.IEnumerable,System.Boolean,System.Boolean)">
            <summary>
            Appends the IEnumerable data elements and returns the range of the new rows.
            </summary>
            <param name="data">The IEnumerable data.</param>
            <param name="transpose">if set to <c>true</c> the data will be transposed before inserting.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The range of the new rows.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.AppendData(System.Data.DataTable,System.Boolean)">
            <summary>
            Appends the data of a data table and returns the range of the new rows.
            </summary>
            <param name="dataTable">The data table.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The range of the new rows.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.AppendData``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Appends the IEnumerable data elements and returns the range of the new rows.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The table data.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The range of the new rows.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.ReplaceData(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Replaces the IEnumerable data elements and returns the table's data range.
            </summary>
            <param name="data">The IEnumerable data.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The table's data range.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.ReplaceData(System.Collections.IEnumerable,System.Boolean,System.Boolean)">
            <summary>
            Replaces the IEnumerable data elements and returns the table's data range.
            </summary>
            <param name="data">The IEnumerable data.</param>
            <param name="transpose">if set to <c>true</c> the data will be transposed before inserting.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The table's data range.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.ReplaceData(System.Data.DataTable,System.Boolean)">
            <summary>
            Replaces the data from the records of a data table and returns the table's data range.
            </summary>
            <param name="dataTable">The data table.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The table's data range.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.ReplaceData``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Replaces the IEnumerable data elements as a table and the table's data range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The table data.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The table's data range.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Resize(ClosedXML.Excel.IXLRange)">
            <summary>
            Resizes the table to the specified range address.
            </summary>
            <param name="range">The new table range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Resize(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Resizes the table to the specified range address.
            </summary>
            <param name="rangeAddress">The range boundaries.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Resize(System.String)">
            <summary>
            Resizes the table to the specified range address.
            </summary>
            <param name="rangeAddress">The range boundaries.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Resize(ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLCell)">
            <summary>
            Resizes the table to the specified range.
            </summary>
            <param name="firstCell">The first cell in the range.</param>
            <param name="lastCell">The last cell in the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Resize(System.String,System.String)">
            <summary>
            Resizes the table to the specified range.
            </summary>
            <param name="firstCellAddress">The first cell address in the worksheet.</param>
            <param name="lastCellAddress">The last cell address in the worksheet.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Resize(ClosedXML.Excel.IXLAddress,ClosedXML.Excel.IXLAddress)">
            <summary>
            Resizes the table to the specified range.
            </summary>
            <param name="firstCellAddress">The first cell address in the worksheet.</param>
            <param name="lastCellAddress">The last cell address in the worksheet.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes the table to the specified range.
            </summary>
            <param name="firstCellRow">The first cell's row of the range to return.</param>
            <param name="firstCellColumn">The first cell's column of the range to return.</param>
            <param name="lastCellRow">The last cell's row of the range to return.</param>
            <param name="lastCellColumn">The last cell's column of the range to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.AsDynamicEnumerable">
            <summary>
            Converts the table to an enumerable of dynamic objects
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.AsNativeDataTable">
            <summary>
            Converts the table to a standard .NET System.Data.DataTable
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.Column">
            <summary>
            Gets the corresponding column for this table field.
            Includes the header and footer cells
            </summary>
            <value>
            The column.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.DataCells">
            <summary>
            Gets the collection of data cells for this field
            Excludes the header and footer cells
            </summary>
            <value>
            The data cells
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.TotalsCell">
            <summary>
            Gets the footer cell for the table field. 
            </summary>
            <value>
            The footer cell. <c>null</c>, if the table
            doesn't have set <see cref="P:ClosedXML.Excel.IXLTable.ShowTotalsRow"/>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.HeaderCell">
            <summary>
            Gets the header cell for the table field.
            </summary>
            <value>
            The header cell.<c>null</c>, if the table
            doesn't have set <see cref="P:ClosedXML.Excel.IXLTable.ShowHeaderRow"/>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.Index">
            <summary>
            Gets the index of the column (0-based).
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.Name">
            <summary>
            Gets or sets the name/header of this table field.
            The corresponding header cell's value will change if you set this.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.Table">
            <summary>
            Gets the underlying table for this table field.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.TotalsRowFormulaA1">
            <summary>
            Gets or sets the totals row formula in A1 format.
            </summary>
            <value>
            The totals row formula a1.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.TotalsRowFormulaR1C1">
            <summary>
            Gets or sets the totals row formula in R1C1 format.
            </summary>
            <value>
            The totals row formula r1 c1.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.TotalsRowFunction">
            <summary>
            Gets or sets the totals row function.
            </summary>
            <value>
            The totals row function.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.TotalsRowLabel">
            <summary>
            Gets or sets the totals row label (the leftmost cell in the totals row).
            </summary>
            <value>
            The totals row label.
            </value>
            <exception>If the totals row is not displayed for the table.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableField.Delete">
            <summary>
            Deletes this table field from the table.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableField.IsConsistentDataType">
            <summary>
            Determines whether all cells this table field have a consistent data type.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableField.IsConsistentFormula">
            <summary>
            Determines whether all cells this table field have a consistent formula.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableField.IsConsistentStyle">
            <summary>
            Determines whether all cells this table field have a consistent style.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRange.Row(System.Int32)">
            <summary>
            Rows the specified row.
            </summary>
            <param name="row">1-based row number relative to the first row of this range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRange.Rows(System.Int32,System.Int32)">
            <summary>
            Returns a subset of the rows
            </summary>
            <param name="firstRow">The first row to return. 1-based row number relative to the first row of this range.</param>
            <param name="lastRow">The last row to return. 1-based row number relative to the first row of this range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRow.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this row.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRows.Add(ClosedXML.Excel.IXLTableRow)">
            <summary>
            Adds a table row to this group.
            </summary>
            <param name="tableRow">The row table to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRows.Cells">
            <summary>
            Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRows.CellsUsed">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRows.CellsUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRows.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these rows.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTables.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these tables.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.TableNameGenerator.GetNewTableName(ClosedXML.Excel.IXLWorkbook,System.String)">
            <summary>
            Generate a non conflicting table name for the workbook
            </summary>
            <param name="workbook">Workbook to generate name for</param>
            <param name="baseTableName">"Base Table Name</param>
            <returns>Name for the table</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLTable.#ctor(ClosedXML.Excel.XLRangeParameters)">
            <summary>
            The direct constructor should only be used in <see cref="P:ClosedXML.Excel.XLWorksheet.RangeFactory"/>.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLCellValue">
            <summary>
            A value of a single cell. It contains a value a specific <see cref="P:ClosedXML.Excel.XLCellValue.Type"/>.
            Structure provides following group of methods:
            <list type="bullet">
              <item><c>Is*</c> properties to check type (<see cref="P:ClosedXML.Excel.XLCellValue.IsNumber"/>, <see cref="P:ClosedXML.Excel.XLCellValue.IsBlank"/>...)</item>
              <item><c>Get*</c> methods that return the stored value or throw <see cref="T:System.InvalidCastException"/> for incorrect type.</item>
              <item>Explicit operators to convert <c>XLCellValue</c> to a concrete type. It is an equivalent of <c>Get*</c> methods.</item>
              <item><c>TryConvert</c> methods to try to get value of a specific type, even if the value is of a different type.</item>
            </list>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.Type">
            <summary>
            Type of the value.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsBlank">
            <summary>
            Is the type of value <c>Blank</c>?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsBoolean">
            <summary>
            Is the type of value <see cref="F:ClosedXML.Excel.XLDataType.Boolean"/>?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsNumber">
            <summary>
            Is the type of value <see cref="F:ClosedXML.Excel.XLDataType.Number"/>?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsText">
            <summary>
            Is the type of value <see cref="F:ClosedXML.Excel.XLDataType.Text"/>?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsError">
            <summary>
            Is the type of value <see cref="F:ClosedXML.Excel.XLDataType.Error"/>?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsDateTime">
            <summary>
            Is the type of value <see cref="F:ClosedXML.Excel.XLDataType.DateTime"/>?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsTimeSpan">
            <summary>
            Is the type of value <see cref="F:ClosedXML.Excel.XLDataType.TimeSpan"/>?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsUnifiedNumber">
            <summary>
            Is the value <see cref="F:ClosedXML.Excel.XLDataType.Number"/> or <see cref="F:ClosedXML.Excel.XLDataType.DateTime"/> or <see cref="F:ClosedXML.Excel.XLDataType.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.FromObject(System.Object,System.IFormatProvider)">
            <summary>
            Creates an <see cref="T:ClosedXML.Excel.XLCellValue"/> from an <see cref="T:System.Object"/>. If the type of the object has an implicit conversion operator then it is used.
            Otherwise, the <see cref="M:System.Convert.ToString(System.Object,System.IFormatProvider)"/> method is used to convert the provided object to a string.
            <para/>
            The following types and their nullable counterparts are supported without requiring to be converted to a string:
            <list type="bullet">
              <item><see cref="T:ClosedXML.Excel.Blank"/></item>
              <item><see cref="T:System.Boolean"/></item>
              <item><see cref="T:System.String"/></item>
              <item><see cref="T:ClosedXML.Excel.XLError"/></item>
              <item><see cref="T:System.DateTime"/></item>
              <item><see cref="T:System.TimeSpan"/></item>
              <item><see cref="T:System.SByte"/></item>
              <item><see cref="T:System.Byte"/></item>
              <item><see cref="T:System.Int16"/></item>
              <item><see cref="T:System.UInt16"/></item>
              <item><see cref="T:System.Int32"/></item>
              <item><see cref="T:System.UInt32"/></item>
              <item><see cref="T:System.Int64"/></item>
              <item><see cref="T:System.UInt64"/></item>
              <item><see cref="T:System.Single"/></item>
              <item><see cref="T:System.Double"/></item>
              <item><see cref="T:System.Decimal"/></item>
            </list>
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>An <see cref="T:ClosedXML.Excel.XLCellValue"/> representation of the object.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.op_Explicit(ClosedXML.Excel.XLCellValue)~ClosedXML.Excel.Blank">
            <inheritdoc cref="M:ClosedXML.Excel.XLCellValue.GetBlank"/>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.op_Explicit(ClosedXML.Excel.XLCellValue)~System.Boolean">
            <inheritdoc cref="M:ClosedXML.Excel.XLCellValue.GetBoolean"/>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.op_Explicit(ClosedXML.Excel.XLCellValue)~System.Double">
            <inheritdoc cref="M:ClosedXML.Excel.XLCellValue.GetNumber"/>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.op_Explicit(ClosedXML.Excel.XLCellValue)~System.String">
            <inheritdoc cref="M:ClosedXML.Excel.XLCellValue.GetText"/>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.op_Explicit(ClosedXML.Excel.XLCellValue)~ClosedXML.Excel.XLError">
            <inheritdoc cref="M:ClosedXML.Excel.XLCellValue.GetError"/>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.op_Implicit(ClosedXML.Excel.XLCellValue)~System.DateTime">
            <inheritdoc cref="M:ClosedXML.Excel.XLCellValue.GetDateTime"/>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.op_Implicit(ClosedXML.Excel.XLCellValue)~System.TimeSpan">
            <inheritdoc cref="M:ClosedXML.Excel.XLCellValue.GetTimeSpan"/>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetBlank">
            <summary>
            If the value is of type <see cref="F:ClosedXML.Excel.XLDataType.Blank"/>,
            return <see cref="F:ClosedXML.Excel.Blank.Value"/>, otherwise throw <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetBoolean">
            <summary>
            If the value is of type <see cref="F:ClosedXML.Excel.XLDataType.Boolean"/>,
            return logical, otherwise throw <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetNumber">
            <summary>
            If the value is of type <see cref="F:ClosedXML.Excel.XLDataType.Number"/>,
            return number, otherwise throw <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetText">
            <summary>
            If the value is of type <see cref="F:ClosedXML.Excel.XLDataType.Text"/>,
            return text, otherwise throw <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetError">
            <summary>
            If the value is of type <see cref="F:ClosedXML.Excel.XLDataType.Error"/>,
            return error, otherwise throw <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetDateTime">
            <summary>
            If the value is of type <see cref="F:ClosedXML.Excel.XLDataType.DateTime"/>,
            return date time, otherwise throw <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetTimeSpan">
            <summary>
            If the value is of type <see cref="F:ClosedXML.Excel.XLDataType.TimeSpan"/>,
            return time span, otherwise throw <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetUnifiedNumber">
            <summary>
            Get a number, either directly from type number or from serialized time span
            or serialized date time.
            </summary>
            <exception cref="T:System.InvalidCastException">If type is not <see cref="F:ClosedXML.Excel.XLDataType.Number"/> or
            <see cref="F:ClosedXML.Excel.XLDataType.DateTime"/> or <see cref="F:ClosedXML.Excel.XLDataType.TimeSpan"/>.</exception>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.ToString">
            <summary>
            Return text representation of a value in current culture.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.ToString(System.Globalization.CultureInfo)">
            <summary>
            Return text representation of a value in the specified culture.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.TryGetText(System.String@)">
            <summary>
            Get a value, if it is a <see cref="F:ClosedXML.Excel.XLDataType.Text"/>.
            </summary>
            <returns>True if value was retrieved, false otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.TryConvert(ClosedXML.Excel.Blank@)">
            <summary>
            Try to convert the value to a <see cref="F:ClosedXML.Excel.XLDataType.Blank"/> and return it.
            Method succeeds, when value is
            <list type="bullet">
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Blank"/>.</item>
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Text"/> and the text is empty.</item>
            </list>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.TryConvert(System.Boolean@)">
            <summary>
            Try to convert the value to a <see cref="F:ClosedXML.Excel.XLDataType.Boolean"/> and return it.
            Method succeeds, when value is
            <list type="bullet">
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Boolean"/>.</item>
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Number"/>, then the value of <c>0</c> means <c>false</c> and any other value is <c>true</c>.</item>
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Text"/> and the value is <c>TRUE</c> or <c>FALSE</c> (case insensitive). Note that calc engine
              generally doesn't coerce text to logical (e.g. arithmetic operations), though it happens in most function arguments (e.g.
              <c>IF</c> or <c>AND</c>).</item>
            </list>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.TryConvert(System.Double@,System.Globalization.CultureInfo)">
            <summary>
            Try to convert the value to a <see cref="F:ClosedXML.Excel.XLDataType.Number"/> and return it.
            <list type="bullet">
              <item>Double value - return the value.</item>
              <item>Boolean value - return the <c>0</c> for <c>TRUE</c> and <c>1</c> for <c>FALSE</c>.</item>
              <item>Text value - use the <c>VALUE</c> semantic to convert a text to a number.</item>
              <item>DateTime value - return the serial date time number.</item>
              <item>TimeSpan value - return the serial time span value.</item>
            </list>
            </summary>
            <remarks>Note that the coercion is current culture specific (e.g. decimal separators can differ).</remarks>
            <param name="value">The converted value. Result is never <c>infinity</c> or <c>NaN</c>.</param>
            <param name="culture">The culture used to convert the value for texts.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.TryConvert(System.DateTime@)">
            <summary>
            Try to convert the value to a <see cref="T:System.DateTime"/> and return it.
            Method succeeds, when value is
            <list type="bullet">
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.DateTime"/>.</item>
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Number"/> and when the number is interpreted is a serial date time, it falls within the DateTime range.</item>
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.TimeSpan"/> and when the number is interpreted is a serial date time, it falls within the DateTime range.</item>
            </list>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.TryConvert(System.TimeSpan@,System.Globalization.CultureInfo)">
            <summary>
            Try to convert the value to a <see cref="T:System.TimeSpan"/> and return it.
            Method succeeds, when value is
            <list type="bullet">
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.TimeSpan"/>.</item>
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Number"/>, the number is interpreted is a time span date time.</item>
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Text"/> and it can be parsed as a time span (accepts even hours over 24 hours).</item>
            </list>
            </summary>
            <param name="value">The converted value.</param>
            <param name="culture">The culture used to get time and decimal separators.</param>
        </member>
        <member name="F:ClosedXML.Excel.XLCellSetValueBehavior.Smart">
            <summary>
              Analyze input string and convert value. For avoid analyzing use escape symbol '
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellSetValueBehavior.Simple">
            <summary>
              Direct set value. If value has unsupported type - value will be stored as string returned by <see
               cref = "M:System.Object.ToString" />
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.CellSetValueBehavior">
            <summary>
              Behavior for <see cref = "M:ClosedXML.Excel.IXLCell.set_Value(ClosedXML.Excel.XLCellValue)" />
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.RecalculationCounter">
            <summary>
            Counter increasing at workbook data change. Serves to determine if the cell formula
            has to be recalculated.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.InvalidateFormulas">
            <summary>
            Notify that workbook data has been changed which means that cached formula values
            need to be re-evaluated.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.Worksheets">
            <summary>
              Gets an object to manipulate the worksheets.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.NamedRanges">
            <summary>
              Gets an object to manipulate this workbook's named ranges.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.Theme">
            <summary>
              Gets an object to manipulate this workbook's theme.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.PivotCaches">
            <summary>
            All pivot caches in the workbook, whether they have a pivot table or not.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.Style">
            <summary>
              Gets or sets the default style for the workbook.
              <para>All new worksheets will use this style.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.RowHeight">
            <summary>
              Gets or sets the default row height for the workbook.
              <para>All new worksheets will use this row height.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.ColumnWidth">
            <summary>
              Gets or sets the default column width for the workbook.
              <para>All new worksheets will use this column width.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.PageOptions">
            <summary>
              Gets or sets the default page options for the workbook.
              <para>All new worksheets will use these page options.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.Outline">
            <summary>
              Gets or sets the default outline options for the workbook.
              <para>All new worksheets will use these outline options.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.Properties">
            <summary>
              Gets or sets the workbook's properties.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.CalculateMode">
            <summary>
              Gets or sets the workbook's calculation mode.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.ReferenceStyle">
            <summary>
              Gets or sets the workbook's reference style.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.Save">
            <summary>
              Saves the current workbook.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.Save(System.Boolean,System.Boolean)">
            <summary>
              Saves the current workbook and optionally performs validation
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.SaveAs(System.String)">
            <summary>
              Saves the current workbook to a file.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.SaveAs(System.String,System.Boolean,System.Boolean)">
            <summary>
              Saves the current workbook to a file and optionally validates it.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.SaveAs(System.IO.Stream)">
            <summary>
              Saves the current workbook to a stream.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.SaveAs(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
              Saves the current workbook to a stream and optionally validates it.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.Search(System.String,System.Globalization.CompareOptions,System.Boolean)">
            <summary>
            Searches the cells' contents for a given piece of text
            </summary>
            <param name="searchText">The search text.</param>
            <param name="compareOptions">The compare options.</param>
            <param name="searchFormulae">if set to <c>true</c> search formulae instead of cell values.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.#ctor">
            <summary>
              Creates a new Excel workbook.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.#ctor(System.String)">
            <summary>
              Opens an existing workbook from a file.
            </summary>
            <param name = "file">The file to open.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.#ctor(System.IO.Stream)">
            <summary>
              Opens an existing workbook from a stream.
            </summary>
            <param name = "stream">The stream to open.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.RecalculateAllFormulas">
            <summary>
            Force recalculation of all cell formulas.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.EvaluateExpr(System.String)">
            <summary>
            Evaluate a formula and return a value. Formulas with references don't work and culture used for conversion is invariant.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.CalculateColumnWidth(System.Double,ClosedXML.Excel.IXLFont,ClosedXML.Excel.XLWorkbook)">
            <summary>
            Calculate expected column width as a number displayed in the column in Excel from
            number of characters that should fit into the width and a font.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.SetCellText(ClosedXML.Excel.XLCell,DocumentFormat.OpenXml.Spreadsheet.RstType)">
            <summary>
            Parses the cell value for normal or rich text
            Input element should either be a shared string or inline string
            </summary>
            <param name="xlCell">The cell.</param>
            <param name="element">The element (either a shared string or inline string)</param>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.LoadConditionalFormatting(DocumentFormat.OpenXml.Spreadsheet.ConditionalFormatting,ClosedXML.Excel.XLWorksheet,System.Collections.Generic.Dictionary{System.Int32,DocumentFormat.OpenXml.Spreadsheet.DifferentialFormat})">
            <summary>
            Loads the conditional formatting.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.AddDifferentialFormats(DocumentFormat.OpenXml.Packaging.WorkbookStylesPart,ClosedXML.Excel.XLWorkbook.SaveContext)">
            <summary>
            Populates the differential formats that are currently in the file to the SaveContext
            </summary>
            <param name="workbookStylesPart">The workbook styles part.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.CellFormatsAreEqual(DocumentFormat.OpenXml.Spreadsheet.CellFormat,ClosedXML.Excel.XLWorkbook.StyleInfo,System.Boolean)">
            <summary>
            Check if two style are equivalent.
            </summary>
            <param name="f">Style in the OpenXML format.</param>
            <param name="styleInfo">Style in the ClosedXML format.</param>
            <param name="compareAlignment">Flag specifying whether or not compare the alignments of two styles.
            Styles in x:cellStyleXfs section do not include alignment so we don't have to compare it in this case.
            Styles in x:cellXfs section, on the opposite, do include alignments, and we must compare them.
            </param>
            <returns>True if two formats are equivalent, false otherwise.</returns>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.SaveContext.PivotSourceCacheId">
            <summary>
            A free id that can be used by the workbook to reference to a pivot cache.
            The <c>PivotCaches</c> element in a workbook connects the parts with pivot
            cache parts.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.SaveContext.PivotSources">
            <summary>
            A dictionary of extra info for pivot during saving. The key is <see cref="P:ClosedXML.Excel.XLPivotCache.Guid"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.RelIdGenerator.AddExistingValues(DocumentFormat.OpenXml.Packaging.WorkbookPart,ClosedXML.Excel.XLWorkbook)">
            <summary>
            Add all existing rel ids present on the parts or workbook to the generator, so they are not duplicated again.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLWorksheet.InvalidAddress">
            <summary>
            Fake address to be used everywhere the invalid address is needed.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLWorksheet.LegacyDrawingId">
            <summary>
            Reference to a VML that contains notes, forms controls and so on. All such things are generally unified into
            a single legacy VML file, set during load/save.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorksheet.RecalculateAllFormulas">
            <summary>
            Force recalculation of all cell formulas.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorksheet.GetCellValue(System.Int32,System.Int32)">
            <summary>
            Get a cell value not initializing it if it has not been initialized yet.
            </summary>
            <param name="ro">Row number</param>
            <param name="co">Column number</param>
        </member>
        <member name="M:ClosedXML.Excel.XLWorksheet.GetCell(System.Int32,System.Int32)">
            <summary>
            Get cell or null, if cell doesn't exist.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorksheet.RangeRow(ClosedXML.Excel.XLRangeAddress,ClosedXML.Excel.IXLStyle)">
            <summary>
            Get a range row from the shared repository or create a new one.
            </summary>
            <param name="address">Address of range row.</param>
            <param name="defaultStyle">Style to apply. If null the worksheet's style is applied.</param>
            <returns>Range row with the specified address.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLWorksheet.RangeColumn(ClosedXML.Excel.XLRangeAddress,ClosedXML.Excel.IXLStyle)">
            <summary>
            Get a range column from the shared repository or create a new one.
            </summary>
            <param name="address">Address of range column.</param>
            <param name="defaultStyle">Style to apply. If null the worksheet's style is applied.</param>
            <returns>Range column with the specified address.</returns>
        </member>
        <member name="M:ClosedXML.Excel.DoubleExtensions.RoundToInt(System.Double)">
            <summary>
            Round the number to the integer.
            </summary>
            <remarks>A helper method to avoid need to specify the midpoint rounding and casting each time.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.DoubleExtensions.Round(System.Double,System.Int32)">
            <summary>
            Round the number to specified number of digits.
            </summary>
            <remarks>A helper method to avoid need to specify the midpoint rounding each time.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.IntegerExtensions.GetHighestSetBitBelow(System.UInt32,System.Int32)">
            <summary>
            Get index of highest set bit &lt;= to <paramref name="maximalIndex"/> or -1 if no such bit.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IntegerExtensions.GetLowestSetBitAbove(System.UInt32,System.Int32)">
            <summary>
            Get index of lowest set bit &gt;= to <paramref name="minimalIndex"/> or -1 if no such bit.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IntegerExtensions.GetHighestSetBit(System.UInt32)">
            <summary>
            Get highest set bit index or -1 if no bit is set.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.StringExtensions.ToCodePoints(System.ReadOnlySpan{System.Char},System.Span{System.Int32})">
            <summary>
            Convert a string (containing code units) into code points.
            Surrogate pairs of code units are joined to code points.
            </summary>
            <param name="text">UTF-16 code units to convert.</param>
            <param name="output">Output containing code points. Must always be able to fit whole <paramref name="text"/>.</param>
            <returns>Number of code points in the <paramref name="output"/>.</returns>
        </member>
        <member name="M:ClosedXML.Excel.StringExtensions.TrySliceNewLine(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Is the string a new line of any kind (widnows/unix/mac)?
            </summary>
            <param name="text">Input text to check for EOL at the beginning.</param>
            <param name="length">Length of EOL chars.</param>
            <returns>True, if text has EOL at the beginning.</returns>
        </member>
        <member name="M:ClosedXML.Excel.StringExtensions.ToMagicNumber(System.String)">
            <summary>
            Convert a magic text to a number, where the first letter is in the highest byte of the number.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.TimeSpanExtensions.ToExcelString(System.TimeSpan,System.Globalization.CultureInfo)">
            <summary>
            Return a string representation of a TimeSpan that can be parsed by an Excel through text-to-number coercion.
            </summary>
            <remarks>
            Excel can convert time span string back to a number, but only if it doesn't has days in the string, only hours.
            It's an opposite of <see cref="T:ClosedXML.Excel.CalcEngine.TimeSpanParser"/>.
            </remarks>
        </member>
        <member name="T:ClosedXML.Excel.XLHelper">
            <summary>
            	Common methods
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.GetColumnNumberFromLetter(System.String)">
            <summary>
            Gets the column number of a given column letter.
            </summary>
            <param name="columnLetter"> The column letter to translate into a column number. </param>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.GetColumnLetterFromNumber(System.Int32,System.Boolean)">
            <summary>
            Gets the column letter of a given column number.
            </summary>
            <param name="columnNumber">The column number to translate into a column letter.</param>
            <param name="trimToAllowed">if set to <c>true</c> the column letter will be restricted to the allowed range.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.GetTimeSpan(System.Double)">
            <summary>
            A backward compatible version of <see cref="M:System.TimeSpan.FromDays(System.Double)"/> that returns a value
            rounded to milliseconds. In .Net Core 3.0 the behavior has changed and timespan includes microseconds
            as well. As a result, the value 1:12:30 saved on one machine could become 1:12:29.999999 on another.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.PixelToNoC(System.Int32,System.Int32)">
            <summary>
            Convert size in pixels to a size in NoC (number of characters).
            </summary>
            <param name="px">Size in pixels.</param>
            <param name="mdw">Size of maximum digit width in pixels.</param>
            <returns>Size in NoC.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.NoCToPixels(System.Double,System.Int32)">
            <summary>
            Convert size in NoC to size in pixels.
            </summary>
            <param name="noc">Size in number of characters.</param>
            <param name="mdw">Maximum digit width in pixels.</param>
            <returns>Size in pixels (not rounded).</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.NoCToPixels(System.Double,ClosedXML.Excel.IXLFont,ClosedXML.Excel.XLWorkbook)">
            <summary>
            Convert size in number of characters to pixels.
            </summary>
            <param name="noc">Width</param>
            <param name="font">Font used to determine mdw.</param>
            <param name="workbook">Workbook for dpi and graphic engine.</param>
            <returns>Width in pixels.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.WidthToPixels(System.Double,System.Int32)">
            <summary>
            Convert width to pixels.
            </summary>
            <param name="width">Width from the source file, not NoC that is displayed in Excel as a width.</param>
            <param name="mdw"></param>
            <returns>Number of pixels.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.ConvertWidthToNoC(System.Double,ClosedXML.Excel.IXLFont,ClosedXML.Excel.XLWorkbook)">
            <summary>
            Convert width (as a multiple of MDWs) into a NoCs (number displayed in Excel).
            </summary>
            <param name="width">Width in MDWs to convert.</param>
            <param name="font">Font used to determine MDW.</param>
            <param name="workbook">Workbook</param>
            <returns>Width as a number of NoC.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.DegToRad(System.Double)">
            <summary>
            Convert degrees to radians.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.CreateSafeSheetName(System.String,System.Char)">
            <summary>
            Creates a valid sheet name, which conforms to the following rules.
            A sheet name:
            is never null,
            has minimum length of 1 and
            maximum length of 31,
            doesn't contain special chars: (: 0x0000 0x0003 / \ ? * ] [).
            Sheet names must not begin or end with ' (apostrophe)
            </summary>
            <param name="nameProposal">can be any string, will be truncated if necessary, allowed to be null</param>
            <param name="replaceChar">the char to replace invalid characters.</param>
            <returns>a valid string, "empty" if too short, "null" if null</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.ValidateSheetName(System.String)">
             <summary>
             Validates the name of the sheet.
             The character count MUST be greater than or equal to 1 and less than or equal to 31.
             The string MUST NOT contain the any of the following characters:
             - 0x0000
             - 0x0003
             - colon (:)
             - backslash(\)
             - asterisk(*)
             - question mark(?)
             - forward slash(/)
             - opening square bracket([)
             - closing square bracket(])
             The string MUST NOT begin or end with the single quote(') character.
             </summary>
             <param name="sheetName">Name of the sheet.</param>
             <exception cref="T:System.ArgumentException">
             </exception>
            
        </member>
        <member name="M:ClosedXML.Extensions.ReadOnlyListExtensions.IndexOf``1(System.Collections.Generic.IReadOnlyList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Searches for the specified item and returns the zero-based index of the first occurrence.
            </summary>
            <returns>Index of found item, -1 if item is not found.</returns>
        </member>
        <member name="T:ClosedXML.Graphics.BmpInfoReader">
            <summary>
            A reader for BMP for Windows and OS/2.
            Specification:
            https://www.fileformat.info/format/bmp/corion.htm
            https://www.fileformat.info/format/bmp/egff.htm
            https://www.fileformat.info/format/os2bmp/egff.htm
            </summary>
        </member>
        <member name="F:ClosedXML.Graphics.DefaultGraphicEngine.EmbeddedFontName">
            <summary>
            Carlito is a Calibri metric compatible font. This is a version stripped of everything but metric information
            to keep the embedded file small. It is reasonably accurate for many alphabets (contains 2531 glyphs). It has
            no glyph outlines, no TTF instructions, no substitutions, glyph positioning ect. It is created from Carlito
            font through strip-fonts.sh script.
            </summary>
        </member>
        <member name="F:ClosedXML.Graphics.DefaultGraphicEngine._fonts">
            <summary>
            A font loaded font in the size <see cref="F:ClosedXML.Graphics.DefaultGraphicEngine.FontMetricSize"/>. There is no benefit in having multiple allocated instances, everything is just scaled at the moment.
            </summary>
        </member>
        <member name="F:ClosedXML.Graphics.DefaultGraphicEngine._maxDigitWidths">
            <summary>
            Max digit width as a fraction of Em square. Multiply by font size to get pt size.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.DefaultGraphicEngine.Instance">
            <summary>
            Get a singleton instance of the engine that uses <c>Microsoft Sans Serif</c> as a fallback font.
            </summary>
        </member>
        <member name="M:ClosedXML.Graphics.DefaultGraphicEngine.#ctor(System.String)">
            <summary>
            Initialize a new instance of the engine.
            </summary>
            <param name="fallbackFont">A name of a font that is used when a font in a workbook is not available.</param>
        </member>
        <member name="M:ClosedXML.Graphics.DefaultGraphicEngine.#ctor(System.IO.Stream,System.Boolean,System.IO.Stream[])">
            <summary>
            Initialize a new instance of the engine. The engine will be able to use system fonts and fonts loaded from external sources.
            </summary>
            <remarks>Useful/necessary for environments without an access to filesystem.</remarks>
            <param name="fallbackFontStream">A stream that contains a fallback font.</param>
            <param name="useSystemFonts">Should engine try to use system fonts? If false, system fonts won't be loaded which can significantly speed up library startup.</param>
            <param name="fontStreams">Extra fonts that should be loaded to the engine.</param>
        </member>
        <member name="M:ClosedXML.Graphics.DefaultGraphicEngine.CreateOnlyWithFonts(System.IO.Stream,System.IO.Stream[])">
            <summary>
            Create a default graphic engine that uses only fallback font and additional fonts passed as streams.
            It ignores all system fonts and that can lead to decrease of initialization time.
            </summary>
            <remarks>
            <para>
            Font is determined by a name and style in the worksheet, but the font name must be mapped to a font file/stream.
            System fonts on Windows contain hundreds of font files that have to be checked to find the correct font
            file for the font name and style. That means to read hundreds of files and parse data inside them.
            Even though SixLabors.Fonts does this only once (lazily too) and stores data in a static variable, it is
            an overhead that can be avoided.
            </para>
            <para>
            This factory method is useful in several scenarios:
            <list type="bullet">
              <item>Client side Blazor doesn't have access to any system fonts.</item>
              <item>Worksheet contains only limited number of fonts. It might be sufficient to just load few fonts we are</item>
            </list>
            </para>
            </remarks>
            <param name="fallbackFontStream">A stream that contains a fallback font.</param>
            <param name="fontStreams">Fonts that should be loaded to the engine.</param>
        </member>
        <member name="M:ClosedXML.Graphics.DefaultGraphicEngine.CreateWithFontsAndSystemFonts(System.IO.Stream,System.IO.Stream[])">
            <summary>
            Create a default graphic engine that uses only fallback font and additional fonts passed as streams.
            It also uses system fonts.
            </summary>
            <param name="fallbackFontStream">A stream that contains a fallback font.</param>
            <param name="fontStreams">Fonts that should be loaded to the engine.</param>
        </member>
        <member name="M:ClosedXML.Graphics.DefaultGraphicEngine.GetGlyphBox(System.ReadOnlySpan{System.Int32},ClosedXML.Excel.IXLFontBase,ClosedXML.Graphics.Dpi)">
            <inheritdoc />
        </member>
        <member name="T:ClosedXML.Graphics.Dpi">
            <summary>
            A DPI resolution.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.Dpi.X">
            <summary>
            Horizontal DPI resolution.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.Dpi.Y">
            <summary>
            Vertical DPI resolution.
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.EmfInfoReader">
            <summary>
            Metadata read of a vector EMF file. Specification: https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.GifInfoReader">
            <summary>
            Read info about a GIF file. Gif file has no DPI, only pixel ratio.
            Specification: https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.GlyphBox">
            <summary>
            A bounding box for a glyph, in pixels.
            </summary>
            <remarks>
            In most cases, a glyph represents a single unicode code point. In some cases,
            multiple code points are represented by a single glyph (emojis in most cases).
            Although data type is float, the actual values should be whole numbers.
            That best fits to Excel behavior, but there might be some cases in the future,
            where values can be a floats (e.g. advance could be non-pixels aligned).
            </remarks>
        </member>
        <member name="P:ClosedXML.Graphics.GlyphBox.LineBreak">
            <summary>
            A special glyph box that indicates a line break. Dimensions are kept at 0, so it doesn't affect any calculations.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.GlyphBox.AdvanceWidth">
            <summary>
            Advance width in px of a box for code point. Value should be whole number.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.GlyphBox.EmSize">
            <summary>
            Size of Em square in pixels. If em is not a square, vertical dimension of
            em square. Value should be whole number.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.GlyphBox.Descent">
            <summary>
            Distance in px from baseline to the bottom of the box.
            </summary>
            <remarks>
            Descent/height is determined by font, not by codepoints
            of the glyph. Value should be whole number.
            </remarks>
        </member>
        <member name="P:ClosedXML.Graphics.GlyphBox.LineHeight">
            <summary>
            Get line width of the glyph box. It is calculated as central band with a text and
            a lower and an upper bands. Central band (text) has height is <c>em-square - descent</c>
            and the bands are <c>descent</c>.
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.IXLGraphicEngine">
            <summary>
            An interface to abstract away graphical functionality, like reading images, fonts or to determine a width of a text.
            </summary>
        </member>
        <member name="M:ClosedXML.Graphics.IXLGraphicEngine.GetPictureInfo(System.IO.Stream,ClosedXML.Excel.Drawings.XLPictureFormat)">
            <summary>
            Get the info about a picture (mostly dimensions).
            </summary>
            <param name="imageStream">Stream is at the beginning of the image.</param>
            <param name="expectedFormat">The expected format of the image. Use <see cref="F:ClosedXML.Excel.Drawings.XLPictureFormat.Unknown"/> for auto detection.</param>
            <exception cref="T:System.ArgumentException">Unable to determine picture dimensions or format doesn't match the stream.</exception>
        </member>
        <member name="M:ClosedXML.Graphics.IXLGraphicEngine.GetTextHeight(ClosedXML.Excel.IXLFontBase,System.Double)">
            <summary>
            Get the height of a text with the font in pixels. Should be <c>EMHeight+descent</c>.
            </summary>
        </member>
        <member name="M:ClosedXML.Graphics.IXLGraphicEngine.GetTextWidth(System.String,ClosedXML.Excel.IXLFontBase,System.Double)">
            <summary>
            Get the width of a text in pixels. Do not add any padding, there can be
            multiple spans of a texts with different fonts in a line.
            </summary>
        </member>
        <member name="M:ClosedXML.Graphics.IXLGraphicEngine.GetMaxDigitWidth(ClosedXML.Excel.IXLFontBase,System.Double)">
            <summary>
            The width of the widest 0-9 digit in pixels.
            </summary>
            <remarks>OOXML measures width of a column in multiples of widest 0-9 digit character in a normal style font.</remarks>
        </member>
        <member name="M:ClosedXML.Graphics.IXLGraphicEngine.GetDescent(ClosedXML.Excel.IXLFontBase,System.Double)">
            <summary>
            Get font descent in pixels (positive value).
            </summary>
            <remarks>Excel is using OS/2 WinAscent/WinDescent for TrueType fonts (e.g. Calibri), not a correct font ascent/descent.</remarks>
        </member>
        <member name="M:ClosedXML.Graphics.IXLGraphicEngine.GetGlyphBox(System.ReadOnlySpan{System.Int32},ClosedXML.Excel.IXLFontBase,ClosedXML.Graphics.Dpi)">
            <summary>
            Get a glyph bounding box for a grapheme cluster.
            </summary>
            <remarks>
            In 99+%, grapheme cluster will be just a codepoint. Method uses grapheme instead, so it can be
            future-proof signature and have less braking changes. Implementing method by adding widths of
            individual code points is acceptable.
            </remarks>
            <param name="graphemeCluster">
            A part of a string in code points (or runes in C# terminology, not UTF-16 code units) that together
            form a grapheme. Multiple unicode codepoints can form a single glyph, e.g. family grapheme is a single
            glyph created from 6 codepoints (man, zero-width-join, woman, zero-width-join and a girl). A string
            can be split into a grapheme clusters through <see cref="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)"/>.
            </param>
            <param name="font">Font used to determine size of a glyph for the grapheme cluster.</param>
            <param name="dpi">
            A resolution used to determine pixel size of a glyph. Font might be rendered differently at different resolutions.
            </param>
            <returns>Bounding box containing the glyph.</returns>
        </member>
        <member name="T:ClosedXML.Graphics.JpegInfoReader">
            <summary>
            Read <a href="https://www.w3.org/Graphics/JPEG/jfif3.pdf">JFIF</a> or EXIF.
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.PcxInfoReader">
            <summary>
            Read info about PCX picture.
            https://moddingwiki.shikadi.net/wiki/PCX_Format
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.TiffInfoReader">
            <summary>
            A reader for baseline TIFF.
            Specification: https://www.itu.int/itudoc/itu-t/com16/tiff-fx/docs/tiff6.pdf
            </summary>
        </member>
        <member name="F:ClosedXML.Graphics.TiffInfoReader.ByteOrder.LittleEndian">
            <summary>
            <c>II</c> like Intel in ASCII.
            </summary>
        </member>
        <member name="F:ClosedXML.Graphics.TiffInfoReader.ByteOrder.BigEndian">
            <summary>
            <c>MM</c> like Motorola in ASCII.
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.WebpInfoReader">
            <summary>
            Reader of dimensions for WebP image format.
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.WmfInfoReader">
            <summary>
            Reader of Windows Meta File.
            https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/4813e7fd-52d0-4f42-965f-228c8b7488d2
            http://formats.kaitai.io/wmf/index.html
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.XLPictureInfo">
            <summary>
            Metadata info about a picture. At least one of the sizes (pixels/physical) must be set.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.XLPictureInfo.Format">
            <summary>
            Detected format of the image.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.XLPictureInfo.SizePx">
            <summary>
            Size of the picture in pixels.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.XLPictureInfo.SizePhys">
            <summary>
            A physical size in 0.01mm. Used by vector images.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.XLPictureInfo.DpiX">
            <summary>
            0 = use workbook DPI.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.XLPictureInfo.DpiY">
            <summary>
            0 = use workbook DPI.
            </summary>
        </member>
        <member name="M:ClosedXML.Utils.OpenXmlHelper.FromClosedXMLColor``1(DocumentFormat.OpenXml.Spreadsheet.ColorType,ClosedXML.Excel.XLColor,System.Boolean)">
            <summary>
            Convert color in ClosedXML representation to specified OpenXML type.
            </summary>
            <typeparam name="T">The descendant of <see cref="T:DocumentFormat.OpenXml.Spreadsheet.ColorType"/>.</typeparam>
            <param name="openXMLColor">The existing instance of ColorType.</param>
            <param name="xlColor">Color in ClosedXML format.</param>
            <param name="isDifferential">Flag specifying that the color should be saved in
            differential format (affects the transparent color processing).</param>
            <returns>The original color in OpenXML format.</returns>
        </member>
        <member name="M:ClosedXML.Utils.OpenXmlHelper.FromClosedXMLColor``1(DocumentFormat.OpenXml.Office2010.Excel.ColorType,ClosedXML.Excel.XLColor,System.Boolean)">
            <summary>
            Convert color in ClosedXML representation to specified OpenXML type.
            </summary>
            <typeparam name="T">The descendant of <see cref="T:DocumentFormat.OpenXml.Office2010.Excel.ColorType"/>.</typeparam>
            <param name="openXMLColor">The existing instance of ColorType.</param>
            <param name="xlColor">Color in ClosedXML format.</param>
            <param name="isDifferential">Flag specifying that the color should be saved in
            differential format (affects the transparent color processing).</param>
            <returns>The original color in OpenXML format.</returns>
        </member>
        <member name="M:ClosedXML.Utils.OpenXmlHelper.ToClosedXMLColor(DocumentFormat.OpenXml.Spreadsheet.ColorType,System.Collections.Generic.IDictionary{System.String,System.Drawing.Color})">
            <summary>
            Convert color in OpenXML representation to ClosedXML type.
            </summary>
            <param name="openXMLColor">Color in OpenXML format.</param>
            <param name="colorCache">The dictionary containing parsed colors to optimize performance.</param>
            <returns>The color in ClosedXML format.</returns>
        </member>
        <member name="M:ClosedXML.Utils.OpenXmlHelper.ToClosedXMLColor(DocumentFormat.OpenXml.Office2010.Excel.ColorType,System.Collections.Generic.IDictionary{System.String,System.Drawing.Color})">
            <summary>
            Convert color in OpenXML representation to ClosedXML type.
            </summary>
            <param name="openXMLColor">Color in OpenXML format.</param>
            <param name="colorCache">The dictionary containing parsed colors to optimize performance.</param>
            <returns>The color in ClosedXML format.</returns>
        </member>
        <member name="M:ClosedXML.Utils.OpenXmlHelper.ConvertToClosedXMLColor(ClosedXML.Utils.IColorTypeAdapter,System.Collections.Generic.IDictionary{System.String,System.Drawing.Color})">
            <summary>
            Here we perform the actual conversion from OpenXML color to ClosedXML color.
            </summary>
            <param name="openXMLColor">OpenXML color. Must be either <see cref="T:DocumentFormat.OpenXml.Spreadsheet.ColorType"/> or <see cref="T:DocumentFormat.OpenXml.Office2010.Excel.ColorType"/>.
            Since these types do not implement a common interface we use dynamic.</param>
            <param name="colorCache">The dictionary containing parsed colors to optimize performance.</param>
            <returns>The color in ClosedXML format.</returns>
        </member>
        <member name="M:ClosedXML.Utils.OpenXmlHelper.FillFromClosedXMLColor(ClosedXML.Utils.IColorTypeAdapter,ClosedXML.Excel.XLColor,System.Boolean)">
            <summary>
            Initialize properties of the existing instance of the color in OpenXML format basing on properties of the color
            in ClosedXML format.
            </summary>
            <param name="openXMLColor">OpenXML color. Must be either <see cref="T:DocumentFormat.OpenXml.Spreadsheet.ColorType"/> or <see cref="T:DocumentFormat.OpenXml.Office2010.Excel.ColorType"/>.
            Since these types do not implement a common interface we use dynamic.</param>
            <param name="xlColor">Color in ClosedXML format.</param>
            <param name="isDifferential">Flag specifying that the color should be saved in
            differential format (affects the transparent color processing).</param>
        </member>
    </members>
</doc>
