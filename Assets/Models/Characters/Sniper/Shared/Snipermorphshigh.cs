/**
* File generated by TF2Ls
* Do not modify unless you know what you're doing
*/ 
using UnityEngine;
namespace TF2Ls.FaceFlex {
    public class Snipermorphshigh : BaseQC {

        // Flex Props
        [SerializeField, HideInInspector] float value0;
        float right_CloseLid => faceFlex.ProcessValue(value0, 0);
        [SerializeField, HideInInspector] float value1;
        float left_CloseLid => faceFlex.ProcessValue(value1, 1);
        [SerializeField, HideInInspector] float value2;
        float multi_CloseLid => faceFlex.ProcessValue(value2, 2);
        [SerializeField, HideInInspector] float value3;
        float blink => faceFlex.ProcessValue(value3, 3);
        [SerializeField, HideInInspector] float value4;
        float right_ScalpD => faceFlex.ProcessValue(value4, 4);
        [SerializeField, HideInInspector] float value5;
        float left_ScalpD => faceFlex.ProcessValue(value5, 5);
        [SerializeField, HideInInspector] float value6;
        float right_InnerSquint => faceFlex.ProcessValue(value6, 6);
        [SerializeField, HideInInspector] float value7;
        float left_InnerSquint => faceFlex.ProcessValue(value7, 7);
        [SerializeField, HideInInspector] float value8;
        float right_OuterSquint => faceFlex.ProcessValue(value8, 8);
        [SerializeField, HideInInspector] float value9;
        float left_OuterSquint => faceFlex.ProcessValue(value9, 9);
        [SerializeField, HideInInspector] float value10;
        float right_BrowInV => faceFlex.ProcessValue(value10, 10);
        [SerializeField, HideInInspector] float value11;
        float left_BrowInV => faceFlex.ProcessValue(value11, 11);
        [SerializeField, HideInInspector] float value12;
        float right_BrowOutV => faceFlex.ProcessValue(value12, 12);
        [SerializeField, HideInInspector] float value13;
        float left_BrowOutV => faceFlex.ProcessValue(value13, 13);
        [SerializeField, HideInInspector] float value14;
        float right_Frown => faceFlex.ProcessValue(value14, 14);
        [SerializeField, HideInInspector] float value15;
        float left_Frown => faceFlex.ProcessValue(value15, 15);
        [SerializeField, HideInInspector] float value16;
        float right_NoseV => faceFlex.ProcessValue(value16, 16);
        [SerializeField, HideInInspector] float value17;
        float left_NoseV => faceFlex.ProcessValue(value17, 17);
        [SerializeField, HideInInspector] float value18;
        float right_NostrilFlare => faceFlex.ProcessValue(value18, 18);
        [SerializeField, HideInInspector] float value19;
        float left_NostrilFlare => faceFlex.ProcessValue(value19, 19);
        [SerializeField, HideInInspector] float value20;
        float right_CheekV => faceFlex.ProcessValue(value20, 20);
        [SerializeField, HideInInspector] float value21;
        float left_CheekV => faceFlex.ProcessValue(value21, 21);
        [SerializeField, HideInInspector] float value22;
        float right_CheekH => faceFlex.ProcessValue(value22, 22);
        [SerializeField, HideInInspector] float value23;
        float left_CheekH => faceFlex.ProcessValue(value23, 23);
        [SerializeField, HideInInspector] float value24;
        float JawD => faceFlex.ProcessValue(value24, 24);
        [SerializeField, HideInInspector] float value25;
        float JawH => faceFlex.ProcessValue(value25, 25);
        [SerializeField, HideInInspector] float value26;
        float JawV => faceFlex.ProcessValue(value26, 26);
        [SerializeField, HideInInspector] float value27;
        float right_LipsV => faceFlex.ProcessValue(value27, 27);
        [SerializeField, HideInInspector] float value28;
        float left_LipsV => faceFlex.ProcessValue(value28, 28);
        [SerializeField, HideInInspector] float value29;
        float right_LipUpV => faceFlex.ProcessValue(value29, 29);
        [SerializeField, HideInInspector] float value30;
        float left_LipUpV => faceFlex.ProcessValue(value30, 30);
        [SerializeField, HideInInspector] float value31;
        float right_LipLoV => faceFlex.ProcessValue(value31, 31);
        [SerializeField, HideInInspector] float value32;
        float left_LipLoV => faceFlex.ProcessValue(value32, 32);
        [SerializeField, HideInInspector] float value33;
        float right_Smile => faceFlex.ProcessValue(value33, 33);
        [SerializeField, HideInInspector] float value34;
        float left_Smile => faceFlex.ProcessValue(value34, 34);
        [SerializeField, HideInInspector] float value35;
        float multi_Smile => faceFlex.ProcessValue(value35, 35);
        [SerializeField, HideInInspector] float value36;
        float right_Platysmus => faceFlex.ProcessValue(value36, 36);
        [SerializeField, HideInInspector] float value37;
        float left_Platysmus => faceFlex.ProcessValue(value37, 37);
        [SerializeField, HideInInspector] float value38;
        float right_FoldLipUp => faceFlex.ProcessValue(value38, 38);
        [SerializeField, HideInInspector] float value39;
        float left_FoldLipUp => faceFlex.ProcessValue(value39, 39);
        [SerializeField, HideInInspector] float value40;
        float right_FoldLipLo => faceFlex.ProcessValue(value40, 40);
        [SerializeField, HideInInspector] float value41;
        float left_FoldLipLo => faceFlex.ProcessValue(value41, 41);
        [SerializeField, HideInInspector] float value42;
        float right_PuckerLipUp => faceFlex.ProcessValue(value42, 42);
        [SerializeField, HideInInspector] float value43;
        float left_PuckerLipUp => faceFlex.ProcessValue(value43, 43);
        [SerializeField, HideInInspector] float value44;
        float right_PuckerLipLo => faceFlex.ProcessValue(value44, 44);
        [SerializeField, HideInInspector] float value45;
        float left_PuckerLipLo => faceFlex.ProcessValue(value45, 45);
        [SerializeField, HideInInspector] float value46;
        float right_LipCnrTwst => faceFlex.ProcessValue(value46, 46);
        [SerializeField, HideInInspector] float value47;
        float left_LipCnrTwst => faceFlex.ProcessValue(value47, 47);
        [SerializeField, HideInInspector] float value48;
        float right_Dimple => faceFlex.ProcessValue(value48, 48);
        [SerializeField, HideInInspector] float value49;
        float left_Dimple => faceFlex.ProcessValue(value49, 49);
        [SerializeField, HideInInspector] float value50;
        float right_PuffLipUp => faceFlex.ProcessValue(value50, 50);
        [SerializeField, HideInInspector] float value51;
        float left_PuffLipUp => faceFlex.ProcessValue(value51, 51);
        [SerializeField, HideInInspector] float value52;
        float right_PuffLipLo => faceFlex.ProcessValue(value52, 52);
        [SerializeField, HideInInspector] float value53;
        float left_PuffLipLo => faceFlex.ProcessValue(value53, 53);
        [SerializeField, HideInInspector] float value54;
        float eyes_updown => faceFlex.ProcessValue(value54, 54);
        [SerializeField, HideInInspector] float value55;
        float eyes_rightleft => faceFlex.ProcessValue(value55, 55);

        // Blend Shape Props
        float OpenLowerLip_SuckLipLoL { set { renderer.SetBlendShapeWeight(0, value * FlexScale); } }
        float OpenLowerLip_SuckLipLoR { set { renderer.SetBlendShapeWeight(1, value * FlexScale); } }
        float SuckLipLoL { set { renderer.SetBlendShapeWeight(2, value * FlexScale); } }
        float SuckLipLoR { set { renderer.SetBlendShapeWeight(3, value * FlexScale); } }
        float BrowOutV_Frown_RaiseBrowInL { set { renderer.SetBlendShapeWeight(4, value * FlexScale); } }
        float BrowOutV_Frown_RaiseBrowInR { set { renderer.SetBlendShapeWeight(5, value * FlexScale); } }
        float BrowOutV_RaiseBrowInL { set { renderer.SetBlendShapeWeight(6, value * FlexScale); } }
        float BrowOutV_RaiseBrowInR { set { renderer.SetBlendShapeWeight(7, value * FlexScale); } }
        float BrowOutVL { set { renderer.SetBlendShapeWeight(8, value * FlexScale); } }
        float BrowOutVR { set { renderer.SetBlendShapeWeight(9, value * FlexScale); } }
        float CheekV_SneerNoseL { set { renderer.SetBlendShapeWeight(10, value * FlexScale); } }
        float CheekV_SneerNoseR { set { renderer.SetBlendShapeWeight(11, value * FlexScale); } }
        float CheekVL { set { renderer.SetBlendShapeWeight(12, value * FlexScale); } }
        float CheekVR { set { renderer.SetBlendShapeWeight(13, value * FlexScale); } }
        float CloseLidLoL { set { renderer.SetBlendShapeWeight(14, value * FlexScale); } }
        float CloseLidLoR { set { renderer.SetBlendShapeWeight(15, value * FlexScale); } }
        float CloseLidUpL { set { renderer.SetBlendShapeWeight(16, value * FlexScale); } }
        float CloseLidUpR { set { renderer.SetBlendShapeWeight(17, value * FlexScale); } }
        float Frown_WrinkleNoseL { set { renderer.SetBlendShapeWeight(18, value * FlexScale); } }
        float Frown_WrinkleNoseR { set { renderer.SetBlendShapeWeight(19, value * FlexScale); } }
        float FrownL { set { renderer.SetBlendShapeWeight(20, value * FlexScale); } }
        float FrownR { set { renderer.SetBlendShapeWeight(21, value * FlexScale); } }
        float InnerSquint_OuterSquintL { set { renderer.SetBlendShapeWeight(22, value * FlexScale); } }
        float InnerSquint_OuterSquintR { set { renderer.SetBlendShapeWeight(23, value * FlexScale); } }
        float InnerSquintL { set { renderer.SetBlendShapeWeight(24, value * FlexScale); } }
        float InnerSquintR { set { renderer.SetBlendShapeWeight(25, value * FlexScale); } }
        float OpenJaw_OpenLowerLip_OpenUpperLip_Platysmus_SmileFullL { set { renderer.SetBlendShapeWeight(26, value * FlexScale); } }
        float OpenJaw_OpenLowerLip_OpenUpperLip_Platysmus_SmileFullR { set { renderer.SetBlendShapeWeight(27, value * FlexScale); } }
        float OuterSquintL { set { renderer.SetBlendShapeWeight(28, value * FlexScale); } }
        float OuterSquintR { set { renderer.SetBlendShapeWeight(29, value * FlexScale); } }
        float PressNoseL { set { renderer.SetBlendShapeWeight(30, value * FlexScale); } }
        float PressNoseR { set { renderer.SetBlendShapeWeight(31, value * FlexScale); } }
        float RaiseBrowInL { set { renderer.SetBlendShapeWeight(32, value * FlexScale); } }
        float RaiseBrowInR { set { renderer.SetBlendShapeWeight(33, value * FlexScale); } }
        float SmileFlatL { set { renderer.SetBlendShapeWeight(34, value * FlexScale); } }
        float SmileFlatR { set { renderer.SetBlendShapeWeight(35, value * FlexScale); } }
        float SmileFullL { set { renderer.SetBlendShapeWeight(36, value * FlexScale); } }
        float SmileFullR { set { renderer.SetBlendShapeWeight(37, value * FlexScale); } }
        float SmileSharpL { set { renderer.SetBlendShapeWeight(38, value * FlexScale); } }
        float SmileSharpR { set { renderer.SetBlendShapeWeight(39, value * FlexScale); } }
        float WrinkleNoseL { set { renderer.SetBlendShapeWeight(40, value * FlexScale); } }
        float WrinkleNoseR { set { renderer.SetBlendShapeWeight(41, value * FlexScale); } }
        float CheekV_OuterSquintL { set { renderer.SetBlendShapeWeight(42, value * FlexScale); } }
        float CheekV_OuterSquintR { set { renderer.SetBlendShapeWeight(43, value * FlexScale); } }
        float CheekV_InnerSquintL { set { renderer.SetBlendShapeWeight(44, value * FlexScale); } }
        float CheekV_InnerSquintR { set { renderer.SetBlendShapeWeight(45, value * FlexScale); } }
        float CheekV_InnerSquint_OuterSquintL { set { renderer.SetBlendShapeWeight(46, value * FlexScale); } }
        float CheekV_InnerSquint_OuterSquintR { set { renderer.SetBlendShapeWeight(47, value * FlexScale); } }
        float BrowOutV_InnerSquintL { set { renderer.SetBlendShapeWeight(48, value * FlexScale); } }
        float BrowOutV_InnerSquintR { set { renderer.SetBlendShapeWeight(49, value * FlexScale); } }
        float BrowOutV_OuterSquintL { set { renderer.SetBlendShapeWeight(50, value * FlexScale); } }
        float BrowOutV_OuterSquintR { set { renderer.SetBlendShapeWeight(51, value * FlexScale); } }
        float BrowOutV_InnerSquint_OuterSquintL { set { renderer.SetBlendShapeWeight(52, value * FlexScale); } }
        float BrowOutV_InnerSquint_OuterSquintR { set { renderer.SetBlendShapeWeight(53, value * FlexScale); } }
        float InnerSquint_RaiseBrowInL { set { renderer.SetBlendShapeWeight(54, value * FlexScale); } }
        float InnerSquint_RaiseBrowInR { set { renderer.SetBlendShapeWeight(55, value * FlexScale); } }
        float Frown_RaiseBrowInL { set { renderer.SetBlendShapeWeight(56, value * FlexScale); } }
        float Frown_RaiseBrowInR { set { renderer.SetBlendShapeWeight(57, value * FlexScale); } }
        float CheekV_CloseLidLoL { set { renderer.SetBlendShapeWeight(58, value * FlexScale); } }
        float CheekV_CloseLidLoR { set { renderer.SetBlendShapeWeight(59, value * FlexScale); } }
        float CloseLidUp_RaiseBrowInL { set { renderer.SetBlendShapeWeight(60, value * FlexScale); } }
        float CloseLidUp_RaiseBrowInR { set { renderer.SetBlendShapeWeight(61, value * FlexScale); } }
        float CloseLidUp_OuterSquintL { set { renderer.SetBlendShapeWeight(62, value * FlexScale); } }
        float CloseLidUp_OuterSquintR { set { renderer.SetBlendShapeWeight(63, value * FlexScale); } }
        float CloseLidUp_InnerSquintL { set { renderer.SetBlendShapeWeight(64, value * FlexScale); } }
        float CloseLidUp_InnerSquintR { set { renderer.SetBlendShapeWeight(65, value * FlexScale); } }
        float CloseLidUp_InnerSquint_OuterSquintL { set { renderer.SetBlendShapeWeight(66, value * FlexScale); } }
        float CloseLidUp_InnerSquint_OuterSquintR { set { renderer.SetBlendShapeWeight(67, value * FlexScale); } }
        float InnerSquint_OuterSquint_RaiseBrowInL { set { renderer.SetBlendShapeWeight(68, value * FlexScale); } }
        float InnerSquint_OuterSquint_RaiseBrowInR { set { renderer.SetBlendShapeWeight(69, value * FlexScale); } }
        float CloseLidUp_InnerSquint_OuterSquint_RaiseBrowInL { set { renderer.SetBlendShapeWeight(70, value * FlexScale); } }
        float CloseLidUp_InnerSquint_OuterSquint_RaiseBrowInR { set { renderer.SetBlendShapeWeight(71, value * FlexScale); } }
        float BrowOutV_CloseLidUpL { set { renderer.SetBlendShapeWeight(72, value * FlexScale); } }
        float BrowOutV_CloseLidUpR { set { renderer.SetBlendShapeWeight(73, value * FlexScale); } }
        float BrowOutV_FrownL { set { renderer.SetBlendShapeWeight(74, value * FlexScale); } }
        float BrowOutV_FrownR { set { renderer.SetBlendShapeWeight(75, value * FlexScale); } }
        float BrowOutV_CloseLidUp_RaiseBrowInL { set { renderer.SetBlendShapeWeight(76, value * FlexScale); } }
        float BrowOutV_CloseLidUp_RaiseBrowInR { set { renderer.SetBlendShapeWeight(77, value * FlexScale); } }
        float BrowOutV_CloseLidUp_FrownL { set { renderer.SetBlendShapeWeight(78, value * FlexScale); } }
        float BrowOutV_CloseLidUp_FrownR { set { renderer.SetBlendShapeWeight(79, value * FlexScale); } }
        float InnerSquint_OuterSquint_SneerNoseL { set { renderer.SetBlendShapeWeight(80, value * FlexScale); } }
        float InnerSquint_OuterSquint_SneerNoseR { set { renderer.SetBlendShapeWeight(81, value * FlexScale); } }
        float Platysmus_SmileFullL { set { renderer.SetBlendShapeWeight(82, value * FlexScale); } }
        float Platysmus_SmileFullR { set { renderer.SetBlendShapeWeight(83, value * FlexScale); } }
        float OpenJaw_OpenLowerLip_SmileFullL { set { renderer.SetBlendShapeWeight(84, value * FlexScale); } }
        float OpenJaw_OpenLowerLip_SmileFullR { set { renderer.SetBlendShapeWeight(85, value * FlexScale); } }
        float OpenJaw_OpenLowerLip_OpenUpperLip_SmileFullL { set { renderer.SetBlendShapeWeight(86, value * FlexScale); } }
        float OpenJaw_OpenLowerLip_OpenUpperLip_SmileFullR { set { renderer.SetBlendShapeWeight(87, value * FlexScale); } }
        float OpenJaw_OpenLowerLip_Platysmus_SmileFullL { set { renderer.SetBlendShapeWeight(88, value * FlexScale); } }
        float OpenJaw_OpenLowerLip_Platysmus_SmileFullR { set { renderer.SetBlendShapeWeight(89, value * FlexScale); } }
        float OpenJaw_OpenUpperLip_Platysmus_SmileFullL { set { renderer.SetBlendShapeWeight(90, value * FlexScale); } }
        float OpenJaw_OpenUpperLip_Platysmus_SmileFullR { set { renderer.SetBlendShapeWeight(91, value * FlexScale); } }
        float BlowNostrilL { set { renderer.SetBlendShapeWeight(92, value * FlexScale); } }
        float BlowNostrilR { set { renderer.SetBlendShapeWeight(93, value * FlexScale); } }
        float CheekV_PuckerLips { set { renderer.SetBlendShapeWeight(94, value * FlexScale); } }
        float CheekV_SmileFullL { set { renderer.SetBlendShapeWeight(95, value * FlexScale); } }
        float CheekV_SmileFullR { set { renderer.SetBlendShapeWeight(96, value * FlexScale); } }
        float ClenchJaw { set { renderer.SetBlendShapeWeight(97, value * FlexScale); } }
        float CompressLips_RaiseChinL { set { renderer.SetBlendShapeWeight(98, value * FlexScale); } }
        float CompressLips_RaiseChinR { set { renderer.SetBlendShapeWeight(99, value * FlexScale); } }
        float CompressLipsL { set { renderer.SetBlendShapeWeight(100, value * FlexScale); } }
        float CompressLipsR { set { renderer.SetBlendShapeWeight(101, value * FlexScale); } }
        float DeflateCheekL { set { renderer.SetBlendShapeWeight(102, value * FlexScale); } }
        float DeflateCheekR { set { renderer.SetBlendShapeWeight(103, value * FlexScale); } }
        float Dimple_OpenLipsL { set { renderer.SetBlendShapeWeight(104, value * FlexScale); } }
        float Dimple_OpenLipsR { set { renderer.SetBlendShapeWeight(105, value * FlexScale); } }
        float DimpleL { set { renderer.SetBlendShapeWeight(106, value * FlexScale); } }
        float DimpleR { set { renderer.SetBlendShapeWeight(107, value * FlexScale); } }
        float InflateCheekL { set { renderer.SetBlendShapeWeight(108, value * FlexScale); } }
        float InflateCheekR { set { renderer.SetBlendShapeWeight(109, value * FlexScale); } }
        float JutJaw { set { renderer.SetBlendShapeWeight(110, value * FlexScale); } }
        float JutUpperLip_RaiseChinL { set { renderer.SetBlendShapeWeight(111, value * FlexScale); } }
        float JutUpperLip_RaiseChinR { set { renderer.SetBlendShapeWeight(112, value * FlexScale); } }
        float JutUpperLipL { set { renderer.SetBlendShapeWeight(113, value * FlexScale); } }
        float JutUpperLipR { set { renderer.SetBlendShapeWeight(114, value * FlexScale); } }
        float LipCnrTwst_OpenUpperLip_SuckLipLoL { set { renderer.SetBlendShapeWeight(115, value * FlexScale); } }
        float LipCnrTwst_OpenUpperLip_SuckLipLoR { set { renderer.SetBlendShapeWeight(116, value * FlexScale); } }
        float LipCnrTwstL { set { renderer.SetBlendShapeWeight(117, value * FlexScale); } }
        float LipCnrTwstR { set { renderer.SetBlendShapeWeight(118, value * FlexScale); } }
        float OpenJaw_OpenLipsL { set { renderer.SetBlendShapeWeight(119, value * FlexScale); } }
        float OpenJaw_OpenLipsR { set { renderer.SetBlendShapeWeight(120, value * FlexScale); } }
        float OpenJaw_OpenLowerLip_OpenUpperLipL { set { renderer.SetBlendShapeWeight(121, value * FlexScale); } }
        float OpenJaw_OpenLowerLip_OpenUpperLipR { set { renderer.SetBlendShapeWeight(122, value * FlexScale); } }
        float OpenJaw { set { renderer.SetBlendShapeWeight(123, value * FlexScale); } }
        float OpenLips_SmileFullL { set { renderer.SetBlendShapeWeight(124, value * FlexScale); } }
        float OpenLips_SmileFullR { set { renderer.SetBlendShapeWeight(125, value * FlexScale); } }
        float OpenLipsL { set { renderer.SetBlendShapeWeight(126, value * FlexScale); } }
        float OpenLipsR { set { renderer.SetBlendShapeWeight(127, value * FlexScale); } }
        float OpenLowerLip_OpenUpperLip_Platysmus_SmileFullL { set { renderer.SetBlendShapeWeight(128, value * FlexScale); } }
        float OpenLowerLip_OpenUpperLip_Platysmus_SmileFullR { set { renderer.SetBlendShapeWeight(129, value * FlexScale); } }
        float OpenLowerLip_OpenUpperLipL { set { renderer.SetBlendShapeWeight(130, value * FlexScale); } }
        float OpenLowerLip_OpenUpperLipR { set { renderer.SetBlendShapeWeight(131, value * FlexScale); } }
        float OpenLowerLipL { set { renderer.SetBlendShapeWeight(132, value * FlexScale); } }
        float OpenLowerLipR { set { renderer.SetBlendShapeWeight(133, value * FlexScale); } }
        float OpenUpperLip_SuckLipUpL { set { renderer.SetBlendShapeWeight(134, value * FlexScale); } }
        float OpenUpperLip_SuckLipUpR { set { renderer.SetBlendShapeWeight(135, value * FlexScale); } }
        float OpenUpperLipL { set { renderer.SetBlendShapeWeight(136, value * FlexScale); } }
        float OpenUpperLipR { set { renderer.SetBlendShapeWeight(137, value * FlexScale); } }
        float PlatysmusL { set { renderer.SetBlendShapeWeight(138, value * FlexScale); } }
        float PlatysmusR { set { renderer.SetBlendShapeWeight(139, value * FlexScale); } }
        float PuckerLips_RaiseChin_SneerNose { set { renderer.SetBlendShapeWeight(140, value * FlexScale); } }
        float PuckerLips_RaiseChin { set { renderer.SetBlendShapeWeight(141, value * FlexScale); } }
        float PuffLips { set { renderer.SetBlendShapeWeight(142, value * FlexScale); } }
        float RaiseChinL { set { renderer.SetBlendShapeWeight(143, value * FlexScale); } }
        float RaiseChinR { set { renderer.SetBlendShapeWeight(144, value * FlexScale); } }
        float ScalpBackL { set { renderer.SetBlendShapeWeight(145, value * FlexScale); } }
        float ScalpBackR { set { renderer.SetBlendShapeWeight(146, value * FlexScale); } }
        float ScalpForwardL { set { renderer.SetBlendShapeWeight(147, value * FlexScale); } }
        float ScalpForwardR { set { renderer.SetBlendShapeWeight(148, value * FlexScale); } }
        float SneerNoseL { set { renderer.SetBlendShapeWeight(149, value * FlexScale); } }
        float SneerNoseR { set { renderer.SetBlendShapeWeight(150, value * FlexScale); } }
        float SuckJaw { set { renderer.SetBlendShapeWeight(151, value * FlexScale); } }
        float SuckLipUpL { set { renderer.SetBlendShapeWeight(152, value * FlexScale); } }
        float SuckLipUpR { set { renderer.SetBlendShapeWeight(153, value * FlexScale); } }
        float SuckNostrilL { set { renderer.SetBlendShapeWeight(154, value * FlexScale); } }
        float SuckNostrilR { set { renderer.SetBlendShapeWeight(155, value * FlexScale); } }
        float InnerSquint_SneerNoseL { set { renderer.SetBlendShapeWeight(156, value * FlexScale); } }
        float InnerSquint_SneerNoseR { set { renderer.SetBlendShapeWeight(157, value * FlexScale); } }
        float PuckerLipUpL { set { renderer.SetBlendShapeWeight(158, value * FlexScale); } }
        float PuckerLipUpR { set { renderer.SetBlendShapeWeight(159, value * FlexScale); } }
        float PuckerLipLoL { set { renderer.SetBlendShapeWeight(160, value * FlexScale); } }
        float PuckerLipLoR { set { renderer.SetBlendShapeWeight(161, value * FlexScale); } }
        float PuckerLipLo_PuckerLipUpL { set { renderer.SetBlendShapeWeight(162, value * FlexScale); } }
        float PuckerLipLo_PuckerLipUpR { set { renderer.SetBlendShapeWeight(163, value * FlexScale); } }
        float OpenJaw_PuckerLipUpL { set { renderer.SetBlendShapeWeight(164, value * FlexScale); } }
        float OpenJaw_PuckerLipUpR { set { renderer.SetBlendShapeWeight(165, value * FlexScale); } }
        float OpenJaw_PuckerLipLoL { set { renderer.SetBlendShapeWeight(166, value * FlexScale); } }
        float OpenJaw_PuckerLipLoR { set { renderer.SetBlendShapeWeight(167, value * FlexScale); } }
        float OpenJaw_PuckerLipLo_PuckerLipUpL { set { renderer.SetBlendShapeWeight(168, value * FlexScale); } }
        float OpenJaw_PuckerLipLo_PuckerLipUpR { set { renderer.SetBlendShapeWeight(169, value * FlexScale); } }
        float OpenLips_PuckerLipUpL { set { renderer.SetBlendShapeWeight(170, value * FlexScale); } }
        float OpenLips_PuckerLipUpR { set { renderer.SetBlendShapeWeight(171, value * FlexScale); } }
        float OpenLips_PuckerLipLoL { set { renderer.SetBlendShapeWeight(172, value * FlexScale); } }
        float OpenLips_PuckerLipLoR { set { renderer.SetBlendShapeWeight(173, value * FlexScale); } }
        float OpenLips_PuckerLipLo_PuckerLipUpL { set { renderer.SetBlendShapeWeight(174, value * FlexScale); } }
        float OpenLips_PuckerLipLo_PuckerLipUpR { set { renderer.SetBlendShapeWeight(175, value * FlexScale); } }
        float OpenJaw_OpenLips_PuckerLipLo_PuckerLipUpL { set { renderer.SetBlendShapeWeight(176, value * FlexScale); } }
        float OpenJaw_OpenLips_PuckerLipLo_PuckerLipUpR { set { renderer.SetBlendShapeWeight(177, value * FlexScale); } }
        float OpenJaw_OpenLips_PuckerLipLoL { set { renderer.SetBlendShapeWeight(178, value * FlexScale); } }
        float OpenJaw_OpenLips_PuckerLipLoR { set { renderer.SetBlendShapeWeight(179, value * FlexScale); } }
        float OpenJaw_OpenLips_PuckerLipUpL { set { renderer.SetBlendShapeWeight(180, value * FlexScale); } }
        float OpenJaw_OpenLips_PuckerLipUpR { set { renderer.SetBlendShapeWeight(181, value * FlexScale); } }
        float Dimple_PuckerLipLoL { set { renderer.SetBlendShapeWeight(182, value * FlexScale); } }
        float Dimple_PuckerLipLoR { set { renderer.SetBlendShapeWeight(183, value * FlexScale); } }
        float Dimple_PuckerLipUpL { set { renderer.SetBlendShapeWeight(184, value * FlexScale); } }
        float Dimple_PuckerLipUpR { set { renderer.SetBlendShapeWeight(185, value * FlexScale); } }
        float Dimple_PuckerLipLo_PuckerLipUpL { set { renderer.SetBlendShapeWeight(186, value * FlexScale); } }
        float Dimple_PuckerLipLo_PuckerLipUpR { set { renderer.SetBlendShapeWeight(187, value * FlexScale); } }
        float Dimple_OpenLips_PuckerLipLo_PuckerLipUpL { set { renderer.SetBlendShapeWeight(188, value * FlexScale); } }
        float Dimple_OpenLips_PuckerLipLo_PuckerLipUpR { set { renderer.SetBlendShapeWeight(189, value * FlexScale); } }
        float FunnelLipUpL { set { renderer.SetBlendShapeWeight(190, value * FlexScale); } }
        float FunnelLipUpR { set { renderer.SetBlendShapeWeight(191, value * FlexScale); } }
        float FunnelLipLoL { set { renderer.SetBlendShapeWeight(192, value * FlexScale); } }
        float FunnelLipLoR { set { renderer.SetBlendShapeWeight(193, value * FlexScale); } }
        float FunnelLipLo_FunnelLipUpL { set { renderer.SetBlendShapeWeight(194, value * FlexScale); } }
        float FunnelLipLo_FunnelLipUpR { set { renderer.SetBlendShapeWeight(195, value * FlexScale); } }
        float Dimple_FunnelLipLoL { set { renderer.SetBlendShapeWeight(196, value * FlexScale); } }
        float Dimple_FunnelLipLoR { set { renderer.SetBlendShapeWeight(197, value * FlexScale); } }
        float Dimple_FunnelLipUpL { set { renderer.SetBlendShapeWeight(198, value * FlexScale); } }
        float Dimple_FunnelLipUpR { set { renderer.SetBlendShapeWeight(199, value * FlexScale); } }
        float Dimple_FunnelLipLo_FunnelLipUpL { set { renderer.SetBlendShapeWeight(200, value * FlexScale); } }
        float Dimple_FunnelLipLo_FunnelLipUpR { set { renderer.SetBlendShapeWeight(201, value * FlexScale); } }
        float FunnelLipUp_OpenJawL { set { renderer.SetBlendShapeWeight(202, value * FlexScale); } }
        float FunnelLipUp_OpenJawR { set { renderer.SetBlendShapeWeight(203, value * FlexScale); } }
        float FunnelLipLo_OpenJawL { set { renderer.SetBlendShapeWeight(204, value * FlexScale); } }
        float FunnelLipLo_OpenJawR { set { renderer.SetBlendShapeWeight(205, value * FlexScale); } }
        float FunnelLipLo_FunnelLipUp_OpenJawL { set { renderer.SetBlendShapeWeight(206, value * FlexScale); } }
        float FunnelLipLo_FunnelLipUp_OpenJawR { set { renderer.SetBlendShapeWeight(207, value * FlexScale); } }
        float PuffLipUpL { set { renderer.SetBlendShapeWeight(208, value * FlexScale); } }
        float PuffLipUpR { set { renderer.SetBlendShapeWeight(209, value * FlexScale); } }
        float PuffLipLoL { set { renderer.SetBlendShapeWeight(210, value * FlexScale); } }
        float PuffLipLoR { set { renderer.SetBlendShapeWeight(211, value * FlexScale); } }
        float PuckerLipUp_RaiseChin_SneerNoseL { set { renderer.SetBlendShapeWeight(212, value * FlexScale); } }
        float PuckerLipUp_RaiseChin_SneerNoseR { set { renderer.SetBlendShapeWeight(213, value * FlexScale); } }
        float PuckerLipUp_RaiseChinL { set { renderer.SetBlendShapeWeight(214, value * FlexScale); } }
        float PuckerLipUp_RaiseChinR { set { renderer.SetBlendShapeWeight(215, value * FlexScale); } }
        float OpenLips_OpenUpperLipL { set { renderer.SetBlendShapeWeight(216, value * FlexScale); } }
        float OpenLips_OpenUpperLipR { set { renderer.SetBlendShapeWeight(217, value * FlexScale); } }
        float OpenLips_OpenLowerLipL { set { renderer.SetBlendShapeWeight(218, value * FlexScale); } }
        float OpenLips_OpenLowerLipR { set { renderer.SetBlendShapeWeight(219, value * FlexScale); } }
        float OpenJaw_OpenLips_OpenUpperLipL { set { renderer.SetBlendShapeWeight(220, value * FlexScale); } }
        float OpenJaw_OpenLips_OpenUpperLipR { set { renderer.SetBlendShapeWeight(221, value * FlexScale); } }
        float OpenJaw_OpenLips_OpenLowerLipL { set { renderer.SetBlendShapeWeight(222, value * FlexScale); } }
        float OpenJaw_OpenLips_OpenLowerLipR { set { renderer.SetBlendShapeWeight(223, value * FlexScale); } }
        float OpenJaw_OpenUpperLipL { set { renderer.SetBlendShapeWeight(224, value * FlexScale); } }
        float OpenJaw_OpenUpperLipR { set { renderer.SetBlendShapeWeight(225, value * FlexScale); } }
        float OpenJaw_OpenLowerLipL { set { renderer.SetBlendShapeWeight(226, value * FlexScale); } }
        float OpenJaw_OpenLowerLipR { set { renderer.SetBlendShapeWeight(227, value * FlexScale); } }
        float OpenUpperLip_PlatysmusL { set { renderer.SetBlendShapeWeight(228, value * FlexScale); } }
        float OpenUpperLip_PlatysmusR { set { renderer.SetBlendShapeWeight(229, value * FlexScale); } }
        float OpenLowerLip_PlatysmusL { set { renderer.SetBlendShapeWeight(230, value * FlexScale); } }
        float OpenLowerLip_PlatysmusR { set { renderer.SetBlendShapeWeight(231, value * FlexScale); } }
        float OpenLowerLip_OpenUpperLip_PlatysmusL { set { renderer.SetBlendShapeWeight(232, value * FlexScale); } }
        float OpenLowerLip_OpenUpperLip_PlatysmusR { set { renderer.SetBlendShapeWeight(233, value * FlexScale); } }
        float OpenUpperLip_SmileFullL { set { renderer.SetBlendShapeWeight(234, value * FlexScale); } }
        float OpenUpperLip_SmileFullR { set { renderer.SetBlendShapeWeight(235, value * FlexScale); } }
        float OpenLowerLip_SmileFullL { set { renderer.SetBlendShapeWeight(236, value * FlexScale); } }
        float OpenLowerLip_SmileFullR { set { renderer.SetBlendShapeWeight(237, value * FlexScale); } }
        float OpenLowerLip_OpenUpperLip_SmileFullL { set { renderer.SetBlendShapeWeight(238, value * FlexScale); } }
        float OpenLowerLip_OpenUpperLip_SmileFullR { set { renderer.SetBlendShapeWeight(239, value * FlexScale); } }
        float OpenLips_OpenUpperLip_SmileFullL { set { renderer.SetBlendShapeWeight(240, value * FlexScale); } }
        float OpenLips_OpenUpperLip_SmileFullR { set { renderer.SetBlendShapeWeight(241, value * FlexScale); } }
        float OpenLips_OpenLowerLip_SmileFullL { set { renderer.SetBlendShapeWeight(242, value * FlexScale); } }
        float OpenLips_OpenLowerLip_SmileFullR { set { renderer.SetBlendShapeWeight(243, value * FlexScale); } }
        float Platysmus_RaiseChinL { set { renderer.SetBlendShapeWeight(244, value * FlexScale); } }
        float Platysmus_RaiseChinR { set { renderer.SetBlendShapeWeight(245, value * FlexScale); } }
        float JutUpperLip_Platysmus_RaiseChinL { set { renderer.SetBlendShapeWeight(246, value * FlexScale); } }
        float JutUpperLip_Platysmus_RaiseChinR { set { renderer.SetBlendShapeWeight(247, value * FlexScale); } }
        float OpenUpperLip_Platysmus_SmileFullL { set { renderer.SetBlendShapeWeight(248, value * FlexScale); } }
        float OpenUpperLip_Platysmus_SmileFullR { set { renderer.SetBlendShapeWeight(249, value * FlexScale); } }
        float OpenLowerLip_Platysmus_SmileFullL { set { renderer.SetBlendShapeWeight(250, value * FlexScale); } }
        float OpenLowerLip_Platysmus_SmileFullR { set { renderer.SetBlendShapeWeight(251, value * FlexScale); } }
        float OpenJaw_PlatysmusL { set { renderer.SetBlendShapeWeight(252, value * FlexScale); } }
        float OpenJaw_PlatysmusR { set { renderer.SetBlendShapeWeight(253, value * FlexScale); } }
        float OpenJaw_OpenLowerLip_PlatysmusL { set { renderer.SetBlendShapeWeight(254, value * FlexScale); } }
        float OpenJaw_OpenLowerLip_PlatysmusR { set { renderer.SetBlendShapeWeight(255, value * FlexScale); } }
        float OpenJaw_SmileFullL { set { renderer.SetBlendShapeWeight(256, value * FlexScale); } }
        float OpenJaw_SmileFullR { set { renderer.SetBlendShapeWeight(257, value * FlexScale); } }
        float OpenJaw_Platysmus_SmileFullL { set { renderer.SetBlendShapeWeight(258, value * FlexScale); } }
        float OpenJaw_Platysmus_SmileFullR { set { renderer.SetBlendShapeWeight(259, value * FlexScale); } }
        float OpenJaw_OpenUpperLip_SmileFullL { set { renderer.SetBlendShapeWeight(260, value * FlexScale); } }
        float OpenJaw_OpenUpperLip_SmileFullR { set { renderer.SetBlendShapeWeight(261, value * FlexScale); } }
        float OpenJaw_OpenUpperLip_PlatysmusL { set { renderer.SetBlendShapeWeight(262, value * FlexScale); } }
        float OpenJaw_OpenUpperLip_PlatysmusR { set { renderer.SetBlendShapeWeight(263, value * FlexScale); } }
        float OpenJaw_OpenLowerLip_OpenUpperLip_PlatysmusL { set { renderer.SetBlendShapeWeight(264, value * FlexScale); } }
        float OpenJaw_OpenLowerLip_OpenUpperLip_PlatysmusR { set { renderer.SetBlendShapeWeight(265, value * FlexScale); } }
        float SlideJawL { set { renderer.SetBlendShapeWeight(266, value * FlexScale); } }
        float SlideJawR { set { renderer.SetBlendShapeWeight(267, value * FlexScale); } }
        float CheekV_PuckerLipUp_RaiseChinL { set { renderer.SetBlendShapeWeight(268, value * FlexScale); } }
        float CheekV_PuckerLipUp_RaiseChinR { set { renderer.SetBlendShapeWeight(269, value * FlexScale); } }
        float CompressLips_JutUpperLip_RaiseChinL { set { renderer.SetBlendShapeWeight(270, value * FlexScale); } }
        float CompressLips_JutUpperLip_RaiseChinR { set { renderer.SetBlendShapeWeight(271, value * FlexScale); } }

        public override void UpdateBlendShapes()
        {
            BlowNostrilL = (Mathf.Min(Mathf.Max(left_NostrilFlare, 0), 1)) ;
            BlowNostrilR = (Mathf.Min(Mathf.Max(right_NostrilFlare, 0), 1)) ;
            BrowOutV_Frown_RaiseBrowInL = ((Mathf.Min(Mathf.Max(left_BrowInV, 0), 1)) * left_Frown * left_BrowOutV) ;
            BrowOutV_Frown_RaiseBrowInR = ((Mathf.Min(Mathf.Max(right_BrowInV, 0), 1)) * right_Frown * right_BrowOutV) ;
            BrowOutV_RaiseBrowInL = ((Mathf.Min(Mathf.Max(left_BrowInV, 0), 1)) * left_BrowOutV) ;
            BrowOutV_RaiseBrowInR = ((Mathf.Min(Mathf.Max(right_BrowInV, 0), 1)) * right_BrowOutV) ;
            BrowOutVL = left_BrowOutV;
            BrowOutVR = right_BrowOutV;
            CheekV_SmileFullL = (((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * left_CheekV) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            CheekV_SmileFullR = (((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * right_CheekV) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            CheekV_SneerNoseL = ((Mathf.Min(Mathf.Max(left_NoseV, 0), 1)) * left_CheekV) ;
            CheekV_SneerNoseR = ((Mathf.Min(Mathf.Max(right_NoseV, 0), 1)) * right_CheekV) ;
            CheekVL = left_CheekV;
            CheekVR = right_CheekV;
            ClenchJaw = (1 - (Mathf.Min(Mathf.Max(JawV + 1, 0), 1))) ;
            CloseLidLoL = (Mathf.Min(1, (1 - (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1))) * (Mathf.Min(Mathf.Max((left_CloseLid - -1) / (1 - -1), 0), 1))) ;
            CloseLidLoR = (Mathf.Min(1, (1 - (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1))) * (Mathf.Min(Mathf.Max((right_CloseLid - -1) / (1 - -1), 0), 1))) ;
            CloseLidUpL = (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((left_CloseLid - -1) / (1 - -1), 0), 1))) ;
            CloseLidUpR = (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((right_CloseLid - -1) / (1 - -1), 0), 1))) ;
            CompressLips_RaiseChinL = ((((((1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipsV + 1, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)))) * (1 - (1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * left_PuckerLipUp)) * (1 - left_PuckerLipLo)) ;
            CompressLips_RaiseChinR = ((((((1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipsV + 1, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)))) * (1 - (1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * right_PuckerLipUp)) * (1 - right_PuckerLipLo)) ;
            CompressLipsL = ((((1 - (Mathf.Min(Mathf.Max(left_LipsV + 1, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)))) * (1 - (1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * left_PuckerLipUp)) ;
            CompressLipsR = ((((1 - (Mathf.Min(Mathf.Max(right_LipsV + 1, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)))) * (1 - (1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * right_PuckerLipUp)) ;
            DeflateCheekL = (1 - (Mathf.Min(Mathf.Max(left_CheekH + 1, 0), 1))) ;
            DeflateCheekR = (1 - (Mathf.Min(Mathf.Max(right_CheekH + 1, 0), 1))) ;
            Dimple_OpenLipsL = (((((Mathf.Min(Mathf.Max(left_LipsV, 0), 1)) * left_Dimple) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            Dimple_OpenLipsR = (((((Mathf.Min(Mathf.Max(right_LipsV, 0), 1)) * right_Dimple) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            DimpleL = ((left_Dimple * (1 - left_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            DimpleR = ((right_Dimple * (1 - right_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            Frown_WrinkleNoseL = (((1 - (Mathf.Min(Mathf.Max(left_BrowInV + 1, 0), 1))) * left_Frown) * (1 - left_BrowOutV)) ;
            Frown_WrinkleNoseR = (((1 - (Mathf.Min(Mathf.Max(right_BrowInV + 1, 0), 1))) * right_Frown) * (1 - right_BrowOutV)) ;
            FrownL = left_Frown;
            FrownR = right_Frown;
            InflateCheekL = (((((Mathf.Min(Mathf.Max(left_CheekH, 0), 1)) * (1 - ((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)))) * (1 - (Mathf.Min(Mathf.Max(left_LipsV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)))) ;
            InflateCheekR = (((((Mathf.Min(Mathf.Max(right_CheekH, 0), 1)) * (1 - ((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)))) * (1 - (Mathf.Min(Mathf.Max(right_LipsV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)))) ;
            InnerSquint_OuterSquintL = (left_OuterSquint * left_InnerSquint) ;
            InnerSquint_OuterSquintR = (right_OuterSquint * right_InnerSquint) ;
            InnerSquintL = left_InnerSquint;
            InnerSquintR = right_InnerSquint;
            JutJaw = (Mathf.Min(Mathf.Max(JawD, 0), 1)) ;
            JutUpperLip_RaiseChinL = ((((1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV + 1, 0), 1)))) * (1 - (1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * left_PuckerLipUp)) * (1 - left_PuckerLipLo)) ;
            JutUpperLip_RaiseChinR = ((((1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV + 1, 0), 1)))) * (1 - (1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * right_PuckerLipUp)) * (1 - right_PuckerLipLo)) ;
            JutUpperLipL = ((1 - (Mathf.Min(Mathf.Max(left_LipUpV + 1, 0), 1))) * (1 - (1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * left_PuckerLipUp)) ;
            JutUpperLipR = ((1 - (Mathf.Min(Mathf.Max(right_LipUpV + 1, 0), 1))) * (1 - (1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * right_PuckerLipUp)) ;
            LipCnrTwst_OpenUpperLip_SuckLipLoL = (((((1 - (Mathf.Min(Mathf.Max(left_FoldLipLo + 1, 0), 1))) * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * left_LipCnrTwst) * (1 - left_Platysmus)) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) ;
            LipCnrTwst_OpenUpperLip_SuckLipLoR = (((((1 - (Mathf.Min(Mathf.Max(right_FoldLipLo + 1, 0), 1))) * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * right_LipCnrTwst) * (1 - right_Platysmus)) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) ;
            LipCnrTwstL = (left_LipCnrTwst * (1 - left_Platysmus)) ;
            LipCnrTwstR = (right_LipCnrTwst * (1 - right_Platysmus)) ;
            OpenJaw_OpenLipsL = (((Mathf.Min(Mathf.Max(left_LipsV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) ;
            OpenJaw_OpenLipsR = (((Mathf.Min(Mathf.Max(right_LipsV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) ;
            OpenJaw_OpenLowerLip_OpenUpperLip_Platysmus_SmileFullL = (((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * left_Platysmus * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenJaw_OpenLowerLip_OpenUpperLip_Platysmus_SmileFullR = (((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * right_Platysmus * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenJaw_OpenLowerLip_OpenUpperLipL = ((((Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipLo)) ;
            OpenJaw_OpenLowerLip_OpenUpperLipR = ((((Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipLo)) ;
            OpenJaw = (Mathf.Min(Mathf.Max(JawV, 0), 1)) ;
            OpenLips_SmileFullL = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * (Mathf.Min(Mathf.Max(left_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenLips_SmileFullR = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * (Mathf.Min(Mathf.Max(right_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenLipsL = ((Mathf.Min(Mathf.Max(left_LipsV, 0), 1)) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) ;
            OpenLipsR = ((Mathf.Min(Mathf.Max(right_LipsV, 0), 1)) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) ;
            OpenLowerLip_OpenUpperLip_Platysmus_SmileFullL = (((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * left_Platysmus * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenLowerLip_OpenUpperLip_Platysmus_SmileFullR = (((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * right_Platysmus * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenLowerLip_OpenUpperLipL = ((((Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1))) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipLo)) ;
            OpenLowerLip_OpenUpperLipR = ((((Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1))) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipLo)) ;
            OpenLowerLip_SuckLipLoL = ((((1 - (Mathf.Min(Mathf.Max(left_FoldLipLo + 1, 0), 1))) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipLo)) ;
            OpenLowerLip_SuckLipLoR = ((((1 - (Mathf.Min(Mathf.Max(right_FoldLipLo + 1, 0), 1))) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipLo)) ;
            OpenLowerLipL = ((Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)) * (1 - left_PuckerLipLo)) ;
            OpenLowerLipR = ((Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)) * (1 - right_PuckerLipLo)) ;
            OpenUpperLip_SuckLipUpL = (((((1 - (Mathf.Min(Mathf.Max(left_FoldLipUp + 1, 0), 1))) * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1))) * (1 - left_PuckerLipUp)) * (1 - ((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)))) * (1 - left_PuckerLipUp)) ;
            OpenUpperLip_SuckLipUpR = (((((1 - (Mathf.Min(Mathf.Max(right_FoldLipUp + 1, 0), 1))) * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1))) * (1 - right_PuckerLipUp)) * (1 - ((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)))) * (1 - right_PuckerLipUp)) ;
            OpenUpperLipL = ((Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (1 - left_PuckerLipUp)) ;
            OpenUpperLipR = ((Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (1 - right_PuckerLipUp)) ;
            OuterSquintL = left_OuterSquint;
            OuterSquintR = right_OuterSquint;
            PlatysmusL = left_Platysmus;
            PlatysmusR = right_Platysmus;
            PressNoseL = (1 - (Mathf.Min(Mathf.Max(left_NoseV + 1, 0), 1))) ;
            PressNoseR = (1 - (Mathf.Min(Mathf.Max(right_NoseV + 1, 0), 1))) ;
            RaiseBrowInL = (Mathf.Min(Mathf.Max(left_BrowInV, 0), 1)) ;
            RaiseBrowInR = (Mathf.Min(Mathf.Max(right_BrowInV, 0), 1)) ;
            RaiseChinL = ((1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * (1 - left_PuckerLipLo)) ;
            RaiseChinR = ((1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * (1 - right_PuckerLipLo)) ;
            ScalpBackL = (1 - (Mathf.Min(Mathf.Max(left_ScalpD + 1, 0), 1))) ;
            ScalpBackR = (1 - (Mathf.Min(Mathf.Max(right_ScalpD + 1, 0), 1))) ;
            ScalpForwardL = (Mathf.Min(Mathf.Max(left_ScalpD, 0), 1)) ;
            ScalpForwardR = (Mathf.Min(Mathf.Max(right_ScalpD, 0), 1)) ;
            SmileFlatL = ((((((((Mathf.Min(1, (-Mathf.Min(0, (-11 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - -10))))) * Mathf.Min(Mathf.Max((multi_Smile - -11) / (-10 - -11), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - -10)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1))))) * (left_Smile)) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            SmileFlatR = ((((((((Mathf.Min(1, (-Mathf.Min(0, (-11 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - -10))))) * Mathf.Min(Mathf.Max((multi_Smile - -11) / (-10 - -11), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - -10)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1))))) * (right_Smile)) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            SmileFullL = ((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            SmileFullR = ((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            SmileSharpL = ((((((((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (10 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (10 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 11))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 10) / (11 - 10), 0), 1))))) * (left_Smile)) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            SmileSharpR = ((((((((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (10 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (10 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 11))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 10) / (11 - 10), 0), 1))))) * (right_Smile)) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            SneerNoseL = (Mathf.Min(Mathf.Max(left_NoseV, 0), 1)) ;
            SneerNoseR = (Mathf.Min(Mathf.Max(right_NoseV, 0), 1)) ;
            SuckJaw = (1 - (Mathf.Min(Mathf.Max(JawD + 1, 0), 1))) ;
            SuckLipLoL = ((1 - (Mathf.Min(Mathf.Max(left_FoldLipLo + 1, 0), 1))) * (1 - left_PuckerLipLo)) ;
            SuckLipLoR = ((1 - (Mathf.Min(Mathf.Max(right_FoldLipLo + 1, 0), 1))) * (1 - right_PuckerLipLo)) ;
            SuckLipUpL = (((1 - (Mathf.Min(Mathf.Max(left_FoldLipUp + 1, 0), 1))) * (1 - left_PuckerLipUp)) * (1 - ((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)))) ;
            SuckLipUpR = (((1 - (Mathf.Min(Mathf.Max(right_FoldLipUp + 1, 0), 1))) * (1 - right_PuckerLipUp)) * (1 - ((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)))) ;
            SuckNostrilL = (1 - (Mathf.Min(Mathf.Max(left_NostrilFlare + 1, 0), 1))) ;
            SuckNostrilR = (1 - (Mathf.Min(Mathf.Max(right_NostrilFlare + 1, 0), 1))) ;
            WrinkleNoseL = ((1 - (Mathf.Min(Mathf.Max(left_BrowInV + 1, 0), 1))) * (1 - left_BrowOutV)) ;
            WrinkleNoseR = ((1 - (Mathf.Min(Mathf.Max(right_BrowInV + 1, 0), 1))) * (1 - right_BrowOutV)) ;
            CheekV_OuterSquintL = (left_OuterSquint * left_CheekV) ;
            CheekV_OuterSquintR = (right_OuterSquint * right_CheekV) ;
            CheekV_InnerSquintL = (left_InnerSquint * left_CheekV) ;
            CheekV_InnerSquintR = (right_InnerSquint * right_CheekV) ;
            CheekV_InnerSquint_OuterSquintL = (left_OuterSquint * left_InnerSquint * left_CheekV) ;
            CheekV_InnerSquint_OuterSquintR = (right_OuterSquint * right_InnerSquint * right_CheekV) ;
            BrowOutV_InnerSquintL = (left_InnerSquint * left_BrowOutV) ;
            BrowOutV_InnerSquintR = (right_InnerSquint * right_BrowOutV) ;
            BrowOutV_OuterSquintL = (left_OuterSquint * left_BrowOutV) ;
            BrowOutV_OuterSquintR = (right_OuterSquint * right_BrowOutV) ;
            BrowOutV_InnerSquint_OuterSquintL = (left_OuterSquint * left_InnerSquint * left_BrowOutV) ;
            BrowOutV_InnerSquint_OuterSquintR = (right_OuterSquint * right_InnerSquint * right_BrowOutV) ;
            InnerSquint_RaiseBrowInL = ((Mathf.Min(Mathf.Max(left_BrowInV, 0), 1)) * left_InnerSquint) ;
            InnerSquint_RaiseBrowInR = ((Mathf.Min(Mathf.Max(right_BrowInV, 0), 1)) * right_InnerSquint) ;
            Frown_RaiseBrowInL = ((Mathf.Min(Mathf.Max(left_BrowInV, 0), 1)) * left_Frown) ;
            Frown_RaiseBrowInR = ((Mathf.Min(Mathf.Max(right_BrowInV, 0), 1)) * right_Frown) ;
            CheekV_CloseLidLoL = ((Mathf.Min(1, (1 - (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1))) * (Mathf.Min(Mathf.Max((left_CloseLid - -1) / (1 - -1), 0), 1))) * left_CheekV) ;
            CheekV_CloseLidLoR = ((Mathf.Min(1, (1 - (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1))) * (Mathf.Min(Mathf.Max((right_CloseLid - -1) / (1 - -1), 0), 1))) * right_CheekV) ;
            CloseLidUp_RaiseBrowInL = ((Mathf.Min(Mathf.Max(left_BrowInV, 0), 1)) * (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((left_CloseLid - -1) / (1 - -1), 0), 1)))) ;
            CloseLidUp_RaiseBrowInR = ((Mathf.Min(Mathf.Max(right_BrowInV, 0), 1)) * (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((right_CloseLid - -1) / (1 - -1), 0), 1)))) ;
            CloseLidUp_OuterSquintL = (left_OuterSquint * (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((left_CloseLid - -1) / (1 - -1), 0), 1)))) ;
            CloseLidUp_OuterSquintR = (right_OuterSquint * (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((right_CloseLid - -1) / (1 - -1), 0), 1)))) ;
            CloseLidUp_InnerSquintL = (left_InnerSquint * (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((left_CloseLid - -1) / (1 - -1), 0), 1)))) ;
            CloseLidUp_InnerSquintR = (right_InnerSquint * (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((right_CloseLid - -1) / (1 - -1), 0), 1)))) ;
            CloseLidUp_InnerSquint_OuterSquintL = (left_OuterSquint * left_InnerSquint * (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((left_CloseLid - -1) / (1 - -1), 0), 1)))) ;
            CloseLidUp_InnerSquint_OuterSquintR = (right_OuterSquint * right_InnerSquint * (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((right_CloseLid - -1) / (1 - -1), 0), 1)))) ;
            InnerSquint_OuterSquint_RaiseBrowInL = ((Mathf.Min(Mathf.Max(left_BrowInV, 0), 1)) * left_OuterSquint * left_InnerSquint) ;
            InnerSquint_OuterSquint_RaiseBrowInR = ((Mathf.Min(Mathf.Max(right_BrowInV, 0), 1)) * right_OuterSquint * right_InnerSquint) ;
            CloseLidUp_InnerSquint_OuterSquint_RaiseBrowInL = ((Mathf.Min(Mathf.Max(left_BrowInV, 0), 1)) * left_OuterSquint * left_InnerSquint * (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((left_CloseLid - -1) / (1 - -1), 0), 1)))) ;
            CloseLidUp_InnerSquint_OuterSquint_RaiseBrowInR = ((Mathf.Min(Mathf.Max(right_BrowInV, 0), 1)) * right_OuterSquint * right_InnerSquint * (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((right_CloseLid - -1) / (1 - -1), 0), 1)))) ;
            BrowOutV_CloseLidUpL = ((Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((left_CloseLid - -1) / (1 - -1), 0), 1))) * left_BrowOutV) ;
            BrowOutV_CloseLidUpR = ((Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((right_CloseLid - -1) / (1 - -1), 0), 1))) * right_BrowOutV) ;
            BrowOutV_FrownL = (left_Frown * left_BrowOutV) ;
            BrowOutV_FrownR = (right_Frown * right_BrowOutV) ;
            BrowOutV_CloseLidUp_RaiseBrowInL = ((Mathf.Min(Mathf.Max(left_BrowInV, 0), 1)) * (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((left_CloseLid - -1) / (1 - -1), 0), 1))) * left_BrowOutV) ;
            BrowOutV_CloseLidUp_RaiseBrowInR = ((Mathf.Min(Mathf.Max(right_BrowInV, 0), 1)) * (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((right_CloseLid - -1) / (1 - -1), 0), 1))) * right_BrowOutV) ;
            BrowOutV_CloseLidUp_FrownL = (left_Frown * (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((left_CloseLid - -1) / (1 - -1), 0), 1))) * left_BrowOutV) ;
            BrowOutV_CloseLidUp_FrownR = (right_Frown * (Mathf.Min(1, (1 + (-1 + 2 * (Mathf.Min(Mathf.Max((eyes_updown - -45) / (45 - -45), 0), 1))))) * (Mathf.Min(Mathf.Max((multi_CloseLid - -1) / (1 - -1), 0), 1)) * (Mathf.Min(Mathf.Max((right_CloseLid - -1) / (1 - -1), 0), 1))) * right_BrowOutV) ;
            InnerSquint_SneerNoseL = ((Mathf.Min(Mathf.Max(left_NoseV, 0), 1)) * left_InnerSquint) ;
            InnerSquint_SneerNoseR = ((Mathf.Min(Mathf.Max(right_NoseV, 0), 1)) * right_InnerSquint) ;
            InnerSquint_OuterSquint_SneerNoseL = ((Mathf.Min(Mathf.Max(left_NoseV, 0), 1)) * left_OuterSquint * left_InnerSquint) ;
            InnerSquint_OuterSquint_SneerNoseR = ((Mathf.Min(Mathf.Max(right_NoseV, 0), 1)) * right_OuterSquint * right_InnerSquint) ;
            PuckerLipUpL = (left_PuckerLipUp * (1 - left_Platysmus)) ;
            PuckerLipUpR = (right_PuckerLipUp * (1 - right_Platysmus)) ;
            PuckerLipLoL = (left_PuckerLipLo * (1 - left_Platysmus)) ;
            PuckerLipLoR = (right_PuckerLipLo * (1 - right_Platysmus)) ;
            PuckerLipLo_PuckerLipUpL = (((left_PuckerLipUp * left_PuckerLipLo) * (1 - left_Platysmus)) * (1 - left_Platysmus)) ;
            PuckerLipLo_PuckerLipUpR = (((right_PuckerLipUp * right_PuckerLipLo) * (1 - right_Platysmus)) * (1 - right_Platysmus)) ;
            OpenJaw_PuckerLipUpL = ((left_PuckerLipUp * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_Platysmus)) ;
            OpenJaw_PuckerLipUpR = ((right_PuckerLipUp * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_Platysmus)) ;
            OpenJaw_PuckerLipLoL = ((left_PuckerLipLo * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_Platysmus)) ;
            OpenJaw_PuckerLipLoR = ((right_PuckerLipLo * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_Platysmus)) ;
            OpenJaw_PuckerLipLo_PuckerLipUpL = (((left_PuckerLipUp * left_PuckerLipLo * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_Platysmus)) * (1 - left_Platysmus)) ;
            OpenJaw_PuckerLipLo_PuckerLipUpR = (((right_PuckerLipUp * right_PuckerLipLo * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_Platysmus)) * (1 - right_Platysmus)) ;
            OpenLips_PuckerLipUpL = (((left_PuckerLipUp * (Mathf.Min(Mathf.Max(left_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_Platysmus)) ;
            OpenLips_PuckerLipUpR = (((right_PuckerLipUp * (Mathf.Min(Mathf.Max(right_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_Platysmus)) ;
            OpenLips_PuckerLipLoL = (((left_PuckerLipLo * (Mathf.Min(Mathf.Max(left_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_Platysmus)) ;
            OpenLips_PuckerLipLoR = (((right_PuckerLipLo * (Mathf.Min(Mathf.Max(right_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_Platysmus)) ;
            OpenLips_PuckerLipLo_PuckerLipUpL = ((((left_PuckerLipUp * left_PuckerLipLo * (Mathf.Min(Mathf.Max(left_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_Platysmus)) * (1 - left_Platysmus)) ;
            OpenLips_PuckerLipLo_PuckerLipUpR = ((((right_PuckerLipUp * right_PuckerLipLo * (Mathf.Min(Mathf.Max(right_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_Platysmus)) * (1 - right_Platysmus)) ;
            OpenJaw_OpenLips_PuckerLipLo_PuckerLipUpL = ((((left_PuckerLipUp * left_PuckerLipLo * (Mathf.Min(Mathf.Max(left_LipsV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_Platysmus)) * (1 - left_Platysmus)) ;
            OpenJaw_OpenLips_PuckerLipLo_PuckerLipUpR = ((((right_PuckerLipUp * right_PuckerLipLo * (Mathf.Min(Mathf.Max(right_LipsV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_Platysmus)) * (1 - right_Platysmus)) ;
            OpenJaw_OpenLips_PuckerLipLoL = (((left_PuckerLipLo * (Mathf.Min(Mathf.Max(left_LipsV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_Platysmus)) ;
            OpenJaw_OpenLips_PuckerLipLoR = (((right_PuckerLipLo * (Mathf.Min(Mathf.Max(right_LipsV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_Platysmus)) ;
            OpenJaw_OpenLips_PuckerLipUpL = (((left_PuckerLipUp * (Mathf.Min(Mathf.Max(left_LipsV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_Platysmus)) ;
            OpenJaw_OpenLips_PuckerLipUpR = (((right_PuckerLipUp * (Mathf.Min(Mathf.Max(right_LipsV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_Platysmus)) ;
            Dimple_PuckerLipLoL = ((((left_PuckerLipLo * left_Dimple) * (1 - left_Platysmus)) * (1 - left_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            Dimple_PuckerLipLoR = ((((right_PuckerLipLo * right_Dimple) * (1 - right_Platysmus)) * (1 - right_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            Dimple_PuckerLipUpL = ((((left_PuckerLipUp * left_Dimple) * (1 - left_Platysmus)) * (1 - left_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            Dimple_PuckerLipUpR = ((((right_PuckerLipUp * right_Dimple) * (1 - right_Platysmus)) * (1 - right_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            Dimple_PuckerLipLo_PuckerLipUpL = (((((left_PuckerLipUp * left_PuckerLipLo * left_Dimple) * (1 - left_Platysmus)) * (1 - left_Platysmus)) * (1 - left_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            Dimple_PuckerLipLo_PuckerLipUpR = (((((right_PuckerLipUp * right_PuckerLipLo * right_Dimple) * (1 - right_Platysmus)) * (1 - right_Platysmus)) * (1 - right_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            Dimple_OpenLips_PuckerLipLo_PuckerLipUpL = ((((((left_PuckerLipUp * left_PuckerLipLo * (Mathf.Min(Mathf.Max(left_LipsV, 0), 1)) * left_Dimple) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_Platysmus)) * (1 - left_Platysmus)) * (1 - left_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            Dimple_OpenLips_PuckerLipLo_PuckerLipUpR = ((((((right_PuckerLipUp * right_PuckerLipLo * (Mathf.Min(Mathf.Max(right_LipsV, 0), 1)) * right_Dimple) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_Platysmus)) * (1 - right_Platysmus)) * (1 - right_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            FunnelLipUpL = ((((Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)) * (1 - left_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * left_PuckerLipUp)) ;
            FunnelLipUpR = ((((Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)) * (1 - right_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * right_PuckerLipUp)) ;
            FunnelLipLoL = ((((Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)) * (1 - left_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * left_PuckerLipLo)) ;
            FunnelLipLoR = ((((Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)) * (1 - right_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * right_PuckerLipLo)) ;
            FunnelLipLo_FunnelLipUpL = ((((((((Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)) * (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1))) * (1 - left_Platysmus)) * (1 - left_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * left_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * left_PuckerLipUp)) ;
            FunnelLipLo_FunnelLipUpR = ((((((((Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)) * (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1))) * (1 - right_Platysmus)) * (1 - right_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * right_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * right_PuckerLipUp)) ;
            Dimple_FunnelLipLoL = (((((((Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)) * left_Dimple) * (1 - left_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * left_PuckerLipLo)) * (1 - left_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            Dimple_FunnelLipLoR = (((((((Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)) * right_Dimple) * (1 - right_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * right_PuckerLipLo)) * (1 - right_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            Dimple_FunnelLipUpL = (((((((Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)) * left_Dimple) * (1 - left_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * left_PuckerLipUp)) * (1 - left_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            Dimple_FunnelLipUpR = (((((((Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)) * right_Dimple) * (1 - right_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * right_PuckerLipUp)) * (1 - right_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            Dimple_FunnelLipLo_FunnelLipUpL = ((((((((((Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)) * (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)) * left_Dimple) * (1 - left_Platysmus)) * (1 - left_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * left_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * left_PuckerLipUp)) * (1 - left_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            Dimple_FunnelLipLo_FunnelLipUpR = ((((((((((Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)) * (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)) * right_Dimple) * (1 - right_Platysmus)) * (1 - right_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * right_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * right_PuckerLipUp)) * (1 - right_LipCnrTwst)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)))) ;
            FunnelLipUp_OpenJawL = (((((Mathf.Min(Mathf.Max(JawV, 0), 1)) * (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1))) * (1 - left_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * left_PuckerLipUp)) ;
            FunnelLipUp_OpenJawR = (((((Mathf.Min(Mathf.Max(JawV, 0), 1)) * (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1))) * (1 - right_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * right_PuckerLipUp)) ;
            FunnelLipLo_OpenJawL = (((((Mathf.Min(Mathf.Max(JawV, 0), 1)) * (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1))) * (1 - left_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * left_PuckerLipLo)) ;
            FunnelLipLo_OpenJawR = (((((Mathf.Min(Mathf.Max(JawV, 0), 1)) * (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1))) * (1 - right_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * right_PuckerLipLo)) ;
            FunnelLipLo_FunnelLipUp_OpenJawL = ((((((((Mathf.Min(Mathf.Max(JawV, 0), 1)) * (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)) * (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1))) * (1 - left_Platysmus)) * (1 - left_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * left_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * left_PuckerLipUp)) ;
            FunnelLipLo_FunnelLipUp_OpenJawR = ((((((((Mathf.Min(Mathf.Max(JawV, 0), 1)) * (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)) * (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1))) * (1 - right_Platysmus)) * (1 - right_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * right_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(JawV, 0), 1)) * right_PuckerLipUp)) ;
            PuffLipUpL = (((((left_PuffLipUp * (1 - (Mathf.Min(Mathf.Max(left_LipsV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            PuffLipUpR = (((((right_PuffLipUp * (1 - (Mathf.Min(Mathf.Max(right_LipsV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            PuffLipLoL = (((((left_PuffLipLo * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_LipsV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            PuffLipLoR = (((((right_PuffLipLo * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_LipsV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            PuckerLipUp_RaiseChin_SneerNoseL = (((((Mathf.Min(Mathf.Max(left_NoseV, 0), 1)) * (1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * left_PuckerLipUp) * (1 - left_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(left_LipsV, 0), 1)))) * (1 - left_PuckerLipLo)) ;
            PuckerLipUp_RaiseChin_SneerNoseR = (((((Mathf.Min(Mathf.Max(right_NoseV, 0), 1)) * (1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * right_PuckerLipUp) * (1 - right_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(right_LipsV, 0), 1)))) * (1 - right_PuckerLipLo)) ;
            PuckerLipUp_RaiseChinL = (((((1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * left_PuckerLipUp) * (1 - left_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(left_LipsV, 0), 1)))) * (1 - left_PuckerLipLo)) ;
            PuckerLipUp_RaiseChinR = (((((1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * right_PuckerLipUp) * (1 - right_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(right_LipsV, 0), 1)))) * (1 - right_PuckerLipLo)) ;
            OpenLips_OpenUpperLipL = ((((Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_PuckerLipUp)) ;
            OpenLips_OpenUpperLipR = ((((Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_PuckerLipUp)) ;
            OpenLips_OpenLowerLipL = ((((Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_PuckerLipLo)) ;
            OpenLips_OpenLowerLipR = ((((Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_PuckerLipLo)) ;
            OpenJaw_OpenLips_OpenUpperLipL = ((((Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipsV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_PuckerLipUp)) ;
            OpenJaw_OpenLips_OpenUpperLipR = ((((Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipsV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_PuckerLipUp)) ;
            OpenJaw_OpenLips_OpenLowerLipL = ((((Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipsV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_PuckerLipLo)) ;
            OpenJaw_OpenLips_OpenLowerLipR = ((((Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipsV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_PuckerLipLo)) ;
            OpenJaw_OpenUpperLipL = (((Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_PuckerLipUp)) ;
            OpenJaw_OpenUpperLipR = (((Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_PuckerLipUp)) ;
            OpenJaw_OpenLowerLipL = (((Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_PuckerLipLo)) ;
            OpenJaw_OpenLowerLipR = (((Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_PuckerLipLo)) ;
            OpenUpperLip_PlatysmusL = ((left_Platysmus * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1))) * (1 - left_PuckerLipUp)) ;
            OpenUpperLip_PlatysmusR = ((right_Platysmus * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1))) * (1 - right_PuckerLipUp)) ;
            OpenLowerLip_PlatysmusL = ((left_Platysmus * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1))) * (1 - left_PuckerLipLo)) ;
            OpenLowerLip_PlatysmusR = ((right_Platysmus * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1))) * (1 - right_PuckerLipLo)) ;
            OpenLowerLip_OpenUpperLip_PlatysmusL = (((left_Platysmus * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1))) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipLo)) ;
            OpenLowerLip_OpenUpperLip_PlatysmusR = (((right_Platysmus * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1))) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipLo)) ;
            OpenUpperLip_SmileFullL = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenUpperLip_SmileFullR = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenLowerLip_SmileFullL = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenLowerLip_SmileFullR = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenLowerLip_OpenUpperLip_SmileFullL = (((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenLowerLip_OpenUpperLip_SmileFullR = (((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenLips_OpenUpperLip_SmileFullL = (((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenLips_OpenUpperLip_SmileFullR = (((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenLips_OpenLowerLip_SmileFullL = (((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenLips_OpenLowerLip_SmileFullR = (((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipsV, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            Platysmus_SmileFullL = (((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * left_Platysmus) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            Platysmus_SmileFullR = (((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * right_Platysmus) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            Platysmus_RaiseChinL = (((1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * left_Platysmus) * (1 - left_PuckerLipLo)) ;
            Platysmus_RaiseChinR = (((1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * right_Platysmus) * (1 - right_PuckerLipLo)) ;
            JutUpperLip_Platysmus_RaiseChinL = ((((1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * left_Platysmus * (1 - (Mathf.Min(Mathf.Max(left_LipUpV + 1, 0), 1)))) * (1 - (1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * left_PuckerLipUp)) * (1 - left_PuckerLipLo)) ;
            JutUpperLip_Platysmus_RaiseChinR = ((((1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * right_Platysmus * (1 - (Mathf.Min(Mathf.Max(right_LipUpV + 1, 0), 1)))) * (1 - (1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * right_PuckerLipUp)) * (1 - right_PuckerLipLo)) ;
            OpenUpperLip_Platysmus_SmileFullL = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * left_Platysmus * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenUpperLip_Platysmus_SmileFullR = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * right_Platysmus * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenLowerLip_Platysmus_SmileFullL = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * left_Platysmus * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenLowerLip_Platysmus_SmileFullR = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * right_Platysmus * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenJaw_PlatysmusL = (left_Platysmus * (Mathf.Min(Mathf.Max(JawV, 0), 1))) ;
            OpenJaw_PlatysmusR = (right_Platysmus * (Mathf.Min(Mathf.Max(JawV, 0), 1))) ;
            OpenJaw_OpenLowerLip_PlatysmusL = ((left_Platysmus * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_PuckerLipLo)) ;
            OpenJaw_OpenLowerLip_PlatysmusR = ((right_Platysmus * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_PuckerLipLo)) ;
            OpenJaw_SmileFullL = (((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenJaw_SmileFullR = (((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenJaw_Platysmus_SmileFullL = (((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * left_Platysmus * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenJaw_Platysmus_SmileFullR = (((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * right_Platysmus * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenJaw_OpenLowerLip_SmileFullL = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenJaw_OpenLowerLip_SmileFullR = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenJaw_OpenUpperLip_SmileFullL = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenJaw_OpenUpperLip_SmileFullR = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenJaw_OpenLowerLip_OpenUpperLip_SmileFullL = (((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenJaw_OpenLowerLip_OpenUpperLip_SmileFullR = (((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenJaw_OpenLowerLip_Platysmus_SmileFullL = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * left_Platysmus * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenJaw_OpenLowerLip_Platysmus_SmileFullR = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * right_Platysmus * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipLo)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            OpenJaw_OpenUpperLip_PlatysmusL = ((left_Platysmus * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_PuckerLipUp)) ;
            OpenJaw_OpenUpperLip_PlatysmusR = ((right_Platysmus * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_PuckerLipUp)) ;
            OpenJaw_OpenLowerLip_OpenUpperLip_PlatysmusL = (((left_Platysmus * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipLo)) ;
            OpenJaw_OpenLowerLip_OpenUpperLip_PlatysmusR = (((right_Platysmus * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipLo)) ;
            OpenJaw_OpenUpperLip_Platysmus_SmileFullL = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (left_Smile)) * left_Platysmus * (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - left_PuckerLipLo)) * (1 - left_PuckerLipUp)) * (1 - left_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_FoldLipUp, 0), 1)))) ;
            OpenJaw_OpenUpperLip_Platysmus_SmileFullR = ((((((((((Mathf.Min(1, (-Mathf.Min(0, (-1 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0))))) * Mathf.Min(Mathf.Max((multi_Smile - -1) / (0 - -1), 0), 1)) + (-(Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 0)))) - 1) * -(Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) - 1)) + ((Mathf.Min(1, (-Mathf.Min(0, (0 - multi_Smile)))) * Mathf.Min(1, (-Mathf.Min(0, (multi_Smile - 1))))) * (1 - (Mathf.Min(Mathf.Max((multi_Smile - 0) / (1 - 0), 0), 1))))) * (right_Smile)) * right_Platysmus * (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)) * (Mathf.Min(Mathf.Max(JawV, 0), 1))) * (1 - right_PuckerLipLo)) * (1 - right_PuckerLipUp)) * (1 - right_PuckerLipUp)) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipLo, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_FoldLipUp, 0), 1)))) ;
            SlideJawL = (Mathf.Min(Mathf.Max(JawH, 0), 1)) ;
            SlideJawR = (1 - (Mathf.Min(Mathf.Max(JawH + 1, 0), 1))) ;
            CheekV_PuckerLipUp_RaiseChinL = (((((1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * left_PuckerLipUp * left_CheekV) * (1 - left_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(left_LipsV, 0), 1)))) * (1 - left_PuckerLipLo)) ;
            CheekV_PuckerLipUp_RaiseChinR = (((((1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * right_PuckerLipUp * right_CheekV) * (1 - right_Platysmus)) * (1 - (Mathf.Min(Mathf.Max(right_LipsV, 0), 1)))) * (1 - right_PuckerLipLo)) ;
            CompressLips_JutUpperLip_RaiseChinL = (((((((1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV + 1, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(left_LipsV + 1, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(left_LipUpV, 0), 1)))) * (1 - (1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * left_PuckerLipUp)) * (1 - (1 - (Mathf.Min(Mathf.Max(left_LipLoV + 1, 0), 1))) * left_PuckerLipUp)) * (1 - left_PuckerLipLo)) ;
            CompressLips_JutUpperLip_RaiseChinR = (((((((1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV + 1, 0), 1))) * (1 - (Mathf.Min(Mathf.Max(right_LipsV + 1, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_LipLoV, 0), 1)))) * (1 - (Mathf.Min(Mathf.Max(right_LipUpV, 0), 1)))) * (1 - (1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * right_PuckerLipUp)) * (1 - (1 - (Mathf.Min(Mathf.Max(right_LipLoV + 1, 0), 1))) * right_PuckerLipUp)) * (1 - right_PuckerLipLo)) ;
        }
    }
}
